// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: scheduler.proto

package mesosproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible event types, followed by message definitions if
// applicable.
type Event_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	Event_UNKNOWN                 Event_Type = 0
	Event_SUBSCRIBED              Event_Type = 1  // See 'Subscribed' below.
	Event_OFFERS                  Event_Type = 2  // See 'Offers' below.
	Event_INVERSE_OFFERS          Event_Type = 9  // See 'InverseOffers' below.
	Event_RESCIND                 Event_Type = 3  // See 'Rescind' below.
	Event_RESCIND_INVERSE_OFFER   Event_Type = 10 // See 'RescindInverseOffer' below.
	Event_UPDATE                  Event_Type = 4  // See 'Update' below.
	Event_UPDATE_OPERATION_STATUS Event_Type = 11 // See 'UpdateOperationStatus' below.
	Event_MESSAGE                 Event_Type = 5  // See 'Message' below.
	Event_FAILURE                 Event_Type = 6  // See 'Failure' below.
	Event_ERROR                   Event_Type = 7  // See 'Error' below.
	// Periodic message sent by the Mesos master according to
	// 'Subscribed.heartbeat_interval_seconds'. If the scheduler does
	// not receive any events (including heartbeats) for an extended
	// period of time (e.g., 5 x heartbeat_interval_seconds), there is
	// likely a network partition. In such a case the scheduler should
	// close the existing subscription connection and resubscribe
	// using a backoff strategy.
	Event_HEARTBEAT Event_Type = 8
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "SUBSCRIBED",
		2:  "OFFERS",
		9:  "INVERSE_OFFERS",
		3:  "RESCIND",
		10: "RESCIND_INVERSE_OFFER",
		4:  "UPDATE",
		11: "UPDATE_OPERATION_STATUS",
		5:  "MESSAGE",
		6:  "FAILURE",
		7:  "ERROR",
		8:  "HEARTBEAT",
	}
	Event_Type_value = map[string]int32{
		"UNKNOWN":                 0,
		"SUBSCRIBED":              1,
		"OFFERS":                  2,
		"INVERSE_OFFERS":          9,
		"RESCIND":                 3,
		"RESCIND_INVERSE_OFFER":   10,
		"UPDATE":                  4,
		"UPDATE_OPERATION_STATUS": 11,
		"MESSAGE":                 5,
		"FAILURE":                 6,
		"ERROR":                   7,
		"HEARTBEAT":               8,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_proto_enumTypes[0].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_scheduler_proto_enumTypes[0]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Event_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Event_Type(num)
	return nil
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 0}
}

// Each of the responses of type `FOO` corresponds to `Foo` message below.
type Response_Type int32

const (
	Response_UNKNOWN Response_Type = 0
	// DEPRECATED.
	//
	// See 'ReconcileOperations' below.
	//
	// Deprecated: Marked as deprecated in scheduler.proto.
	Response_RECONCILE_OPERATIONS Response_Type = 1
)

// Enum value maps for Response_Type.
var (
	Response_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "RECONCILE_OPERATIONS",
	}
	Response_Type_value = map[string]int32{
		"UNKNOWN":              0,
		"RECONCILE_OPERATIONS": 1,
	}
)

func (x Response_Type) Enum() *Response_Type {
	p := new(Response_Type)
	*p = x
	return p
}

func (x Response_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Response_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_proto_enumTypes[1].Descriptor()
}

func (Response_Type) Type() protoreflect.EnumType {
	return &file_scheduler_proto_enumTypes[1]
}

func (x Response_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Response_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Response_Type(num)
	return nil
}

// Deprecated: Use Response_Type.Descriptor instead.
func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{1, 0}
}

type AttributeConstraint_Selector_PseudoattributeType int32

const (
	AttributeConstraint_Selector_UNKNOWN  AttributeConstraint_Selector_PseudoattributeType = 0
	AttributeConstraint_Selector_HOSTNAME AttributeConstraint_Selector_PseudoattributeType = 1
	AttributeConstraint_Selector_REGION   AttributeConstraint_Selector_PseudoattributeType = 2
	AttributeConstraint_Selector_ZONE     AttributeConstraint_Selector_PseudoattributeType = 3
)

// Enum value maps for AttributeConstraint_Selector_PseudoattributeType.
var (
	AttributeConstraint_Selector_PseudoattributeType_name = map[int32]string{
		0: "UNKNOWN",
		1: "HOSTNAME",
		2: "REGION",
		3: "ZONE",
	}
	AttributeConstraint_Selector_PseudoattributeType_value = map[string]int32{
		"UNKNOWN":  0,
		"HOSTNAME": 1,
		"REGION":   2,
		"ZONE":     3,
	}
)

func (x AttributeConstraint_Selector_PseudoattributeType) Enum() *AttributeConstraint_Selector_PseudoattributeType {
	p := new(AttributeConstraint_Selector_PseudoattributeType)
	*p = x
	return p
}

func (x AttributeConstraint_Selector_PseudoattributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttributeConstraint_Selector_PseudoattributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_proto_enumTypes[2].Descriptor()
}

func (AttributeConstraint_Selector_PseudoattributeType) Type() protoreflect.EnumType {
	return &file_scheduler_proto_enumTypes[2]
}

func (x AttributeConstraint_Selector_PseudoattributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AttributeConstraint_Selector_PseudoattributeType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AttributeConstraint_Selector_PseudoattributeType(num)
	return nil
}

// Deprecated: Use AttributeConstraint_Selector_PseudoattributeType.Descriptor instead.
func (AttributeConstraint_Selector_PseudoattributeType) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 0, 0}
}

// Possible call types, followed by message definitions if
// applicable.
type Call_Type int32

const (
	// See comments above on `Event::Type` for more details on this enum value.
	Call_UNKNOWN                      Call_Type = 0
	Call_SUBSCRIBE                    Call_Type = 1  // See 'Subscribe' below.
	Call_TEARDOWN                     Call_Type = 2  // Shuts down all tasks/executors and removes framework.
	Call_ACCEPT                       Call_Type = 3  // See 'Accept' below.
	Call_DECLINE                      Call_Type = 4  // See 'Decline' below.
	Call_ACCEPT_INVERSE_OFFERS        Call_Type = 13 // See 'AcceptInverseOffers' below.
	Call_DECLINE_INVERSE_OFFERS       Call_Type = 14 // See 'DeclineInverseOffers' below.
	Call_REVIVE                       Call_Type = 5  // Removes any previous filters set via ACCEPT or DECLINE.
	Call_KILL                         Call_Type = 6  // See 'Kill' below.
	Call_SHUTDOWN                     Call_Type = 7  // See 'Shutdown' below.
	Call_ACKNOWLEDGE                  Call_Type = 8  // See 'Acknowledge' below.
	Call_ACKNOWLEDGE_OPERATION_STATUS Call_Type = 15 // See message below.
	Call_RECONCILE                    Call_Type = 9  // See 'Reconcile' below.
	Call_RECONCILE_OPERATIONS         Call_Type = 16 // See 'ReconcileOperations' below.
	Call_MESSAGE                      Call_Type = 10 // See 'Message' below.
	Call_REQUEST                      Call_Type = 11 // See 'Request' below.
	Call_SUPPRESS                     Call_Type = 12 // Inform master to stop sending offers to the framework.
	Call_UPDATE_FRAMEWORK             Call_Type = 17 // See 'UpdateFramework' below.
)

// Enum value maps for Call_Type.
var (
	Call_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "SUBSCRIBE",
		2:  "TEARDOWN",
		3:  "ACCEPT",
		4:  "DECLINE",
		13: "ACCEPT_INVERSE_OFFERS",
		14: "DECLINE_INVERSE_OFFERS",
		5:  "REVIVE",
		6:  "KILL",
		7:  "SHUTDOWN",
		8:  "ACKNOWLEDGE",
		15: "ACKNOWLEDGE_OPERATION_STATUS",
		9:  "RECONCILE",
		16: "RECONCILE_OPERATIONS",
		10: "MESSAGE",
		11: "REQUEST",
		12: "SUPPRESS",
		17: "UPDATE_FRAMEWORK",
	}
	Call_Type_value = map[string]int32{
		"UNKNOWN":                      0,
		"SUBSCRIBE":                    1,
		"TEARDOWN":                     2,
		"ACCEPT":                       3,
		"DECLINE":                      4,
		"ACCEPT_INVERSE_OFFERS":        13,
		"DECLINE_INVERSE_OFFERS":       14,
		"REVIVE":                       5,
		"KILL":                         6,
		"SHUTDOWN":                     7,
		"ACKNOWLEDGE":                  8,
		"ACKNOWLEDGE_OPERATION_STATUS": 15,
		"RECONCILE":                    9,
		"RECONCILE_OPERATIONS":         16,
		"MESSAGE":                      10,
		"REQUEST":                      11,
		"SUPPRESS":                     12,
		"UPDATE_FRAMEWORK":             17,
	}
)

func (x Call_Type) Enum() *Call_Type {
	p := new(Call_Type)
	*p = x
	return p
}

func (x Call_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Call_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_scheduler_proto_enumTypes[3].Descriptor()
}

func (Call_Type) Type() protoreflect.EnumType {
	return &file_scheduler_proto_enumTypes[3]
}

func (x Call_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Call_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Call_Type(num)
	return nil
}

// Deprecated: Use Call_Type.Descriptor instead.
func (Call_Type) EnumDescriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 0}
}

// *
// Scheduler event API.
//
// An event is described using the standard protocol buffer "union"
// trick, see:
// https://developers.google.com/protocol-buffers/docs/techniques#union.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the event, indicates which optional field below should be
	// present if that type has a nested message definition.
	// Enum fields should be optional, see: MESOS-4997.
	Type                  *Event_Type                  `protobuf:"varint,1,opt,name=type,enum=mesos.v1.scheduler.Event_Type" json:"type,omitempty"`
	Subscribed            *Event_Subscribed            `protobuf:"bytes,2,opt,name=subscribed" json:"subscribed,omitempty"`
	Offers                *Event_Offers                `protobuf:"bytes,3,opt,name=offers" json:"offers,omitempty"`
	InverseOffers         *Event_InverseOffers         `protobuf:"bytes,9,opt,name=inverse_offers,json=inverseOffers" json:"inverse_offers,omitempty"`
	Rescind               *Event_Rescind               `protobuf:"bytes,4,opt,name=rescind" json:"rescind,omitempty"`
	RescindInverseOffer   *Event_RescindInverseOffer   `protobuf:"bytes,10,opt,name=rescind_inverse_offer,json=rescindInverseOffer" json:"rescind_inverse_offer,omitempty"`
	Update                *Event_Update                `protobuf:"bytes,5,opt,name=update" json:"update,omitempty"`
	UpdateOperationStatus *Event_UpdateOperationStatus `protobuf:"bytes,11,opt,name=update_operation_status,json=updateOperationStatus" json:"update_operation_status,omitempty"`
	Message               *Event_Message               `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	Failure               *Event_Failure               `protobuf:"bytes,7,opt,name=failure" json:"failure,omitempty"`
	Error                 *Event_Error                 `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0}
}

func (x *Event) GetType() Event_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Event_UNKNOWN
}

func (x *Event) GetSubscribed() *Event_Subscribed {
	if x != nil {
		return x.Subscribed
	}
	return nil
}

func (x *Event) GetOffers() *Event_Offers {
	if x != nil {
		return x.Offers
	}
	return nil
}

func (x *Event) GetInverseOffers() *Event_InverseOffers {
	if x != nil {
		return x.InverseOffers
	}
	return nil
}

func (x *Event) GetRescind() *Event_Rescind {
	if x != nil {
		return x.Rescind
	}
	return nil
}

func (x *Event) GetRescindInverseOffer() *Event_RescindInverseOffer {
	if x != nil {
		return x.RescindInverseOffer
	}
	return nil
}

func (x *Event) GetUpdate() *Event_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *Event) GetUpdateOperationStatus() *Event_UpdateOperationStatus {
	if x != nil {
		return x.UpdateOperationStatus
	}
	return nil
}

func (x *Event) GetMessage() *Event_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Event) GetFailure() *Event_Failure {
	if x != nil {
		return x.Failure
	}
	return nil
}

func (x *Event) GetError() *Event_Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// *
// NOTE: After resolution of MESOS-9648, this message is not currently used by
// Mesos. It is left in place in anticipation of future use.
//
// Synchronous responses for calls made to the scheduler API.
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Response_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.scheduler.Response_Type" json:"type,omitempty"`
	// DEPRECATED.
	//
	// Deprecated: Marked as deprecated in scheduler.proto.
	ReconcileOperations *Response_ReconcileOperations `protobuf:"bytes,2,opt,name=reconcile_operations,json=reconcileOperations" json:"reconcile_operations,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetType() Response_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Response_UNKNOWN
}

// Deprecated: Marked as deprecated in scheduler.proto.
func (x *Response) GetReconcileOperations() *Response_ReconcileOperations {
	if x != nil {
		return x.ReconcileOperations
	}
	return nil
}

// An attribute constraint consists of a Predicate: a boolean function of
// an attribute or an attribute-like property of an agent (a pseudoattribute),
// and a Selector: a rule for obtaining this (pseudo)attribute value from
// AgentInfo.
//
// The attribute constraint evaluates to `true` for a given agent if and only
// if the predicate yields `true` for the specified (pseudo)attribute.
type AttributeConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector  *AttributeConstraint_Selector  `protobuf:"bytes,1,req,name=selector" json:"selector,omitempty"`
	Predicate *AttributeConstraint_Predicate `protobuf:"bytes,2,req,name=predicate" json:"predicate,omitempty"`
}

func (x *AttributeConstraint) Reset() {
	*x = AttributeConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint) ProtoMessage() {}

func (x *AttributeConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint.ProtoReflect.Descriptor instead.
func (*AttributeConstraint) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2}
}

func (x *AttributeConstraint) GetSelector() *AttributeConstraint_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *AttributeConstraint) GetPredicate() *AttributeConstraint_Predicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

// Frameworks can express offer constraints for their roles.
//
// Constraints restrict which offers will be sent to the framework:
// if an offer does not match the provided constraints, it will not
// be sent to the framework.
//
// Constraints are expressed on a per role basis. If you consider a
// scheduler that has multiple apps to launch within a single role,
// the structure of the constraints for that role looks as follows:
//
//	app 1              app 2                         app N
//
// constraints   OR   constraints   OR   ...   OR   constraints
//
//	                    /\
//	                   /  \
//	constraint 1 AND constraint 2 AND ... AND constraint M
//
// That is, at least one of the constraint groups must match for an offer to
// be generated, and within a group all the constraints must match.
//
// As a concrete example, consider a scheduler with two applications
// with multiple tasks it wants to launch within a role:
//
// application 1: all tasks on an agent with a hostname == "foo"
// application 2: each task on an agent with an unique "rack" attribute
//
// Assuming there are already some instances of application 2 launched,
// the constraints might look like the following:
//
//	    app 1              app 2
//	constraints    OR    constraints
//	     /\                 /\
//	    /  \               /  \
//
// hostname == "foo"    rack != "X" AND
//
//	             rack != "Y" AND
//	             rack != "Z"
//
//	          ==
//
//	(hostname == "foo")
//	          OR
//
// (rack != "X" AND rack != "Y" AND rack != "Z")
//
// The benefits of expressing constraints are:
//
// (1) reduced fraction of unusable offers received, and hence:
// (2) reduced traffic and processing overhead due to unusable
// offer / DECLINE back and forth churn
// (3) most importantly, reduced latency to receive the desired
// offer for a particular task
//
// NOTE: Even if a particular resource matches offer constraints of a
// framework's role, there is still no guarantee that it will ever be offered
// to this role of the framework.
//
// NOTE: Each `Group` must contain at least one constraint, and
// `RoleConstraints` must contain at least one `Group`, otherwise
// the message is not valid.
//
// NOTE: Frameworks are allowed to use default-constructed
// `OfferConstraints` (instead of not setting the `offer_constraints` field)
// in the SUBSCRIBE/UPDATE_FRAMEWORK calls to indicate subscription without
// any offer constraints.
type OfferConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleConstraints map[string]*OfferConstraints_RoleConstraints `protobuf:"bytes,1,rep,name=role_constraints,json=roleConstraints" json:"role_constraints,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *OfferConstraints) Reset() {
	*x = OfferConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferConstraints) ProtoMessage() {}

func (x *OfferConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferConstraints.ProtoReflect.Descriptor instead.
func (*OfferConstraints) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{3}
}

func (x *OfferConstraints) GetRoleConstraints() map[string]*OfferConstraints_RoleConstraints {
	if x != nil {
		return x.RoleConstraints
	}
	return nil
}

// *
// Scheduler call API.
//
// Like Event, a Call is described using the standard protocol buffer
// "union" trick (see above).
type Call struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies who generated this call. Master assigns a framework id
	// when a new scheduler subscribes for the first time. Once assigned,
	// the scheduler must set the 'framework_id' here and within its
	// FrameworkInfo (in any further 'Subscribe' calls). This allows the
	// master to identify a scheduler correctly across disconnections,
	// failovers, etc.
	FrameworkId *FrameworkID `protobuf:"bytes,1,opt,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	// Type of the call, indicates which optional field below should be
	// present if that type has a nested message definition.
	// See comments on `Event::Type` above on the reasoning behind this
	// field being optional.
	Type                       *Call_Type                       `protobuf:"varint,2,opt,name=type,enum=mesos.v1.scheduler.Call_Type" json:"type,omitempty"`
	Subscribe                  *Call_Subscribe                  `protobuf:"bytes,3,opt,name=subscribe" json:"subscribe,omitempty"`
	Accept                     *Call_Accept                     `protobuf:"bytes,4,opt,name=accept" json:"accept,omitempty"`
	Decline                    *Call_Decline                    `protobuf:"bytes,5,opt,name=decline" json:"decline,omitempty"`
	AcceptInverseOffers        *Call_AcceptInverseOffers        `protobuf:"bytes,13,opt,name=accept_inverse_offers,json=acceptInverseOffers" json:"accept_inverse_offers,omitempty"`
	DeclineInverseOffers       *Call_DeclineInverseOffers       `protobuf:"bytes,14,opt,name=decline_inverse_offers,json=declineInverseOffers" json:"decline_inverse_offers,omitempty"`
	Revive                     *Call_Revive                     `protobuf:"bytes,15,opt,name=revive" json:"revive,omitempty"`
	Kill                       *Call_Kill                       `protobuf:"bytes,6,opt,name=kill" json:"kill,omitempty"`
	Shutdown                   *Call_Shutdown                   `protobuf:"bytes,7,opt,name=shutdown" json:"shutdown,omitempty"`
	Acknowledge                *Call_Acknowledge                `protobuf:"bytes,8,opt,name=acknowledge" json:"acknowledge,omitempty"`
	AcknowledgeOperationStatus *Call_AcknowledgeOperationStatus `protobuf:"bytes,17,opt,name=acknowledge_operation_status,json=acknowledgeOperationStatus" json:"acknowledge_operation_status,omitempty"`
	Reconcile                  *Call_Reconcile                  `protobuf:"bytes,9,opt,name=reconcile" json:"reconcile,omitempty"`
	ReconcileOperations        *Call_ReconcileOperations        `protobuf:"bytes,18,opt,name=reconcile_operations,json=reconcileOperations" json:"reconcile_operations,omitempty"`
	Message                    *Call_Message                    `protobuf:"bytes,10,opt,name=message" json:"message,omitempty"`
	Request                    *Call_Request                    `protobuf:"bytes,11,opt,name=request" json:"request,omitempty"`
	Suppress                   *Call_Suppress                   `protobuf:"bytes,16,opt,name=suppress" json:"suppress,omitempty"`
	UpdateFramework            *Call_UpdateFramework            `protobuf:"bytes,19,opt,name=update_framework,json=updateFramework" json:"update_framework,omitempty"`
}

func (x *Call) Reset() {
	*x = Call{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call) ProtoMessage() {}

func (x *Call) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call.ProtoReflect.Descriptor instead.
func (*Call) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4}
}

func (x *Call) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *Call) GetType() Call_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Call_UNKNOWN
}

func (x *Call) GetSubscribe() *Call_Subscribe {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *Call) GetAccept() *Call_Accept {
	if x != nil {
		return x.Accept
	}
	return nil
}

func (x *Call) GetDecline() *Call_Decline {
	if x != nil {
		return x.Decline
	}
	return nil
}

func (x *Call) GetAcceptInverseOffers() *Call_AcceptInverseOffers {
	if x != nil {
		return x.AcceptInverseOffers
	}
	return nil
}

func (x *Call) GetDeclineInverseOffers() *Call_DeclineInverseOffers {
	if x != nil {
		return x.DeclineInverseOffers
	}
	return nil
}

func (x *Call) GetRevive() *Call_Revive {
	if x != nil {
		return x.Revive
	}
	return nil
}

func (x *Call) GetKill() *Call_Kill {
	if x != nil {
		return x.Kill
	}
	return nil
}

func (x *Call) GetShutdown() *Call_Shutdown {
	if x != nil {
		return x.Shutdown
	}
	return nil
}

func (x *Call) GetAcknowledge() *Call_Acknowledge {
	if x != nil {
		return x.Acknowledge
	}
	return nil
}

func (x *Call) GetAcknowledgeOperationStatus() *Call_AcknowledgeOperationStatus {
	if x != nil {
		return x.AcknowledgeOperationStatus
	}
	return nil
}

func (x *Call) GetReconcile() *Call_Reconcile {
	if x != nil {
		return x.Reconcile
	}
	return nil
}

func (x *Call) GetReconcileOperations() *Call_ReconcileOperations {
	if x != nil {
		return x.ReconcileOperations
	}
	return nil
}

func (x *Call) GetMessage() *Call_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Call) GetRequest() *Call_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Call) GetSuppress() *Call_Suppress {
	if x != nil {
		return x.Suppress
	}
	return nil
}

func (x *Call) GetUpdateFramework() *Call_UpdateFramework {
	if x != nil {
		return x.UpdateFramework
	}
	return nil
}

// *
// EXPERIMENTAL.
//
// This message is used by the C++ Scheduler HTTP API library as the return
// type of the `call()` method. The message includes the HTTP status code with
// which the master responded, and optionally a `scheduler::Response` message.
//
// There are three cases to consider depending on the HTTP response status code:
//
//	(1) '202 ACCEPTED': Indicates the call was accepted for processing and
//	      neither `response` nor `error` will be set.
//
//	(2) '200 OK': Indicates the call completed successfully, and the `response`
//	      field will be set if the `scheduler::Call::Type` has a corresponding
//	      `scheduler::Response::Type`; `error` will not be set.
//
//	(3) For all other HTTP status codes, the `response` field will not be set
//	    and the `error` field may be set to provide more information.
//
// NOTE: This message is used by the C++ Scheduler HTTP API library and is not
// part of the API specification.
type APIResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP status code with which the master responded.
	StatusCode *uint32 `protobuf:"varint,1,req,name=status_code,json=statusCode" json:"status_code,omitempty"`
	// NOTE: After resolution of MESOS-9648, this field is not currently used by
	// Mesos. It is left in place in anticipation of future use.
	//
	// This field will only be set if the call completed successfully and the
	// master responded with `200 OK` and a non-empty body.
	Response *Response `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	// This field will only be set if the call did not complete successfully and
	// the master responded with a status other than `202 Accepted` or `200 OK`,
	// and with a non-empty body.
	Error *string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (x *APIResult) Reset() {
	*x = APIResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIResult) ProtoMessage() {}

func (x *APIResult) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIResult.ProtoReflect.Descriptor instead.
func (*APIResult) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{5}
}

func (x *APIResult) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *APIResult) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *APIResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

// First event received when the scheduler subscribes.
type Event_Subscribed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameworkId *FrameworkID `protobuf:"bytes,1,req,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	// This value will be set if the master is sending heartbeats. See
	// the comment above on 'HEARTBEAT' for more details.
	HeartbeatIntervalSeconds *float64 `protobuf:"fixed64,2,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds" json:"heartbeat_interval_seconds,omitempty"`
	// Since Mesos 1.1.
	MasterInfo *MasterInfo `protobuf:"bytes,3,opt,name=master_info,json=masterInfo" json:"master_info,omitempty"`
}

func (x *Event_Subscribed) Reset() {
	*x = Event_Subscribed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Subscribed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Subscribed) ProtoMessage() {}

func (x *Event_Subscribed) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Subscribed.ProtoReflect.Descriptor instead.
func (*Event_Subscribed) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Event_Subscribed) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *Event_Subscribed) GetHeartbeatIntervalSeconds() float64 {
	if x != nil && x.HeartbeatIntervalSeconds != nil {
		return *x.HeartbeatIntervalSeconds
	}
	return 0
}

func (x *Event_Subscribed) GetMasterInfo() *MasterInfo {
	if x != nil {
		return x.MasterInfo
	}
	return nil
}

// Received whenever there are new resources that are offered to the
// scheduler. Each offer corresponds to a set of resources on an
// agent. Until the scheduler accepts or declines an offer the
// resources are considered allocated to the scheduler.
type Event_Offers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offers []*Offer `protobuf:"bytes,1,rep,name=offers" json:"offers,omitempty"`
}

func (x *Event_Offers) Reset() {
	*x = Event_Offers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Offers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Offers) ProtoMessage() {}

func (x *Event_Offers) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Offers.ProtoReflect.Descriptor instead.
func (*Event_Offers) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Event_Offers) GetOffers() []*Offer {
	if x != nil {
		return x.Offers
	}
	return nil
}

// Received whenever there are resources requested back from the
// scheduler. Each inverse offer specifies the agent, and
// optionally specific resources. Accepting or Declining an inverse
// offer informs the allocator of the scheduler's ability to release
// the specified resources without violating an SLA. If no resources
// are specified then all resources on the agent are requested to be
// released.
type Event_InverseOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InverseOffers []*InverseOffer `protobuf:"bytes,1,rep,name=inverse_offers,json=inverseOffers" json:"inverse_offers,omitempty"`
}

func (x *Event_InverseOffers) Reset() {
	*x = Event_InverseOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_InverseOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_InverseOffers) ProtoMessage() {}

func (x *Event_InverseOffers) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_InverseOffers.ProtoReflect.Descriptor instead.
func (*Event_InverseOffers) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Event_InverseOffers) GetInverseOffers() []*InverseOffer {
	if x != nil {
		return x.InverseOffers
	}
	return nil
}

// Received when a particular offer is no longer valid (e.g., the
// agent corresponding to the offer has been removed) and hence
// needs to be rescinded. Any future calls ('Accept' / 'Decline') made
// by the scheduler regarding this offer will be invalid.
type Event_Rescind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferId *OfferID `protobuf:"bytes,1,req,name=offer_id,json=offerId" json:"offer_id,omitempty"`
}

func (x *Event_Rescind) Reset() {
	*x = Event_Rescind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Rescind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Rescind) ProtoMessage() {}

func (x *Event_Rescind) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Rescind.ProtoReflect.Descriptor instead.
func (*Event_Rescind) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Event_Rescind) GetOfferId() *OfferID {
	if x != nil {
		return x.OfferId
	}
	return nil
}

// Received when a particular inverse offer is no longer valid
// (e.g., the agent corresponding to the offer has been removed)
// and hence needs to be rescinded. Any future calls ('Accept' /
// 'Decline') made by the scheduler regarding this inverse offer
// will be invalid.
type Event_RescindInverseOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InverseOfferId *OfferID `protobuf:"bytes,1,req,name=inverse_offer_id,json=inverseOfferId" json:"inverse_offer_id,omitempty"`
}

func (x *Event_RescindInverseOffer) Reset() {
	*x = Event_RescindInverseOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_RescindInverseOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_RescindInverseOffer) ProtoMessage() {}

func (x *Event_RescindInverseOffer) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_RescindInverseOffer.ProtoReflect.Descriptor instead.
func (*Event_RescindInverseOffer) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Event_RescindInverseOffer) GetInverseOfferId() *OfferID {
	if x != nil {
		return x.InverseOfferId
	}
	return nil
}

// Received whenever there is a status update that is generated by
// the executor or agent or master. Status updates should be used by
// executors to reliably communicate the status of the tasks that
// they manage. It is crucial that a terminal update (see TaskState
// in v1/mesos.proto) is sent by the executor as soon as the task
// terminates, in order for Mesos to release the resources allocated
// to the task. It is also the responsibility of the scheduler to
// explicitly acknowledge the receipt of a status update. See
// 'Acknowledge' in the 'Call' section below for the semantics.
//
// A task status update may be used for guaranteed delivery of some
// task-related information, e.g., task's health update. Such
// information may be shadowed by subsequent task status updates, that
// do not preserve fields of the previously sent message.
type Event_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *TaskStatus `protobuf:"bytes,1,req,name=status" json:"status,omitempty"`
}

func (x *Event_Update) Reset() {
	*x = Event_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Update) ProtoMessage() {}

func (x *Event_Update) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Update.ProtoReflect.Descriptor instead.
func (*Event_Update) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Event_Update) GetStatus() *TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// EXPERIMENTAL.
//
// Received when there is an operation status update generated by the
// master, agent, or resource provider. These updates are only sent to
// the framework for operations which had the operation ID set by the
// framework. It is the responsibility of the scheduler to explicitly
// acknowledge the receipt of a status update.
// See 'AcknowledgeOperationStatus' in the 'Call' section below for
// the semantics.
type Event_UpdateOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *OperationStatus `protobuf:"bytes,1,req,name=status" json:"status,omitempty"`
}

func (x *Event_UpdateOperationStatus) Reset() {
	*x = Event_UpdateOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_UpdateOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_UpdateOperationStatus) ProtoMessage() {}

func (x *Event_UpdateOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_UpdateOperationStatus.ProtoReflect.Descriptor instead.
func (*Event_UpdateOperationStatus) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Event_UpdateOperationStatus) GetStatus() *OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Received when a custom message generated by the executor is
// forwarded by the master. Note that this message is not
// interpreted by Mesos and is only forwarded (without reliability
// guarantees) to the scheduler. It is up to the executor to retry
// if the message is dropped for any reason.
type Event_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId    *AgentID    `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ExecutorId *ExecutorID `protobuf:"bytes,2,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	Data       []byte      `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *Event_Message) Reset() {
	*x = Event_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Message) ProtoMessage() {}

func (x *Event_Message) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Message.ProtoReflect.Descriptor instead.
func (*Event_Message) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Event_Message) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Event_Message) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *Event_Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Received when an agent is removed from the cluster (e.g., failed
// health checks) or when an executor is terminated. Note that, this
// event coincides with receipt of terminal UPDATE events for any
// active tasks belonging to the agent or executor and receipt of
// 'Rescind' events for any outstanding offers belonging to the
// agent. Note that there is no guaranteed order between the
// 'Failure', 'Update' and 'Rescind' events when an agent or executor
// is removed.
// TODO(vinod): Consider splitting the lost agent and terminated
// executor into separate events and ensure it's reliably generated.
type Event_Failure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *AgentID `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	// If this was just a failure of an executor on an agent then
	// 'executor_id' will be set and possibly 'status' (if we were
	// able to determine the exit status).
	ExecutorId *ExecutorID `protobuf:"bytes,2,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	// On Posix, `status` corresponds to termination information in the
	// `stat_loc` area returned from a `waitpid` call. On Windows, `status`
	// is obtained via calling the `GetExitCodeProcess()` function. For
	// messages coming from Posix agents, schedulers need to apply
	// `WEXITSTATUS` family macros or equivalent transformations to obtain
	// exit codes.
	//
	// TODO(alexr): Consider unifying Windows and Posix behavior by returning
	// exit code here, see MESOS-7241.
	Status *int32 `protobuf:"varint,3,opt,name=status" json:"status,omitempty"`
}

func (x *Event_Failure) Reset() {
	*x = Event_Failure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Failure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Failure) ProtoMessage() {}

func (x *Event_Failure) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Failure.ProtoReflect.Descriptor instead.
func (*Event_Failure) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Event_Failure) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Event_Failure) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *Event_Failure) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

// Received when there is an unrecoverable error in the scheduler (e.g.,
// scheduler failed over, rate limiting, authorization errors etc.). The
// scheduler should abort on receiving this event.
type Event_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
}

func (x *Event_Error) Reset() {
	*x = Event_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event_Error) ProtoMessage() {}

func (x *Event_Error) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event_Error.ProtoReflect.Descriptor instead.
func (*Event_Error) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Event_Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// DEPRECATED.
type Response_ReconcileOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Marked as deprecated in scheduler.proto.
	OperationStatuses []*OperationStatus `protobuf:"bytes,1,rep,name=operation_statuses,json=operationStatuses" json:"operation_statuses,omitempty"`
}

func (x *Response_ReconcileOperations) Reset() {
	*x = Response_ReconcileOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response_ReconcileOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response_ReconcileOperations) ProtoMessage() {}

func (x *Response_ReconcileOperations) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response_ReconcileOperations.ProtoReflect.Descriptor instead.
func (*Response_ReconcileOperations) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{1, 0}
}

// Deprecated: Marked as deprecated in scheduler.proto.
func (x *Response_ReconcileOperations) GetOperationStatuses() []*OperationStatus {
	if x != nil {
		return x.OperationStatuses
	}
	return nil
}

type AttributeConstraint_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Selector:
	//
	//	*AttributeConstraint_Selector_PseudoattributeType_
	//	*AttributeConstraint_Selector_AttributeName
	Selector isAttributeConstraint_Selector_Selector `protobuf_oneof:"selector"`
}

func (x *AttributeConstraint_Selector) Reset() {
	*x = AttributeConstraint_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Selector) ProtoMessage() {}

func (x *AttributeConstraint_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Selector.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Selector) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 0}
}

func (m *AttributeConstraint_Selector) GetSelector() isAttributeConstraint_Selector_Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (x *AttributeConstraint_Selector) GetPseudoattributeType() AttributeConstraint_Selector_PseudoattributeType {
	if x, ok := x.GetSelector().(*AttributeConstraint_Selector_PseudoattributeType_); ok {
		return x.PseudoattributeType
	}
	return AttributeConstraint_Selector_UNKNOWN
}

func (x *AttributeConstraint_Selector) GetAttributeName() string {
	if x, ok := x.GetSelector().(*AttributeConstraint_Selector_AttributeName); ok {
		return x.AttributeName
	}
	return ""
}

type isAttributeConstraint_Selector_Selector interface {
	isAttributeConstraint_Selector_Selector()
}

type AttributeConstraint_Selector_PseudoattributeType_ struct {
	// The predicate will be applied to the specified pseudoattribute.
	PseudoattributeType AttributeConstraint_Selector_PseudoattributeType `protobuf:"varint,1,opt,name=pseudoattribute_type,json=pseudoattributeType,enum=mesos.v1.scheduler.AttributeConstraint_Selector_PseudoattributeType,oneof"`
}

type AttributeConstraint_Selector_AttributeName struct {
	// The predicate will be applied to the first attribute with the specified
	// name. Note that an agent can have multiple attributes with the same
	// name, and that the order of attributes is preserved by Mesos.
	//
	// TODO(asekretenko): If a need to handle the multiple-attribute
	// case differently arises, in simple cases it can be addressed by adding
	// a Selector-wide flag or one more oneof member here.
	AttributeName string `protobuf:"bytes,2,opt,name=attribute_name,json=attributeName,oneof"`
}

func (*AttributeConstraint_Selector_PseudoattributeType_) isAttributeConstraint_Selector_Selector() {}

func (*AttributeConstraint_Selector_AttributeName) isAttributeConstraint_Selector_Selector() {}

type AttributeConstraint_Predicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Predicate:
	//
	//	*AttributeConstraint_Predicate_Exists_
	//	*AttributeConstraint_Predicate_NotExists_
	//	*AttributeConstraint_Predicate_TextEquals_
	//	*AttributeConstraint_Predicate_TextNotEquals_
	//	*AttributeConstraint_Predicate_TextMatches_
	//	*AttributeConstraint_Predicate_TextNotMatches_
	Predicate isAttributeConstraint_Predicate_Predicate `protobuf_oneof:"predicate"`
}

func (x *AttributeConstraint_Predicate) Reset() {
	*x = AttributeConstraint_Predicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate) ProtoMessage() {}

func (x *AttributeConstraint_Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1}
}

func (m *AttributeConstraint_Predicate) GetPredicate() isAttributeConstraint_Predicate_Predicate {
	if m != nil {
		return m.Predicate
	}
	return nil
}

func (x *AttributeConstraint_Predicate) GetExists() *AttributeConstraint_Predicate_Exists {
	if x, ok := x.GetPredicate().(*AttributeConstraint_Predicate_Exists_); ok {
		return x.Exists
	}
	return nil
}

func (x *AttributeConstraint_Predicate) GetNotExists() *AttributeConstraint_Predicate_NotExists {
	if x, ok := x.GetPredicate().(*AttributeConstraint_Predicate_NotExists_); ok {
		return x.NotExists
	}
	return nil
}

func (x *AttributeConstraint_Predicate) GetTextEquals() *AttributeConstraint_Predicate_TextEquals {
	if x, ok := x.GetPredicate().(*AttributeConstraint_Predicate_TextEquals_); ok {
		return x.TextEquals
	}
	return nil
}

func (x *AttributeConstraint_Predicate) GetTextNotEquals() *AttributeConstraint_Predicate_TextNotEquals {
	if x, ok := x.GetPredicate().(*AttributeConstraint_Predicate_TextNotEquals_); ok {
		return x.TextNotEquals
	}
	return nil
}

func (x *AttributeConstraint_Predicate) GetTextMatches() *AttributeConstraint_Predicate_TextMatches {
	if x, ok := x.GetPredicate().(*AttributeConstraint_Predicate_TextMatches_); ok {
		return x.TextMatches
	}
	return nil
}

func (x *AttributeConstraint_Predicate) GetTextNotMatches() *AttributeConstraint_Predicate_TextNotMatches {
	if x, ok := x.GetPredicate().(*AttributeConstraint_Predicate_TextNotMatches_); ok {
		return x.TextNotMatches
	}
	return nil
}

type isAttributeConstraint_Predicate_Predicate interface {
	isAttributeConstraint_Predicate_Predicate()
}

type AttributeConstraint_Predicate_Exists_ struct {
	Exists *AttributeConstraint_Predicate_Exists `protobuf:"bytes,1,opt,name=exists,oneof"`
}

type AttributeConstraint_Predicate_NotExists_ struct {
	NotExists *AttributeConstraint_Predicate_NotExists `protobuf:"bytes,2,opt,name=not_exists,json=notExists,oneof"`
}

type AttributeConstraint_Predicate_TextEquals_ struct {
	TextEquals *AttributeConstraint_Predicate_TextEquals `protobuf:"bytes,3,opt,name=text_equals,json=textEquals,oneof"`
}

type AttributeConstraint_Predicate_TextNotEquals_ struct {
	TextNotEquals *AttributeConstraint_Predicate_TextNotEquals `protobuf:"bytes,4,opt,name=text_not_equals,json=textNotEquals,oneof"`
}

type AttributeConstraint_Predicate_TextMatches_ struct {
	TextMatches *AttributeConstraint_Predicate_TextMatches `protobuf:"bytes,5,opt,name=text_matches,json=textMatches,oneof"`
}

type AttributeConstraint_Predicate_TextNotMatches_ struct {
	TextNotMatches *AttributeConstraint_Predicate_TextNotMatches `protobuf:"bytes,6,opt,name=text_not_matches,json=textNotMatches,oneof"`
}

func (*AttributeConstraint_Predicate_Exists_) isAttributeConstraint_Predicate_Predicate() {}

func (*AttributeConstraint_Predicate_NotExists_) isAttributeConstraint_Predicate_Predicate() {}

func (*AttributeConstraint_Predicate_TextEquals_) isAttributeConstraint_Predicate_Predicate() {}

func (*AttributeConstraint_Predicate_TextNotEquals_) isAttributeConstraint_Predicate_Predicate() {}

func (*AttributeConstraint_Predicate_TextMatches_) isAttributeConstraint_Predicate_Predicate() {}

func (*AttributeConstraint_Predicate_TextNotMatches_) isAttributeConstraint_Predicate_Predicate() {}

// Yields `true` if the (pseudo)attribute exists.
type AttributeConstraint_Predicate_Exists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttributeConstraint_Predicate_Exists) Reset() {
	*x = AttributeConstraint_Predicate_Exists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate_Exists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate_Exists) ProtoMessage() {}

func (x *AttributeConstraint_Predicate_Exists) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate_Exists.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate_Exists) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1, 0}
}

// Yields `true` if the (pseudo)attribute does not exist.
type AttributeConstraint_Predicate_NotExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttributeConstraint_Predicate_NotExists) Reset() {
	*x = AttributeConstraint_Predicate_NotExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate_NotExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate_NotExists) ProtoMessage() {}

func (x *AttributeConstraint_Predicate_NotExists) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate_NotExists.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate_NotExists) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1, 1}
}

// Yields `true` if the (pseudo)attribute exists and is a string/TEXT
// equal to the specified `value`.
//
// Always yields `true` for existing non-TEXT attributes (and non-string
// pseudoattributes) for the reason explained above.
type AttributeConstraint_Predicate_TextEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *AttributeConstraint_Predicate_TextEquals) Reset() {
	*x = AttributeConstraint_Predicate_TextEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate_TextEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate_TextEquals) ProtoMessage() {}

func (x *AttributeConstraint_Predicate_TextEquals) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate_TextEquals.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate_TextEquals) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1, 2}
}

func (x *AttributeConstraint_Predicate_TextEquals) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Yields `true` if the (pseudo)attribute does not exist or is a string/TEXT
// NOT equal to the specified `value`.
//
// Always yields `true` for existing non-TEXT attributes (and non-string
// pseudoattributes) for the reason explained above.
type AttributeConstraint_Predicate_TextNotEquals struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *AttributeConstraint_Predicate_TextNotEquals) Reset() {
	*x = AttributeConstraint_Predicate_TextNotEquals{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate_TextNotEquals) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate_TextNotEquals) ProtoMessage() {}

func (x *AttributeConstraint_Predicate_TextNotEquals) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate_TextNotEquals.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate_TextNotEquals) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1, 3}
}

func (x *AttributeConstraint_Predicate_TextNotEquals) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Yields `true` if the (pseudo)attribute exists and is a TEXT/string
// matching the specified regex.
//
// Always yields `true` for existing non-TEXT attributes (and non-string
// pseudoattributes) for the reasons explained above.
type AttributeConstraint_Predicate_TextMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex *string `protobuf:"bytes,1,req,name=regex" json:"regex,omitempty"`
}

func (x *AttributeConstraint_Predicate_TextMatches) Reset() {
	*x = AttributeConstraint_Predicate_TextMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate_TextMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate_TextMatches) ProtoMessage() {}

func (x *AttributeConstraint_Predicate_TextMatches) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate_TextMatches.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate_TextMatches) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1, 4}
}

func (x *AttributeConstraint_Predicate_TextMatches) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

// Yields `true` if the (pseudo)attribute either does not exists or is
// not a TEXT/string matching the specified regex.
//
// Always yields `true` for existing non-TEXT attributes (and non-string
// pseudoattributes) for the reasons explained above.
type AttributeConstraint_Predicate_TextNotMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regex *string `protobuf:"bytes,1,req,name=regex" json:"regex,omitempty"`
}

func (x *AttributeConstraint_Predicate_TextNotMatches) Reset() {
	*x = AttributeConstraint_Predicate_TextNotMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttributeConstraint_Predicate_TextNotMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributeConstraint_Predicate_TextNotMatches) ProtoMessage() {}

func (x *AttributeConstraint_Predicate_TextNotMatches) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributeConstraint_Predicate_TextNotMatches.ProtoReflect.Descriptor instead.
func (*AttributeConstraint_Predicate_TextNotMatches) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{2, 1, 5}
}

func (x *AttributeConstraint_Predicate_TextNotMatches) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

type OfferConstraints_RoleConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*OfferConstraints_RoleConstraints_Group `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (x *OfferConstraints_RoleConstraints) Reset() {
	*x = OfferConstraints_RoleConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferConstraints_RoleConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferConstraints_RoleConstraints) ProtoMessage() {}

func (x *OfferConstraints_RoleConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferConstraints_RoleConstraints.ProtoReflect.Descriptor instead.
func (*OfferConstraints_RoleConstraints) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{3, 0}
}

func (x *OfferConstraints_RoleConstraints) GetGroups() []*OfferConstraints_RoleConstraints_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type OfferConstraints_RoleConstraints_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttributeConstraints []*AttributeConstraint `protobuf:"bytes,1,rep,name=attribute_constraints,json=attributeConstraints" json:"attribute_constraints,omitempty"`
}

func (x *OfferConstraints_RoleConstraints_Group) Reset() {
	*x = OfferConstraints_RoleConstraints_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferConstraints_RoleConstraints_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferConstraints_RoleConstraints_Group) ProtoMessage() {}

func (x *OfferConstraints_RoleConstraints_Group) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferConstraints_RoleConstraints_Group.ProtoReflect.Descriptor instead.
func (*OfferConstraints_RoleConstraints_Group) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *OfferConstraints_RoleConstraints_Group) GetAttributeConstraints() []*AttributeConstraint {
	if x != nil {
		return x.AttributeConstraints
	}
	return nil
}

// Subscribes the scheduler with the master to receive events. A
// scheduler must send other calls only after it has received the
// SUBCRIBED event.
type Call_Subscribe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See the comments below on 'framework_id' on the semantics for
	// 'framework_info.id'.
	FrameworkInfo *FrameworkInfo `protobuf:"bytes,1,req,name=framework_info,json=frameworkInfo" json:"framework_info,omitempty"`
	// List of suppressed roles for which the framework does not wish to be
	// offered resources. The framework can decide to suppress all or a subset
	// of roles the framework (re)registers as.
	SuppressedRoles  []string          `protobuf:"bytes,2,rep,name=suppressed_roles,json=suppressedRoles" json:"suppressed_roles,omitempty"`
	OfferConstraints *OfferConstraints `protobuf:"bytes,3,opt,name=offer_constraints,json=offerConstraints" json:"offer_constraints,omitempty"`
}

func (x *Call_Subscribe) Reset() {
	*x = Call_Subscribe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Subscribe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Subscribe) ProtoMessage() {}

func (x *Call_Subscribe) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Subscribe.ProtoReflect.Descriptor instead.
func (*Call_Subscribe) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Call_Subscribe) GetFrameworkInfo() *FrameworkInfo {
	if x != nil {
		return x.FrameworkInfo
	}
	return nil
}

func (x *Call_Subscribe) GetSuppressedRoles() []string {
	if x != nil {
		return x.SuppressedRoles
	}
	return nil
}

func (x *Call_Subscribe) GetOfferConstraints() *OfferConstraints {
	if x != nil {
		return x.OfferConstraints
	}
	return nil
}

// Accepts an offer, performing the specified operations
// in a sequential manner.
//
// E.g. Launch a task with a newly reserved persistent volume:
//
//	Accept {
//	  offer_ids: [ ... ]
//	  operations: [
//	    { type: RESERVE,
//	      reserve: { resources: [ disk(role):2 ] } }
//	    { type: CREATE,
//	      create: { volumes: [ disk(role):1+persistence ] } }
//	    { type: LAUNCH,
//	      launch: { task_infos ... disk(role):1;disk(role):1+persistence } }
//	  ]
//	}
//
// Note that any of the offer's resources not used in the 'Accept'
// call (e.g., to launch a task) are considered unused and might be
// reoffered to other frameworks. In other words, the same OfferID
// cannot be used in more than one 'Accept' call.
type Call_Accept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferIds   []*OfferID         `protobuf:"bytes,1,rep,name=offer_ids,json=offerIds" json:"offer_ids,omitempty"`
	Operations []*Offer_Operation `protobuf:"bytes,2,rep,name=operations" json:"operations,omitempty"`
	Filters    *Filters           `protobuf:"bytes,3,opt,name=filters" json:"filters,omitempty"`
}

func (x *Call_Accept) Reset() {
	*x = Call_Accept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Accept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Accept) ProtoMessage() {}

func (x *Call_Accept) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Accept.ProtoReflect.Descriptor instead.
func (*Call_Accept) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Call_Accept) GetOfferIds() []*OfferID {
	if x != nil {
		return x.OfferIds
	}
	return nil
}

func (x *Call_Accept) GetOperations() []*Offer_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *Call_Accept) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Declines an offer, signaling the master to potentially reoffer
// the resources to a different framework. Note that this is same
// as sending an Accept call with no operations. See comments on
// top of 'Accept' for semantics.
type Call_Decline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OfferIds []*OfferID `protobuf:"bytes,1,rep,name=offer_ids,json=offerIds" json:"offer_ids,omitempty"`
	Filters  *Filters   `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
}

func (x *Call_Decline) Reset() {
	*x = Call_Decline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Decline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Decline) ProtoMessage() {}

func (x *Call_Decline) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Decline.ProtoReflect.Descriptor instead.
func (*Call_Decline) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Call_Decline) GetOfferIds() []*OfferID {
	if x != nil {
		return x.OfferIds
	}
	return nil
}

func (x *Call_Decline) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Accepts an inverse offer. Inverse offers should only be accepted
// if the resources in the offer can be safely evacuated before the
// provided unavailability.
type Call_AcceptInverseOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InverseOfferIds []*OfferID `protobuf:"bytes,1,rep,name=inverse_offer_ids,json=inverseOfferIds" json:"inverse_offer_ids,omitempty"`
	Filters         *Filters   `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
}

func (x *Call_AcceptInverseOffers) Reset() {
	*x = Call_AcceptInverseOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_AcceptInverseOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_AcceptInverseOffers) ProtoMessage() {}

func (x *Call_AcceptInverseOffers) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_AcceptInverseOffers.ProtoReflect.Descriptor instead.
func (*Call_AcceptInverseOffers) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 3}
}

func (x *Call_AcceptInverseOffers) GetInverseOfferIds() []*OfferID {
	if x != nil {
		return x.InverseOfferIds
	}
	return nil
}

func (x *Call_AcceptInverseOffers) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Declines an inverse offer. Inverse offers should be declined if
// the resources in the offer might not be safely evacuated before
// the provided unavailability.
type Call_DeclineInverseOffers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InverseOfferIds []*OfferID `protobuf:"bytes,1,rep,name=inverse_offer_ids,json=inverseOfferIds" json:"inverse_offer_ids,omitempty"`
	Filters         *Filters   `protobuf:"bytes,2,opt,name=filters" json:"filters,omitempty"`
}

func (x *Call_DeclineInverseOffers) Reset() {
	*x = Call_DeclineInverseOffers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_DeclineInverseOffers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_DeclineInverseOffers) ProtoMessage() {}

func (x *Call_DeclineInverseOffers) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_DeclineInverseOffers.ProtoReflect.Descriptor instead.
func (*Call_DeclineInverseOffers) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Call_DeclineInverseOffers) GetInverseOfferIds() []*OfferID {
	if x != nil {
		return x.InverseOfferIds
	}
	return nil
}

func (x *Call_DeclineInverseOffers) GetFilters() *Filters {
	if x != nil {
		return x.Filters
	}
	return nil
}

// Revive offers for the specified roles. If `roles` is empty,
// the `REVIVE` call will revive offers for all of the roles
// the framework is currently subscribed to.
type Call_Revive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []string `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (x *Call_Revive) Reset() {
	*x = Call_Revive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Revive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Revive) ProtoMessage() {}

func (x *Call_Revive) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Revive.ProtoReflect.Descriptor instead.
func (*Call_Revive) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 5}
}

func (x *Call_Revive) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Kills a specific task. If the scheduler has a custom executor,
// the kill is forwarded to the executor and it is up to the
// executor to kill the task and send a TASK_KILLED (or TASK_FAILED)
// update. Note that Mesos releases the resources for a task once it
// receives a terminal update (See TaskState in v1/mesos.proto) for
// it. If the task is unknown to the master, a TASK_LOST update is
// generated.
//
// If a task within a task group is killed before the group is
// delivered to the executor, all tasks in the task group are
// killed. When a task group has been delivered to the executor,
// it is up to the executor to decide how to deal with the kill.
// Note The default Mesos executor will currently kill all the
// tasks in the task group if it gets a kill for any task.
type Call_Kill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  *TaskID  `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	AgentId *AgentID `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	// If set, overrides any previously specified kill policy for this task.
	// This includes 'TaskInfo.kill_policy' and 'Executor.kill.kill_policy'.
	// Can be used to forcefully kill a task which is already being killed.
	KillPolicy *KillPolicy `protobuf:"bytes,3,opt,name=kill_policy,json=killPolicy" json:"kill_policy,omitempty"`
}

func (x *Call_Kill) Reset() {
	*x = Call_Kill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Kill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Kill) ProtoMessage() {}

func (x *Call_Kill) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Kill.ProtoReflect.Descriptor instead.
func (*Call_Kill) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 6}
}

func (x *Call_Kill) GetTaskId() *TaskID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *Call_Kill) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Call_Kill) GetKillPolicy() *KillPolicy {
	if x != nil {
		return x.KillPolicy
	}
	return nil
}

// Shuts down a custom executor. When the executor gets a shutdown
// event, it is expected to kill all its tasks (and send TASK_KILLED
// updates) and terminate. If the executor doesn't terminate within
// a certain timeout (configurable via
// '--executor_shutdown_grace_period' agent flag), the agent will
// forcefully destroy the container (executor and its tasks) and
// transition its active tasks to TASK_LOST.
type Call_Shutdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutorId *ExecutorID `protobuf:"bytes,1,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	AgentId    *AgentID    `protobuf:"bytes,2,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (x *Call_Shutdown) Reset() {
	*x = Call_Shutdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Shutdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Shutdown) ProtoMessage() {}

func (x *Call_Shutdown) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Shutdown.ProtoReflect.Descriptor instead.
func (*Call_Shutdown) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 7}
}

func (x *Call_Shutdown) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *Call_Shutdown) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

// Acknowledges the receipt of status update. Schedulers are
// responsible for explicitly acknowledging the receipt of status
// updates that have 'Update.status().uuid()' field set. Such status
// updates are retried by the agent until they are acknowledged by
// the scheduler.
type Call_Acknowledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId *AgentID `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	TaskId  *TaskID  `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	Uuid    []byte   `protobuf:"bytes,3,req,name=uuid" json:"uuid,omitempty"`
}

func (x *Call_Acknowledge) Reset() {
	*x = Call_Acknowledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Acknowledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Acknowledge) ProtoMessage() {}

func (x *Call_Acknowledge) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Acknowledge.ProtoReflect.Descriptor instead.
func (*Call_Acknowledge) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 8}
}

func (x *Call_Acknowledge) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Call_Acknowledge) GetTaskId() *TaskID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *Call_Acknowledge) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// EXPERIMENTAL.
//
// Acknowledges the receipt of an operation status update. Schedulers
// are responsible for explicitly acknowledging the receipt of updates
// which have the 'UpdateOperationStatus.status().uuid()' field set.
// Such status updates are retried by the agent or resource provider
// until they are acknowledged by the scheduler.
type Call_AcknowledgeOperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the operation affects resources that belong to a SLRP, both
	// `agent_id` and `resource_provider_id` have to be set.
	//
	// If the operation affects resources that belong to a SERP, only
	// `resource_provider_id` has to be set.
	AgentId            *AgentID            `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ResourceProviderId *ResourceProviderID `protobuf:"bytes,2,opt,name=resource_provider_id,json=resourceProviderId" json:"resource_provider_id,omitempty"`
	Uuid               []byte              `protobuf:"bytes,3,req,name=uuid" json:"uuid,omitempty"`
	OperationId        *OperationID        `protobuf:"bytes,4,req,name=operation_id,json=operationId" json:"operation_id,omitempty"`
}

func (x *Call_AcknowledgeOperationStatus) Reset() {
	*x = Call_AcknowledgeOperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_AcknowledgeOperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_AcknowledgeOperationStatus) ProtoMessage() {}

func (x *Call_AcknowledgeOperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_AcknowledgeOperationStatus.ProtoReflect.Descriptor instead.
func (*Call_AcknowledgeOperationStatus) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 9}
}

func (x *Call_AcknowledgeOperationStatus) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Call_AcknowledgeOperationStatus) GetResourceProviderId() *ResourceProviderID {
	if x != nil {
		return x.ResourceProviderId
	}
	return nil
}

func (x *Call_AcknowledgeOperationStatus) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *Call_AcknowledgeOperationStatus) GetOperationId() *OperationID {
	if x != nil {
		return x.OperationId
	}
	return nil
}

// Allows the scheduler to query the status for non-terminal tasks.
// This causes the master to send back the latest task status for
// each task in 'tasks', if possible. Tasks that are no longer known
// will result in a TASK_LOST, TASK_UNKNOWN, or TASK_UNREACHABLE update.
// If 'tasks' is empty, then the master will send the latest status
// for each task currently known.
type Call_Reconcile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*Call_Reconcile_Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (x *Call_Reconcile) Reset() {
	*x = Call_Reconcile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Reconcile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Reconcile) ProtoMessage() {}

func (x *Call_Reconcile) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Reconcile.ProtoReflect.Descriptor instead.
func (*Call_Reconcile) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 10}
}

func (x *Call_Reconcile) GetTasks() []*Call_Reconcile_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// EXPERIMENTAL.
//
// Allows the scheduler to query the status of operations. This causes
// the master to send back the latest status for each operation in
// 'operations', if possible. If 'operations' is empty, then the
// master will send the latest status for each operation currently
// known.
type Call_ReconcileOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operations []*Call_ReconcileOperations_Operation `protobuf:"bytes,1,rep,name=operations" json:"operations,omitempty"`
}

func (x *Call_ReconcileOperations) Reset() {
	*x = Call_ReconcileOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_ReconcileOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_ReconcileOperations) ProtoMessage() {}

func (x *Call_ReconcileOperations) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_ReconcileOperations.ProtoReflect.Descriptor instead.
func (*Call_ReconcileOperations) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 11}
}

func (x *Call_ReconcileOperations) GetOperations() []*Call_ReconcileOperations_Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

// Sends arbitrary binary data to the executor. Note that Mesos
// neither interprets this data nor makes any guarantees about the
// delivery of this message to the executor.
type Call_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId    *AgentID    `protobuf:"bytes,1,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ExecutorId *ExecutorID `protobuf:"bytes,2,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	Data       []byte      `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
}

func (x *Call_Message) Reset() {
	*x = Call_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Message) ProtoMessage() {}

func (x *Call_Message) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Message.ProtoReflect.Descriptor instead.
func (*Call_Message) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 12}
}

func (x *Call_Message) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Call_Message) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *Call_Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Requests a specific set of resources from Mesos's allocator. If
// the allocator has support for this, corresponding offers will be
// sent asynchronously via the OFFERS event(s).
//
// NOTE: The built-in hierarchical allocator doesn't have support
// for this call and hence simply ignores it.
type Call_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*Request `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (x *Call_Request) Reset() {
	*x = Call_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Request) ProtoMessage() {}

func (x *Call_Request) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Request.ProtoReflect.Descriptor instead.
func (*Call_Request) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 13}
}

func (x *Call_Request) GetRequests() []*Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Suppress offers for the specified roles. If `roles` is empty,
// the `SUPPRESS` call will suppress offers for all of the roles
// the framework is currently subscribed to.
type Call_Suppress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles []string `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (x *Call_Suppress) Reset() {
	*x = Call_Suppress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Suppress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Suppress) ProtoMessage() {}

func (x *Call_Suppress) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Suppress.ProtoReflect.Descriptor instead.
func (*Call_Suppress) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 14}
}

func (x *Call_Suppress) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Updates the FrameworkInfo. All fields can be updated except for:
//
// * FrameworkInfo.checkpoint
// * FrameworkInfo.principal
// * FrameworkInfo.user
//
// The call returns after the update is either applied completely or
// not applied at all. No incomplete updates occur.
//
// The HTTP response codes specific to this call are:
//
//   - 200 OK: update operation was successfully completed.
//   - 400 Bad Request: the requested update is not valid.
//   - 403 Forbidden: framework is not authorized to use some entities
//     requested by the update (e.g. not authorized to use some of the
//     supplied roles).
//   - 409 Conflict: framework disappeared while this call was being processed
//     (example: the framework was removed by a concurrent TEARDOWN call).
type Call_UpdateFramework struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameworkInfo *FrameworkInfo `protobuf:"bytes,1,req,name=framework_info,json=frameworkInfo" json:"framework_info,omitempty"`
	// List of suppressed roles for which the framework does not wish to be
	// offered resources. The framework can decide to suppress all or a subset
	// of roles provided in the new `framework_info`.
	SuppressedRoles  []string          `protobuf:"bytes,2,rep,name=suppressed_roles,json=suppressedRoles" json:"suppressed_roles,omitempty"`
	OfferConstraints *OfferConstraints `protobuf:"bytes,3,opt,name=offer_constraints,json=offerConstraints" json:"offer_constraints,omitempty"`
}

func (x *Call_UpdateFramework) Reset() {
	*x = Call_UpdateFramework{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_UpdateFramework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_UpdateFramework) ProtoMessage() {}

func (x *Call_UpdateFramework) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_UpdateFramework.ProtoReflect.Descriptor instead.
func (*Call_UpdateFramework) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 15}
}

func (x *Call_UpdateFramework) GetFrameworkInfo() *FrameworkInfo {
	if x != nil {
		return x.FrameworkInfo
	}
	return nil
}

func (x *Call_UpdateFramework) GetSuppressedRoles() []string {
	if x != nil {
		return x.SuppressedRoles
	}
	return nil
}

func (x *Call_UpdateFramework) GetOfferConstraints() *OfferConstraints {
	if x != nil {
		return x.OfferConstraints
	}
	return nil
}

// TODO(vinod): Support arbitrary queries than just state of tasks.
type Call_Reconcile_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId  *TaskID  `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	AgentId *AgentID `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
}

func (x *Call_Reconcile_Task) Reset() {
	*x = Call_Reconcile_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_Reconcile_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_Reconcile_Task) ProtoMessage() {}

func (x *Call_Reconcile_Task) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_Reconcile_Task.ProtoReflect.Descriptor instead.
func (*Call_Reconcile_Task) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 10, 0}
}

func (x *Call_Reconcile_Task) GetTaskId() *TaskID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *Call_Reconcile_Task) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

type Call_ReconcileOperations_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationId *OperationID `protobuf:"bytes,1,req,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	// If `agent_id` is not set and the master doesn't know the operation,
	// then it will return `OPERATION_UNKNOWN`; if `agent_id` is set, it can
	// return more fine-grained states depending on the state of the
	// corresponding agent.
	AgentId            *AgentID            `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ResourceProviderId *ResourceProviderID `protobuf:"bytes,3,opt,name=resource_provider_id,json=resourceProviderId" json:"resource_provider_id,omitempty"`
}

func (x *Call_ReconcileOperations_Operation) Reset() {
	*x = Call_ReconcileOperations_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduler_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Call_ReconcileOperations_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Call_ReconcileOperations_Operation) ProtoMessage() {}

func (x *Call_ReconcileOperations_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_scheduler_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Call_ReconcileOperations_Operation.ProtoReflect.Descriptor instead.
func (*Call_ReconcileOperations_Operation) Descriptor() ([]byte, []int) {
	return file_scheduler_proto_rawDescGZIP(), []int{4, 11, 0}
}

func (x *Call_ReconcileOperations_Operation) GetOperationId() *OperationID {
	if x != nil {
		return x.OperationId
	}
	return nil
}

func (x *Call_ReconcileOperations_Operation) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Call_ReconcileOperations_Operation) GetResourceProviderId() *ResourceProviderID {
	if x != nil {
		return x.ResourceProviderId
	}
	return nil
}

var File_scheduler_proto protoreflect.FileDescriptor

var file_scheduler_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x1a, 0x0b, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcd, 0x0e, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x73, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x63, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x72, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x64, 0x12, 0x61, 0x0a,
	0x15, 0x72, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x64, 0x49,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x63, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x1a, 0xbb, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44,
	0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x1a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x31, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x1a, 0x4e, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x64,
	0x12, 0x2c, 0x0a, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x52,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x63, 0x69, 0x6e, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x49, 0x64, 0x1a, 0x36, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x4a, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x86, 0x01, 0x0a, 0x07,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0x21, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x53, 0x10, 0x09, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x53, 0x43, 0x49, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45,
	0x53, 0x43, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x4f, 0x46,
	0x46, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0b, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54,
	0x10, 0x08, 0x22, 0xc2, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x63, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x22, 0xd3, 0x09, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x4c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x82,
	0x02, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x79, 0x0a, 0x14, 0x70,
	0x73, 0x65, 0x75, 0x64, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x73, 0x65, 0x75,
	0x64, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x13, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x46, 0x0a, 0x13, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4f, 0x53, 0x54, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x0a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0x97, 0x06, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x52, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x12, 0x69, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12,
	0x62, 0x0a, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x1a, 0x08, 0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x0b, 0x0a, 0x09, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x22, 0x0a, 0x0a, 0x54, 0x65, 0x78, 0x74,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x25, 0x0a, 0x0d,
	0x54, 0x65, 0x78, 0x74, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x23, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x1a, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x78, 0x74,
	0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x42, 0x0b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xc1, 0x03,
	0x0a, 0x10, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xcc, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x1a, 0x65, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5c, 0x0a, 0x15, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x78, 0x0a, 0x14, 0x52, 0x6f, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd3, 0x1e, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x60,
	0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x63, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x52,
	0x14, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x31,
	0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x52, 0x04, 0x6b, 0x69, 0x6c,
	0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x46, 0x0a, 0x0b, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x75, 0x0a, 0x1c, 0x61, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x1a, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x40, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x12, 0x5f, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0xc9,
	0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x3e, 0x0a, 0x0e,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0xa0, 0x01, 0x0a, 0x06, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x66, 0x0a,
	0x07, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a,
	0x11, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x0f, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x12, 0x3d, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1e,
	0x0a, 0x06, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x1a, 0x96,
	0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x6f, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0a,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52,
	0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x7a, 0x0a, 0x0b, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x1a, 0xe8, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x12, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a,
	0xab, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x5f, 0x0a, 0x04,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0xb3, 0x02,
	0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc3, 0x01,
	0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x82, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x38, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x1a, 0x20, 0x0a, 0x08, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x1a, 0xcf, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3e, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xbe, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x45, 0x41, 0x52, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x53, 0x10, 0x0d, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x53, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56,
	0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x10, 0x08, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x0f,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x10, 0x09, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x0c, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x11, 0x22, 0x7c, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x53, 0x0a, 0x1d, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x06, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x56, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x2d, 0x55, 0x47, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2d, 0x6d, 0x33, 0x73, 0x2f,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_scheduler_proto_rawDescOnce sync.Once
	file_scheduler_proto_rawDescData = file_scheduler_proto_rawDesc
)

func file_scheduler_proto_rawDescGZIP() []byte {
	file_scheduler_proto_rawDescOnce.Do(func() {
		file_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduler_proto_rawDescData)
	})
	return file_scheduler_proto_rawDescData
}

var file_scheduler_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_scheduler_proto_goTypes = []interface{}{
	(Event_Type)(0),    // 0: mesos.v1.scheduler.Event.Type
	(Response_Type)(0), // 1: mesos.v1.scheduler.Response.Type
	(AttributeConstraint_Selector_PseudoattributeType)(0), // 2: mesos.v1.scheduler.AttributeConstraint.Selector.PseudoattributeType
	(Call_Type)(0),                                       // 3: mesos.v1.scheduler.Call.Type
	(*Event)(nil),                                        // 4: mesos.v1.scheduler.Event
	(*Response)(nil),                                     // 5: mesos.v1.scheduler.Response
	(*AttributeConstraint)(nil),                          // 6: mesos.v1.scheduler.AttributeConstraint
	(*OfferConstraints)(nil),                             // 7: mesos.v1.scheduler.OfferConstraints
	(*Call)(nil),                                         // 8: mesos.v1.scheduler.Call
	(*APIResult)(nil),                                    // 9: mesos.v1.scheduler.APIResult
	(*Event_Subscribed)(nil),                             // 10: mesos.v1.scheduler.Event.Subscribed
	(*Event_Offers)(nil),                                 // 11: mesos.v1.scheduler.Event.Offers
	(*Event_InverseOffers)(nil),                          // 12: mesos.v1.scheduler.Event.InverseOffers
	(*Event_Rescind)(nil),                                // 13: mesos.v1.scheduler.Event.Rescind
	(*Event_RescindInverseOffer)(nil),                    // 14: mesos.v1.scheduler.Event.RescindInverseOffer
	(*Event_Update)(nil),                                 // 15: mesos.v1.scheduler.Event.Update
	(*Event_UpdateOperationStatus)(nil),                  // 16: mesos.v1.scheduler.Event.UpdateOperationStatus
	(*Event_Message)(nil),                                // 17: mesos.v1.scheduler.Event.Message
	(*Event_Failure)(nil),                                // 18: mesos.v1.scheduler.Event.Failure
	(*Event_Error)(nil),                                  // 19: mesos.v1.scheduler.Event.Error
	(*Response_ReconcileOperations)(nil),                 // 20: mesos.v1.scheduler.Response.ReconcileOperations
	(*AttributeConstraint_Selector)(nil),                 // 21: mesos.v1.scheduler.AttributeConstraint.Selector
	(*AttributeConstraint_Predicate)(nil),                // 22: mesos.v1.scheduler.AttributeConstraint.Predicate
	(*AttributeConstraint_Predicate_Exists)(nil),         // 23: mesos.v1.scheduler.AttributeConstraint.Predicate.Exists
	(*AttributeConstraint_Predicate_NotExists)(nil),      // 24: mesos.v1.scheduler.AttributeConstraint.Predicate.NotExists
	(*AttributeConstraint_Predicate_TextEquals)(nil),     // 25: mesos.v1.scheduler.AttributeConstraint.Predicate.TextEquals
	(*AttributeConstraint_Predicate_TextNotEquals)(nil),  // 26: mesos.v1.scheduler.AttributeConstraint.Predicate.TextNotEquals
	(*AttributeConstraint_Predicate_TextMatches)(nil),    // 27: mesos.v1.scheduler.AttributeConstraint.Predicate.TextMatches
	(*AttributeConstraint_Predicate_TextNotMatches)(nil), // 28: mesos.v1.scheduler.AttributeConstraint.Predicate.TextNotMatches
	(*OfferConstraints_RoleConstraints)(nil),             // 29: mesos.v1.scheduler.OfferConstraints.RoleConstraints
	nil,                                                  // 30: mesos.v1.scheduler.OfferConstraints.RoleConstraintsEntry
	(*OfferConstraints_RoleConstraints_Group)(nil),       // 31: mesos.v1.scheduler.OfferConstraints.RoleConstraints.Group
	(*Call_Subscribe)(nil),                               // 32: mesos.v1.scheduler.Call.Subscribe
	(*Call_Accept)(nil),                                  // 33: mesos.v1.scheduler.Call.Accept
	(*Call_Decline)(nil),                                 // 34: mesos.v1.scheduler.Call.Decline
	(*Call_AcceptInverseOffers)(nil),                     // 35: mesos.v1.scheduler.Call.AcceptInverseOffers
	(*Call_DeclineInverseOffers)(nil),                    // 36: mesos.v1.scheduler.Call.DeclineInverseOffers
	(*Call_Revive)(nil),                                  // 37: mesos.v1.scheduler.Call.Revive
	(*Call_Kill)(nil),                                    // 38: mesos.v1.scheduler.Call.Kill
	(*Call_Shutdown)(nil),                                // 39: mesos.v1.scheduler.Call.Shutdown
	(*Call_Acknowledge)(nil),                             // 40: mesos.v1.scheduler.Call.Acknowledge
	(*Call_AcknowledgeOperationStatus)(nil),              // 41: mesos.v1.scheduler.Call.AcknowledgeOperationStatus
	(*Call_Reconcile)(nil),                               // 42: mesos.v1.scheduler.Call.Reconcile
	(*Call_ReconcileOperations)(nil),                     // 43: mesos.v1.scheduler.Call.ReconcileOperations
	(*Call_Message)(nil),                                 // 44: mesos.v1.scheduler.Call.Message
	(*Call_Request)(nil),                                 // 45: mesos.v1.scheduler.Call.Request
	(*Call_Suppress)(nil),                                // 46: mesos.v1.scheduler.Call.Suppress
	(*Call_UpdateFramework)(nil),                         // 47: mesos.v1.scheduler.Call.UpdateFramework
	(*Call_Reconcile_Task)(nil),                          // 48: mesos.v1.scheduler.Call.Reconcile.Task
	(*Call_ReconcileOperations_Operation)(nil),           // 49: mesos.v1.scheduler.Call.ReconcileOperations.Operation
	(*FrameworkID)(nil),                                  // 50: mesos.v1.FrameworkID
	(*MasterInfo)(nil),                                   // 51: mesos.v1.MasterInfo
	(*Offer)(nil),                                        // 52: mesos.v1.Offer
	(*InverseOffer)(nil),                                 // 53: mesos.v1.InverseOffer
	(*OfferID)(nil),                                      // 54: mesos.v1.OfferID
	(*TaskStatus)(nil),                                   // 55: mesos.v1.TaskStatus
	(*OperationStatus)(nil),                              // 56: mesos.v1.OperationStatus
	(*AgentID)(nil),                                      // 57: mesos.v1.AgentID
	(*ExecutorID)(nil),                                   // 58: mesos.v1.ExecutorID
	(*FrameworkInfo)(nil),                                // 59: mesos.v1.FrameworkInfo
	(*Offer_Operation)(nil),                              // 60: mesos.v1.Offer.Operation
	(*Filters)(nil),                                      // 61: mesos.v1.Filters
	(*TaskID)(nil),                                       // 62: mesos.v1.TaskID
	(*KillPolicy)(nil),                                   // 63: mesos.v1.KillPolicy
	(*ResourceProviderID)(nil),                           // 64: mesos.v1.ResourceProviderID
	(*OperationID)(nil),                                  // 65: mesos.v1.OperationID
	(*Request)(nil),                                      // 66: mesos.v1.Request
}
var file_scheduler_proto_depIdxs = []int32{
	0,  // 0: mesos.v1.scheduler.Event.type:type_name -> mesos.v1.scheduler.Event.Type
	10, // 1: mesos.v1.scheduler.Event.subscribed:type_name -> mesos.v1.scheduler.Event.Subscribed
	11, // 2: mesos.v1.scheduler.Event.offers:type_name -> mesos.v1.scheduler.Event.Offers
	12, // 3: mesos.v1.scheduler.Event.inverse_offers:type_name -> mesos.v1.scheduler.Event.InverseOffers
	13, // 4: mesos.v1.scheduler.Event.rescind:type_name -> mesos.v1.scheduler.Event.Rescind
	14, // 5: mesos.v1.scheduler.Event.rescind_inverse_offer:type_name -> mesos.v1.scheduler.Event.RescindInverseOffer
	15, // 6: mesos.v1.scheduler.Event.update:type_name -> mesos.v1.scheduler.Event.Update
	16, // 7: mesos.v1.scheduler.Event.update_operation_status:type_name -> mesos.v1.scheduler.Event.UpdateOperationStatus
	17, // 8: mesos.v1.scheduler.Event.message:type_name -> mesos.v1.scheduler.Event.Message
	18, // 9: mesos.v1.scheduler.Event.failure:type_name -> mesos.v1.scheduler.Event.Failure
	19, // 10: mesos.v1.scheduler.Event.error:type_name -> mesos.v1.scheduler.Event.Error
	1,  // 11: mesos.v1.scheduler.Response.type:type_name -> mesos.v1.scheduler.Response.Type
	20, // 12: mesos.v1.scheduler.Response.reconcile_operations:type_name -> mesos.v1.scheduler.Response.ReconcileOperations
	21, // 13: mesos.v1.scheduler.AttributeConstraint.selector:type_name -> mesos.v1.scheduler.AttributeConstraint.Selector
	22, // 14: mesos.v1.scheduler.AttributeConstraint.predicate:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate
	30, // 15: mesos.v1.scheduler.OfferConstraints.role_constraints:type_name -> mesos.v1.scheduler.OfferConstraints.RoleConstraintsEntry
	50, // 16: mesos.v1.scheduler.Call.framework_id:type_name -> mesos.v1.FrameworkID
	3,  // 17: mesos.v1.scheduler.Call.type:type_name -> mesos.v1.scheduler.Call.Type
	32, // 18: mesos.v1.scheduler.Call.subscribe:type_name -> mesos.v1.scheduler.Call.Subscribe
	33, // 19: mesos.v1.scheduler.Call.accept:type_name -> mesos.v1.scheduler.Call.Accept
	34, // 20: mesos.v1.scheduler.Call.decline:type_name -> mesos.v1.scheduler.Call.Decline
	35, // 21: mesos.v1.scheduler.Call.accept_inverse_offers:type_name -> mesos.v1.scheduler.Call.AcceptInverseOffers
	36, // 22: mesos.v1.scheduler.Call.decline_inverse_offers:type_name -> mesos.v1.scheduler.Call.DeclineInverseOffers
	37, // 23: mesos.v1.scheduler.Call.revive:type_name -> mesos.v1.scheduler.Call.Revive
	38, // 24: mesos.v1.scheduler.Call.kill:type_name -> mesos.v1.scheduler.Call.Kill
	39, // 25: mesos.v1.scheduler.Call.shutdown:type_name -> mesos.v1.scheduler.Call.Shutdown
	40, // 26: mesos.v1.scheduler.Call.acknowledge:type_name -> mesos.v1.scheduler.Call.Acknowledge
	41, // 27: mesos.v1.scheduler.Call.acknowledge_operation_status:type_name -> mesos.v1.scheduler.Call.AcknowledgeOperationStatus
	42, // 28: mesos.v1.scheduler.Call.reconcile:type_name -> mesos.v1.scheduler.Call.Reconcile
	43, // 29: mesos.v1.scheduler.Call.reconcile_operations:type_name -> mesos.v1.scheduler.Call.ReconcileOperations
	44, // 30: mesos.v1.scheduler.Call.message:type_name -> mesos.v1.scheduler.Call.Message
	45, // 31: mesos.v1.scheduler.Call.request:type_name -> mesos.v1.scheduler.Call.Request
	46, // 32: mesos.v1.scheduler.Call.suppress:type_name -> mesos.v1.scheduler.Call.Suppress
	47, // 33: mesos.v1.scheduler.Call.update_framework:type_name -> mesos.v1.scheduler.Call.UpdateFramework
	5,  // 34: mesos.v1.scheduler.APIResult.response:type_name -> mesos.v1.scheduler.Response
	50, // 35: mesos.v1.scheduler.Event.Subscribed.framework_id:type_name -> mesos.v1.FrameworkID
	51, // 36: mesos.v1.scheduler.Event.Subscribed.master_info:type_name -> mesos.v1.MasterInfo
	52, // 37: mesos.v1.scheduler.Event.Offers.offers:type_name -> mesos.v1.Offer
	53, // 38: mesos.v1.scheduler.Event.InverseOffers.inverse_offers:type_name -> mesos.v1.InverseOffer
	54, // 39: mesos.v1.scheduler.Event.Rescind.offer_id:type_name -> mesos.v1.OfferID
	54, // 40: mesos.v1.scheduler.Event.RescindInverseOffer.inverse_offer_id:type_name -> mesos.v1.OfferID
	55, // 41: mesos.v1.scheduler.Event.Update.status:type_name -> mesos.v1.TaskStatus
	56, // 42: mesos.v1.scheduler.Event.UpdateOperationStatus.status:type_name -> mesos.v1.OperationStatus
	57, // 43: mesos.v1.scheduler.Event.Message.agent_id:type_name -> mesos.v1.AgentID
	58, // 44: mesos.v1.scheduler.Event.Message.executor_id:type_name -> mesos.v1.ExecutorID
	57, // 45: mesos.v1.scheduler.Event.Failure.agent_id:type_name -> mesos.v1.AgentID
	58, // 46: mesos.v1.scheduler.Event.Failure.executor_id:type_name -> mesos.v1.ExecutorID
	56, // 47: mesos.v1.scheduler.Response.ReconcileOperations.operation_statuses:type_name -> mesos.v1.OperationStatus
	2,  // 48: mesos.v1.scheduler.AttributeConstraint.Selector.pseudoattribute_type:type_name -> mesos.v1.scheduler.AttributeConstraint.Selector.PseudoattributeType
	23, // 49: mesos.v1.scheduler.AttributeConstraint.Predicate.exists:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate.Exists
	24, // 50: mesos.v1.scheduler.AttributeConstraint.Predicate.not_exists:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate.NotExists
	25, // 51: mesos.v1.scheduler.AttributeConstraint.Predicate.text_equals:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate.TextEquals
	26, // 52: mesos.v1.scheduler.AttributeConstraint.Predicate.text_not_equals:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate.TextNotEquals
	27, // 53: mesos.v1.scheduler.AttributeConstraint.Predicate.text_matches:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate.TextMatches
	28, // 54: mesos.v1.scheduler.AttributeConstraint.Predicate.text_not_matches:type_name -> mesos.v1.scheduler.AttributeConstraint.Predicate.TextNotMatches
	31, // 55: mesos.v1.scheduler.OfferConstraints.RoleConstraints.groups:type_name -> mesos.v1.scheduler.OfferConstraints.RoleConstraints.Group
	29, // 56: mesos.v1.scheduler.OfferConstraints.RoleConstraintsEntry.value:type_name -> mesos.v1.scheduler.OfferConstraints.RoleConstraints
	6,  // 57: mesos.v1.scheduler.OfferConstraints.RoleConstraints.Group.attribute_constraints:type_name -> mesos.v1.scheduler.AttributeConstraint
	59, // 58: mesos.v1.scheduler.Call.Subscribe.framework_info:type_name -> mesos.v1.FrameworkInfo
	7,  // 59: mesos.v1.scheduler.Call.Subscribe.offer_constraints:type_name -> mesos.v1.scheduler.OfferConstraints
	54, // 60: mesos.v1.scheduler.Call.Accept.offer_ids:type_name -> mesos.v1.OfferID
	60, // 61: mesos.v1.scheduler.Call.Accept.operations:type_name -> mesos.v1.Offer.Operation
	61, // 62: mesos.v1.scheduler.Call.Accept.filters:type_name -> mesos.v1.Filters
	54, // 63: mesos.v1.scheduler.Call.Decline.offer_ids:type_name -> mesos.v1.OfferID
	61, // 64: mesos.v1.scheduler.Call.Decline.filters:type_name -> mesos.v1.Filters
	54, // 65: mesos.v1.scheduler.Call.AcceptInverseOffers.inverse_offer_ids:type_name -> mesos.v1.OfferID
	61, // 66: mesos.v1.scheduler.Call.AcceptInverseOffers.filters:type_name -> mesos.v1.Filters
	54, // 67: mesos.v1.scheduler.Call.DeclineInverseOffers.inverse_offer_ids:type_name -> mesos.v1.OfferID
	61, // 68: mesos.v1.scheduler.Call.DeclineInverseOffers.filters:type_name -> mesos.v1.Filters
	62, // 69: mesos.v1.scheduler.Call.Kill.task_id:type_name -> mesos.v1.TaskID
	57, // 70: mesos.v1.scheduler.Call.Kill.agent_id:type_name -> mesos.v1.AgentID
	63, // 71: mesos.v1.scheduler.Call.Kill.kill_policy:type_name -> mesos.v1.KillPolicy
	58, // 72: mesos.v1.scheduler.Call.Shutdown.executor_id:type_name -> mesos.v1.ExecutorID
	57, // 73: mesos.v1.scheduler.Call.Shutdown.agent_id:type_name -> mesos.v1.AgentID
	57, // 74: mesos.v1.scheduler.Call.Acknowledge.agent_id:type_name -> mesos.v1.AgentID
	62, // 75: mesos.v1.scheduler.Call.Acknowledge.task_id:type_name -> mesos.v1.TaskID
	57, // 76: mesos.v1.scheduler.Call.AcknowledgeOperationStatus.agent_id:type_name -> mesos.v1.AgentID
	64, // 77: mesos.v1.scheduler.Call.AcknowledgeOperationStatus.resource_provider_id:type_name -> mesos.v1.ResourceProviderID
	65, // 78: mesos.v1.scheduler.Call.AcknowledgeOperationStatus.operation_id:type_name -> mesos.v1.OperationID
	48, // 79: mesos.v1.scheduler.Call.Reconcile.tasks:type_name -> mesos.v1.scheduler.Call.Reconcile.Task
	49, // 80: mesos.v1.scheduler.Call.ReconcileOperations.operations:type_name -> mesos.v1.scheduler.Call.ReconcileOperations.Operation
	57, // 81: mesos.v1.scheduler.Call.Message.agent_id:type_name -> mesos.v1.AgentID
	58, // 82: mesos.v1.scheduler.Call.Message.executor_id:type_name -> mesos.v1.ExecutorID
	66, // 83: mesos.v1.scheduler.Call.Request.requests:type_name -> mesos.v1.Request
	59, // 84: mesos.v1.scheduler.Call.UpdateFramework.framework_info:type_name -> mesos.v1.FrameworkInfo
	7,  // 85: mesos.v1.scheduler.Call.UpdateFramework.offer_constraints:type_name -> mesos.v1.scheduler.OfferConstraints
	62, // 86: mesos.v1.scheduler.Call.Reconcile.Task.task_id:type_name -> mesos.v1.TaskID
	57, // 87: mesos.v1.scheduler.Call.Reconcile.Task.agent_id:type_name -> mesos.v1.AgentID
	65, // 88: mesos.v1.scheduler.Call.ReconcileOperations.Operation.operation_id:type_name -> mesos.v1.OperationID
	57, // 89: mesos.v1.scheduler.Call.ReconcileOperations.Operation.agent_id:type_name -> mesos.v1.AgentID
	64, // 90: mesos.v1.scheduler.Call.ReconcileOperations.Operation.resource_provider_id:type_name -> mesos.v1.ResourceProviderID
	91, // [91:91] is the sub-list for method output_type
	91, // [91:91] is the sub-list for method input_type
	91, // [91:91] is the sub-list for extension type_name
	91, // [91:91] is the sub-list for extension extendee
	0,  // [0:91] is the sub-list for field type_name
}

func init() { file_scheduler_proto_init() }
func file_scheduler_proto_init() {
	if File_scheduler_proto != nil {
		return
	}
	file_mesos_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Subscribed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Offers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_InverseOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Rescind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_RescindInverseOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_UpdateOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Failure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response_ReconcileOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate_Exists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate_NotExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate_TextEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate_TextNotEquals); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate_TextMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttributeConstraint_Predicate_TextNotMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferConstraints_RoleConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferConstraints_RoleConstraints_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Subscribe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Accept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Decline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_AcceptInverseOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_DeclineInverseOffers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Revive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Kill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Shutdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Acknowledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_AcknowledgeOperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Reconcile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_ReconcileOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Suppress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_UpdateFramework); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_Reconcile_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduler_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Call_ReconcileOperations_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scheduler_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*AttributeConstraint_Selector_PseudoattributeType_)(nil),
		(*AttributeConstraint_Selector_AttributeName)(nil),
	}
	file_scheduler_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*AttributeConstraint_Predicate_Exists_)(nil),
		(*AttributeConstraint_Predicate_NotExists_)(nil),
		(*AttributeConstraint_Predicate_TextEquals_)(nil),
		(*AttributeConstraint_Predicate_TextNotEquals_)(nil),
		(*AttributeConstraint_Predicate_TextMatches_)(nil),
		(*AttributeConstraint_Predicate_TextNotMatches_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduler_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scheduler_proto_goTypes,
		DependencyIndexes: file_scheduler_proto_depIdxs,
		EnumInfos:         file_scheduler_proto_enumTypes,
		MessageInfos:      file_scheduler_proto_msgTypes,
	}.Build()
	File_scheduler_proto = out.File
	file_scheduler_proto_rawDesc = nil
	file_scheduler_proto_goTypes = nil
	file_scheduler_proto_depIdxs = nil
}
