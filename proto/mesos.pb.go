// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.3
// source: mesos.proto

package mesosproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Status is used to indicate the state of the scheduler and executor
// driver after function calls.
type Status int32

const (
	Status_DRIVER_NOT_STARTED Status = 1
	Status_DRIVER_RUNNING     Status = 2
	Status_DRIVER_ABORTED     Status = 3
	Status_DRIVER_STOPPED     Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		1: "DRIVER_NOT_STARTED",
		2: "DRIVER_RUNNING",
		3: "DRIVER_ABORTED",
		4: "DRIVER_STOPPED",
	}
	Status_value = map[string]int32{
		"DRIVER_NOT_STARTED": 1,
		"DRIVER_RUNNING":     2,
		"DRIVER_ABORTED":     3,
		"DRIVER_STOPPED":     4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Status(num)
	return nil
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{0}
}

// *
// Describes possible task states. IMPORTANT: Mesos assumes tasks that
// enter terminal states (see below) imply the task is no longer
// running and thus clean up any thing associated with the task
// (ultimately offering any resources being consumed by that task to
// another task).
type TaskState int32

const (
	TaskState_TASK_STAGING  TaskState = 6 // Initial state. Framework status updates should not use.
	TaskState_TASK_STARTING TaskState = 0 // The task is being launched by the executor.
	TaskState_TASK_RUNNING  TaskState = 1
	// NOTE: This should only be sent when the framework has
	// the TASK_KILLING_STATE capability.
	TaskState_TASK_KILLING TaskState = 8 // The task is being killed by the executor.
	// The task finished successfully on its own without external interference.
	TaskState_TASK_FINISHED TaskState = 2 // TERMINAL.
	TaskState_TASK_FAILED   TaskState = 3 // TERMINAL: The task failed to finish successfully.
	TaskState_TASK_KILLED   TaskState = 4 // TERMINAL: The task was killed by the executor.
	TaskState_TASK_ERROR    TaskState = 7 // TERMINAL: The task description contains an error.
	// In Mesos 1.3, this will only be sent when the framework does NOT
	// opt-in to the PARTITION_AWARE capability.
	//
	// NOTE: This state is not always terminal. For example, tasks might
	// transition from TASK_LOST to TASK_RUNNING or other states when a
	// partitioned agent reregisters.
	TaskState_TASK_LOST TaskState = 5 // The task failed but can be rescheduled.
	// The task failed to launch because of a transient error. The
	// task's executor never started running. Unlike TASK_ERROR, the
	// task description is valid -- attempting to launch the task again
	// may be successful.
	TaskState_TASK_DROPPED TaskState = 9 // TERMINAL.
	// The task was running on an agent that has lost contact with the
	// master, typically due to a network failure or partition. The task
	// may or may not still be running.
	TaskState_TASK_UNREACHABLE TaskState = 10
	// The task is no longer running. This can occur if the agent has
	// been terminated along with all of its tasks (e.g., the host that
	// was running the agent was rebooted). It might also occur if the
	// task was terminated due to an agent or containerizer error, or if
	// the task was preempted by the QoS controller in an
	// oversubscription scenario.
	TaskState_TASK_GONE TaskState = 11 // TERMINAL.
	// The task was running on an agent that the master cannot contact;
	// the operator has asserted that the agent has been shutdown, but
	// this has not been directly confirmed by the master. If the
	// operator is correct, the task is not running and this is a
	// terminal state; if the operator is mistaken, the task may still
	// be running and might return to RUNNING in the future.
	TaskState_TASK_GONE_BY_OPERATOR TaskState = 12
	// The master has no knowledge of the task. This is typically
	// because either (a) the master never had knowledge of the task, or
	// (b) the master forgot about the task because it garbage collected
	// its metadata about the task. The task may or may not still be
	// running.
	TaskState_TASK_UNKNOWN TaskState = 13
)

// Enum value maps for TaskState.
var (
	TaskState_name = map[int32]string{
		6:  "TASK_STAGING",
		0:  "TASK_STARTING",
		1:  "TASK_RUNNING",
		8:  "TASK_KILLING",
		2:  "TASK_FINISHED",
		3:  "TASK_FAILED",
		4:  "TASK_KILLED",
		7:  "TASK_ERROR",
		5:  "TASK_LOST",
		9:  "TASK_DROPPED",
		10: "TASK_UNREACHABLE",
		11: "TASK_GONE",
		12: "TASK_GONE_BY_OPERATOR",
		13: "TASK_UNKNOWN",
	}
	TaskState_value = map[string]int32{
		"TASK_STAGING":          6,
		"TASK_STARTING":         0,
		"TASK_RUNNING":          1,
		"TASK_KILLING":          8,
		"TASK_FINISHED":         2,
		"TASK_FAILED":           3,
		"TASK_KILLED":           4,
		"TASK_ERROR":            7,
		"TASK_LOST":             5,
		"TASK_DROPPED":          9,
		"TASK_UNREACHABLE":      10,
		"TASK_GONE":             11,
		"TASK_GONE_BY_OPERATOR": 12,
		"TASK_UNKNOWN":          13,
	}
)

func (x TaskState) Enum() *TaskState {
	p := new(TaskState)
	*p = x
	return p
}

func (x TaskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[1].Descriptor()
}

func (TaskState) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[1]
}

func (x TaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskState(num)
	return nil
}

// Deprecated: Use TaskState.Descriptor instead.
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{1}
}

// *
// Describes possible operation states.
type OperationState int32

const (
	// Default value if the enum is not set. See MESOS-4997.
	OperationState_OPERATION_UNSUPPORTED OperationState = 0
	// Initial state.
	OperationState_OPERATION_PENDING OperationState = 1
	// TERMINAL: The operation was successfully applied.
	OperationState_OPERATION_FINISHED OperationState = 2
	// TERMINAL: The operation failed to apply.
	OperationState_OPERATION_FAILED OperationState = 3
	// TERMINAL: The operation description contains an error.
	OperationState_OPERATION_ERROR OperationState = 4
	// TERMINAL: The operation was dropped due to a transient error.
	OperationState_OPERATION_DROPPED OperationState = 5
	// The operation affects an agent that has lost contact with the master,
	// typically due to a network failure or partition. The operation may or may
	// not still be pending.
	OperationState_OPERATION_UNREACHABLE OperationState = 6
	// The operation affected an agent that the master cannot contact;
	// the operator has asserted that the agent has been shutdown, but this has
	// not been directly confirmed by the master.
	//
	// If the operator is correct, the operation is not pending and this is a
	// terminal state; if the operator is mistaken, the operation may still be
	// pending and might return to a different state in the future.
	OperationState_OPERATION_GONE_BY_OPERATOR OperationState = 7
	// The operation affects an agent that the master recovered from its
	// state, but that agent has not yet re-registered.
	//
	// The operation can transition to `OPERATION_UNREACHABLE` if the
	// corresponding agent is marked as unreachable, and will transition to
	// another status if the agent re-registers.
	OperationState_OPERATION_RECOVERING OperationState = 8
	// The master has no knowledge of the operation. This is typically
	// because either (a) the master never had knowledge of the operation, or
	// (b) the master forgot about the operation because it garbage collected
	// its metadata about the operation. The operation may or may not still be
	// pending.
	OperationState_OPERATION_UNKNOWN OperationState = 9
)

// Enum value maps for OperationState.
var (
	OperationState_name = map[int32]string{
		0: "OPERATION_UNSUPPORTED",
		1: "OPERATION_PENDING",
		2: "OPERATION_FINISHED",
		3: "OPERATION_FAILED",
		4: "OPERATION_ERROR",
		5: "OPERATION_DROPPED",
		6: "OPERATION_UNREACHABLE",
		7: "OPERATION_GONE_BY_OPERATOR",
		8: "OPERATION_RECOVERING",
		9: "OPERATION_UNKNOWN",
	}
	OperationState_value = map[string]int32{
		"OPERATION_UNSUPPORTED":      0,
		"OPERATION_PENDING":          1,
		"OPERATION_FINISHED":         2,
		"OPERATION_FAILED":           3,
		"OPERATION_ERROR":            4,
		"OPERATION_DROPPED":          5,
		"OPERATION_UNREACHABLE":      6,
		"OPERATION_GONE_BY_OPERATOR": 7,
		"OPERATION_RECOVERING":       8,
		"OPERATION_UNKNOWN":          9,
	}
)

func (x OperationState) Enum() *OperationState {
	p := new(OperationState)
	*p = x
	return p
}

func (x OperationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationState) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[2].Descriptor()
}

func (OperationState) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[2]
}

func (x OperationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OperationState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OperationState(num)
	return nil
}

// Deprecated: Use OperationState.Descriptor instead.
func (OperationState) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{2}
}

type DrainState int32

const (
	DrainState_UNKNOWN DrainState = 0
	// The agent is currently draining.
	DrainState_DRAINING DrainState = 1
	// The agent has been drained: all tasks have terminated, all terminal
	// task status updates have been acknowledged by the frameworks, and all
	// operations have finished and had their terminal updates acknowledged.
	DrainState_DRAINED DrainState = 2
)

// Enum value maps for DrainState.
var (
	DrainState_name = map[int32]string{
		0: "UNKNOWN",
		1: "DRAINING",
		2: "DRAINED",
	}
	DrainState_value = map[string]int32{
		"UNKNOWN":  0,
		"DRAINING": 1,
		"DRAINED":  2,
	}
)

func (x DrainState) Enum() *DrainState {
	p := new(DrainState)
	*p = x
	return p
}

func (x DrainState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DrainState) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[3].Descriptor()
}

func (DrainState) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[3]
}

func (x DrainState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DrainState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DrainState(num)
	return nil
}

// Deprecated: Use DrainState.Descriptor instead.
func (DrainState) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{3}
}

// Describes the several states that a machine can be in.  A `Mode`
// applies to a machine and to all associated agents on the machine.
type MachineInfo_Mode int32

const (
	// In this mode, a machine is behaving normally;
	// offering resources, executing tasks, etc.
	MachineInfo_UP MachineInfo_Mode = 1
	// In this mode, all agents on the machine are expected to cooperate with
	// frameworks to drain resources.  In general, draining is done ahead of
	// a pending `unavailability`.  The resources should be drained so as to
	// maximize utilization prior to the maintenance but without knowingly
	// violating the frameworks' requirements.
	MachineInfo_DRAINING MachineInfo_Mode = 2
	// In this mode, a machine is not running any tasks and will not offer
	// any of its resources.  Agents on the machine will not be allowed to
	// register with the master.
	MachineInfo_DOWN MachineInfo_Mode = 3
)

// Enum value maps for MachineInfo_Mode.
var (
	MachineInfo_Mode_name = map[int32]string{
		1: "UP",
		2: "DRAINING",
		3: "DOWN",
	}
	MachineInfo_Mode_value = map[string]int32{
		"UP":       1,
		"DRAINING": 2,
		"DOWN":     3,
	}
)

func (x MachineInfo_Mode) Enum() *MachineInfo_Mode {
	p := new(MachineInfo_Mode)
	*p = x
	return p
}

func (x MachineInfo_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MachineInfo_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[4].Descriptor()
}

func (MachineInfo_Mode) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[4]
}

func (x MachineInfo_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MachineInfo_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MachineInfo_Mode(num)
	return nil
}

// Deprecated: Use MachineInfo_Mode.Descriptor instead.
func (MachineInfo_Mode) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{14, 0}
}

type FrameworkInfo_Capability_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	FrameworkInfo_Capability_UNKNOWN FrameworkInfo_Capability_Type = 0
	// Receive offers with revocable resources. See 'Resource'
	// message for details.
	FrameworkInfo_Capability_REVOCABLE_RESOURCES FrameworkInfo_Capability_Type = 1
	// Receive the TASK_KILLING TaskState when a task is being
	// killed by an executor. The executor will examine this
	// capability to determine whether it can send TASK_KILLING.
	FrameworkInfo_Capability_TASK_KILLING_STATE FrameworkInfo_Capability_Type = 2
	// Indicates whether the framework is aware of GPU resources.
	// Frameworks that are aware of GPU resources are expected to
	// avoid placing non-GPU workloads on GPU agents, in order
	// to avoid occupying a GPU agent and preventing GPU workloads
	// from running! Currently, if a framework is unaware of GPU
	// resources, it will not be offered *any* of the resources on
	// an agent with GPUs. This restriction is in place because we
	// do not have a revocation mechanism that ensures GPU workloads
	// can evict GPU agent occupants if necessary.
	//
	// TODO(bmahler): As we add revocation we can relax the
	// restriction here. See MESOS-5634 for more information.
	FrameworkInfo_Capability_GPU_RESOURCES FrameworkInfo_Capability_Type = 3
	// Receive offers with resources that are shared.
	FrameworkInfo_Capability_SHARED_RESOURCES FrameworkInfo_Capability_Type = 4
	// Indicates that (1) the framework is prepared to handle the
	// following TaskStates: TASK_UNREACHABLE, TASK_DROPPED,
	// TASK_GONE, TASK_GONE_BY_OPERATOR, and TASK_UNKNOWN, and (2)
	// the framework will assume responsibility for managing
	// partitioned tasks that reregister with the master.
	//
	// Frameworks that enable this capability can define how they
	// would like to handle partitioned tasks. Frameworks will
	// receive TASK_UNREACHABLE for tasks on agents that are
	// partitioned from the master.
	//
	// Without this capability, frameworks will receive TASK_LOST
	// for tasks on partitioned agents.
	// NOTE: Prior to Mesos 1.5, such tasks will be killed by Mesos
	// when the agent reregisters (unless the master has failed over).
	// However due to the lack of benefit in maintaining different
	// behaviors depending on whether the master has failed over
	// (see MESOS-7215), as of 1.5, Mesos will not kill these
	// tasks in either case.
	FrameworkInfo_Capability_PARTITION_AWARE FrameworkInfo_Capability_Type = 5
	// This expresses the ability for the framework to be
	// "multi-tenant" via using the newly introduced `roles`
	// field, and examining `Offer.allocation_info` to determine
	// which role the offers are being made to. We also
	// expect that "single-tenant" schedulers eventually
	// provide this and move away from the deprecated
	// `role` field.
	FrameworkInfo_Capability_MULTI_ROLE FrameworkInfo_Capability_Type = 6
	// This capability has two effects for a framework.
	//
	// (1) The framework is offered resources in a new format.
	//
	//	The offered resources have the `Resource.reservations` field set
	//	rather than `Resource.role` and `Resource.reservation`. In short,
	//	an empty `reservations` field denotes unreserved resources, and
	//	each `ReservationInfo` in the `reservations` field denotes a
	//	reservation that refines the previous one.
	//
	//	See the 'Resource Format' section for more details.
	//
	// (2) The framework can create refined reservations.
	//
	//	A framework can refine an existing reservation via the
	//	`Resource.reservations` field. For example, a reservation for role
	//	`eng` can be refined to `eng/front_end`.
	//
	//	See `ReservationInfo.reservations` for more details.
	//
	// NOTE: Without this capability, a framework is not offered resources
	// that have refined reservations. A resource is said to have refined
	// reservations if it uses the `Resource.reservations` field, and
	// `Resource.reservations_size() > 1`.
	FrameworkInfo_Capability_RESERVATION_REFINEMENT FrameworkInfo_Capability_Type = 7 // EXPERIMENTAL.
	// Indicates that the framework is prepared to receive offers
	// for agents whose region is different from the master's
	// region. Network links between hosts in different regions
	// typically have higher latency and lower bandwidth than
	// network links within a region, so frameworks should be
	// careful to only place suitable workloads in remote regions.
	// Frameworks that are not region-aware will never receive
	// offers for remote agents; region-aware frameworks are assumed
	// to implement their own logic to decide which workloads (if
	// any) are suitable for placement on remote agents.
	FrameworkInfo_Capability_REGION_AWARE FrameworkInfo_Capability_Type = 8
)

// Enum value maps for FrameworkInfo_Capability_Type.
var (
	FrameworkInfo_Capability_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "REVOCABLE_RESOURCES",
		2: "TASK_KILLING_STATE",
		3: "GPU_RESOURCES",
		4: "SHARED_RESOURCES",
		5: "PARTITION_AWARE",
		6: "MULTI_ROLE",
		7: "RESERVATION_REFINEMENT",
		8: "REGION_AWARE",
	}
	FrameworkInfo_Capability_Type_value = map[string]int32{
		"UNKNOWN":                0,
		"REVOCABLE_RESOURCES":    1,
		"TASK_KILLING_STATE":     2,
		"GPU_RESOURCES":          3,
		"SHARED_RESOURCES":       4,
		"PARTITION_AWARE":        5,
		"MULTI_ROLE":             6,
		"RESERVATION_REFINEMENT": 7,
		"REGION_AWARE":           8,
	}
)

func (x FrameworkInfo_Capability_Type) Enum() *FrameworkInfo_Capability_Type {
	p := new(FrameworkInfo_Capability_Type)
	*p = x
	return p
}

func (x FrameworkInfo_Capability_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameworkInfo_Capability_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[5].Descriptor()
}

func (FrameworkInfo_Capability_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[5]
}

func (x FrameworkInfo_Capability_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FrameworkInfo_Capability_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FrameworkInfo_Capability_Type(num)
	return nil
}

// Deprecated: Use FrameworkInfo_Capability_Type.Descriptor instead.
func (FrameworkInfo_Capability_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{15, 0, 0}
}

type CheckInfo_Type int32

const (
	CheckInfo_UNKNOWN CheckInfo_Type = 0
	CheckInfo_COMMAND CheckInfo_Type = 1
	CheckInfo_HTTP    CheckInfo_Type = 2
	CheckInfo_TCP     CheckInfo_Type = 3
)

// Enum value maps for CheckInfo_Type.
var (
	CheckInfo_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "COMMAND",
		2: "HTTP",
		3: "TCP",
	}
	CheckInfo_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"COMMAND": 1,
		"HTTP":    2,
		"TCP":     3,
	}
)

func (x CheckInfo_Type) Enum() *CheckInfo_Type {
	p := new(CheckInfo_Type)
	*p = x
	return p
}

func (x CheckInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[6].Descriptor()
}

func (CheckInfo_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[6]
}

func (x CheckInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CheckInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CheckInfo_Type(num)
	return nil
}

// Deprecated: Use CheckInfo_Type.Descriptor instead.
func (CheckInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{16, 0}
}

type HealthCheck_Type int32

const (
	HealthCheck_UNKNOWN HealthCheck_Type = 0
	HealthCheck_COMMAND HealthCheck_Type = 1
	HealthCheck_HTTP    HealthCheck_Type = 2
	HealthCheck_TCP     HealthCheck_Type = 3
)

// Enum value maps for HealthCheck_Type.
var (
	HealthCheck_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "COMMAND",
		2: "HTTP",
		3: "TCP",
	}
	HealthCheck_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"COMMAND": 1,
		"HTTP":    2,
		"TCP":     3,
	}
)

func (x HealthCheck_Type) Enum() *HealthCheck_Type {
	p := new(HealthCheck_Type)
	*p = x
	return p
}

func (x HealthCheck_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthCheck_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[7].Descriptor()
}

func (HealthCheck_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[7]
}

func (x HealthCheck_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HealthCheck_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HealthCheck_Type(num)
	return nil
}

// Deprecated: Use HealthCheck_Type.Descriptor instead.
func (HealthCheck_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{17, 0}
}

type ExecutorInfo_Type int32

const (
	ExecutorInfo_UNKNOWN ExecutorInfo_Type = 0
	// Mesos provides a simple built-in default executor that frameworks can
	// leverage to run shell commands and containers.
	//
	// NOTES:
	//
	// 1) `command` must not be set when using a default executor.
	//
	//  2. Default executor only accepts a *single* `LAUNCH` or `LAUNCH_GROUP`
	//     operation.
	//
	//  3. If `container` is set, `container.type` must be `MESOS`
	//     and `container.mesos.image` must not be set.
	ExecutorInfo_DEFAULT ExecutorInfo_Type = 1
	// For frameworks that need custom functionality to run tasks, a `CUSTOM`
	// executor can be used. Note that `command` must be set when using a
	// `CUSTOM` executor.
	ExecutorInfo_CUSTOM ExecutorInfo_Type = 2
)

// Enum value maps for ExecutorInfo_Type.
var (
	ExecutorInfo_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "DEFAULT",
		2: "CUSTOM",
	}
	ExecutorInfo_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"DEFAULT": 1,
		"CUSTOM":  2,
	}
)

func (x ExecutorInfo_Type) Enum() *ExecutorInfo_Type {
	p := new(ExecutorInfo_Type)
	*p = x
	return p
}

func (x ExecutorInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutorInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[8].Descriptor()
}

func (ExecutorInfo_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[8]
}

func (x ExecutorInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExecutorInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExecutorInfo_Type(num)
	return nil
}

// Deprecated: Use ExecutorInfo_Type.Descriptor instead.
func (ExecutorInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{20, 0}
}

type MasterInfo_Capability_Type int32

const (
	MasterInfo_Capability_UNKNOWN MasterInfo_Capability_Type = 0
	// The master can handle slaves whose state
	// changes after reregistering.
	MasterInfo_Capability_AGENT_UPDATE MasterInfo_Capability_Type = 1
	// The master can drain or deactivate agents when requested
	// via operator APIs.
	MasterInfo_Capability_AGENT_DRAINING MasterInfo_Capability_Type = 2
	// The master can handle the new quota API, which supports setting
	// limits separately from guarantees (introduced in Mesos 1.9).
	MasterInfo_Capability_QUOTA_V2 MasterInfo_Capability_Type = 3
)

// Enum value maps for MasterInfo_Capability_Type.
var (
	MasterInfo_Capability_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "AGENT_UPDATE",
		2: "AGENT_DRAINING",
		3: "QUOTA_V2",
	}
	MasterInfo_Capability_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"AGENT_UPDATE":   1,
		"AGENT_DRAINING": 2,
		"QUOTA_V2":       3,
	}
)

func (x MasterInfo_Capability_Type) Enum() *MasterInfo_Capability_Type {
	p := new(MasterInfo_Capability_Type)
	*p = x
	return p
}

func (x MasterInfo_Capability_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterInfo_Capability_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[9].Descriptor()
}

func (MasterInfo_Capability_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[9]
}

func (x MasterInfo_Capability_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MasterInfo_Capability_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MasterInfo_Capability_Type(num)
	return nil
}

// Deprecated: Use MasterInfo_Capability_Type.Descriptor instead.
func (MasterInfo_Capability_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{22, 0, 0}
}

type AgentInfo_Capability_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	AgentInfo_Capability_UNKNOWN AgentInfo_Capability_Type = 0
	// This expresses the ability for the agent to be able
	// to launch tasks of a 'multi-role' framework.
	AgentInfo_Capability_MULTI_ROLE AgentInfo_Capability_Type = 1
	// This expresses the ability for the agent to be able to launch
	// tasks, reserve resources, and create volumes using resources
	// allocated to a 'hierarchical-role'.
	// NOTE: This capability is required specifically for creating
	// volumes because a hierchical role includes '/' (slashes) in them.
	// Agents with this capability know to transform the '/' (slashes)
	// into ' ' (spaces).
	AgentInfo_Capability_HIERARCHICAL_ROLE AgentInfo_Capability_Type = 2
	// This capability has three effects for an agent.
	//
	// (1) The format of the checkpointed resources, and
	//
	//	the resources reported to master.
	//
	//	These resources are reported in the "pre-reservation-refinement"
	//	format if none of the resources have refined reservations. If any
	//	of the resources have refined reservations, they are reported in
	//	the "post-reservation-refinement" format. The purpose is to allow
	//	downgrading of an agent as well as communication with a pre-1.4.0
	//	master until the reservation refinement feature is actually used.
	//
	//	See the 'Resource Format' section for more details.
	//
	// (2) The format of the resources reported by the HTTP endpoints.
	//
	//	For resources reported by agent endpoints, the
	//	"pre-reservation-refinement" format is "injected" if possible.
	//	That is, resources without refined reservations will have the
	//	`Resource.role` and `Resource.reservation` set, whereas
	//	resources with refined reservations will not.
	//
	//	See the 'Resource Format' section for more details.
	//
	// (3) The ability for the agent to launch tasks, reserve resources, and
	//
	//	create volumes using resources that have refined reservations.
	//
	//	See `ReservationInfo.reservations` section for more details.
	//
	// NOTE: Resources are said to have refined reservations if it uses the
	// `Resource.reservations` field, and `Resource.reservations_size() > 1`.
	AgentInfo_Capability_RESERVATION_REFINEMENT AgentInfo_Capability_Type = 3
	// This expresses the ability for the agent to handle resource
	// provider related operations. This includes the following:
	//
	// (1) The ability to report resources that are provided by some
	//
	//	local resource providers through the resource provider API.
	//
	// (2) The ability to provide operation feedback. This also means
	//
	//	that this capability is a prerequisite for full support of
	//	feedback for operations on agent default resources. If an
	//	agent has the mandatory AGENT_OPERATION_FEEDBACK capability
	//	set but not the RESOURCE_PROVIDER capability, then
	//	operations on agent default resources which request feedback
	//	will not be allowed.
	AgentInfo_Capability_RESOURCE_PROVIDER AgentInfo_Capability_Type = 4
	// This expresses the capability for the agent to handle persistent volume
	// resize operations safely. This capability is turned on by default.
	AgentInfo_Capability_RESIZE_VOLUME AgentInfo_Capability_Type = 5
	// This expresses the ability of the agent to handle operation feedback
	// for operations on agent default resources.
	//
	// Note that full support for this feature also requires the
	// RESOURCE_PROVIDER capability; if you would like the agent to
	// handle feedback for operations on agent default resources, the
	// RESOURCE_PROVIDER capability should be set as well.
	AgentInfo_Capability_AGENT_OPERATION_FEEDBACK AgentInfo_Capability_Type = 6
	// This expresses the ability for the agent to automatically drain tasks
	// in preparation for operator maintenance. This capability is required.
	AgentInfo_Capability_AGENT_DRAINING AgentInfo_Capability_Type = 7
	// This expresses the ability for the agent to launch tasks which specify
	// resource limits for CPU and/or memory.
	AgentInfo_Capability_TASK_RESOURCE_LIMITS AgentInfo_Capability_Type = 8
)

// Enum value maps for AgentInfo_Capability_Type.
var (
	AgentInfo_Capability_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "MULTI_ROLE",
		2: "HIERARCHICAL_ROLE",
		3: "RESERVATION_REFINEMENT",
		4: "RESOURCE_PROVIDER",
		5: "RESIZE_VOLUME",
		6: "AGENT_OPERATION_FEEDBACK",
		7: "AGENT_DRAINING",
		8: "TASK_RESOURCE_LIMITS",
	}
	AgentInfo_Capability_Type_value = map[string]int32{
		"UNKNOWN":                  0,
		"MULTI_ROLE":               1,
		"HIERARCHICAL_ROLE":        2,
		"RESERVATION_REFINEMENT":   3,
		"RESOURCE_PROVIDER":        4,
		"RESIZE_VOLUME":            5,
		"AGENT_OPERATION_FEEDBACK": 6,
		"AGENT_DRAINING":           7,
		"TASK_RESOURCE_LIMITS":     8,
	}
)

func (x AgentInfo_Capability_Type) Enum() *AgentInfo_Capability_Type {
	p := new(AgentInfo_Capability_Type)
	*p = x
	return p
}

func (x AgentInfo_Capability_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentInfo_Capability_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[10].Descriptor()
}

func (AgentInfo_Capability_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[10]
}

func (x AgentInfo_Capability_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AgentInfo_Capability_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AgentInfo_Capability_Type(num)
	return nil
}

// Deprecated: Use AgentInfo_Capability_Type.Descriptor instead.
func (AgentInfo_Capability_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{23, 0, 0}
}

type CSIPluginContainerInfo_Service int32

const (
	CSIPluginContainerInfo_UNKNOWN            CSIPluginContainerInfo_Service = 0
	CSIPluginContainerInfo_CONTROLLER_SERVICE CSIPluginContainerInfo_Service = 1
	CSIPluginContainerInfo_NODE_SERVICE       CSIPluginContainerInfo_Service = 2
)

// Enum value maps for CSIPluginContainerInfo_Service.
var (
	CSIPluginContainerInfo_Service_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONTROLLER_SERVICE",
		2: "NODE_SERVICE",
	}
	CSIPluginContainerInfo_Service_value = map[string]int32{
		"UNKNOWN":            0,
		"CONTROLLER_SERVICE": 1,
		"NODE_SERVICE":       2,
	}
)

func (x CSIPluginContainerInfo_Service) Enum() *CSIPluginContainerInfo_Service {
	p := new(CSIPluginContainerInfo_Service)
	*p = x
	return p
}

func (x CSIPluginContainerInfo_Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSIPluginContainerInfo_Service) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[11].Descriptor()
}

func (CSIPluginContainerInfo_Service) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[11]
}

func (x CSIPluginContainerInfo_Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CSIPluginContainerInfo_Service) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CSIPluginContainerInfo_Service(num)
	return nil
}

// Deprecated: Use CSIPluginContainerInfo_Service.Descriptor instead.
func (CSIPluginContainerInfo_Service) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{24, 0}
}

type Value_Type int32

const (
	Value_SCALAR Value_Type = 0
	Value_RANGES Value_Type = 1
	Value_SET    Value_Type = 2
	Value_TEXT   Value_Type = 3
)

// Enum value maps for Value_Type.
var (
	Value_Type_name = map[int32]string{
		0: "SCALAR",
		1: "RANGES",
		2: "SET",
		3: "TEXT",
	}
	Value_Type_value = map[string]int32{
		"SCALAR": 0,
		"RANGES": 1,
		"SET":    2,
		"TEXT":   3,
	}
)

func (x Value_Type) Enum() *Value_Type {
	p := new(Value_Type)
	*p = x
	return p
}

func (x Value_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Value_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[12].Descriptor()
}

func (Value_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[12]
}

func (x Value_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Value_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Value_Type(num)
	return nil
}

// Deprecated: Use Value_Type.Descriptor instead.
func (Value_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28, 0}
}

type Resource_ReservationInfo_Type int32

const (
	Resource_ReservationInfo_UNKNOWN Resource_ReservationInfo_Type = 0
	Resource_ReservationInfo_STATIC  Resource_ReservationInfo_Type = 1
	Resource_ReservationInfo_DYNAMIC Resource_ReservationInfo_Type = 2
)

// Enum value maps for Resource_ReservationInfo_Type.
var (
	Resource_ReservationInfo_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "STATIC",
		2: "DYNAMIC",
	}
	Resource_ReservationInfo_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"STATIC":  1,
		"DYNAMIC": 2,
	}
)

func (x Resource_ReservationInfo_Type) Enum() *Resource_ReservationInfo_Type {
	p := new(Resource_ReservationInfo_Type)
	*p = x
	return p
}

func (x Resource_ReservationInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_ReservationInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[13].Descriptor()
}

func (Resource_ReservationInfo_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[13]
}

func (x Resource_ReservationInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Resource_ReservationInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Resource_ReservationInfo_Type(num)
	return nil
}

// Deprecated: Use Resource_ReservationInfo_Type.Descriptor instead.
func (Resource_ReservationInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 1, 0}
}

type Resource_DiskInfo_Source_Type int32

const (
	Resource_DiskInfo_Source_UNKNOWN Resource_DiskInfo_Source_Type = 0
	Resource_DiskInfo_Source_PATH    Resource_DiskInfo_Source_Type = 1
	Resource_DiskInfo_Source_MOUNT   Resource_DiskInfo_Source_Type = 2
	Resource_DiskInfo_Source_BLOCK   Resource_DiskInfo_Source_Type = 3
	Resource_DiskInfo_Source_RAW     Resource_DiskInfo_Source_Type = 4
)

// Enum value maps for Resource_DiskInfo_Source_Type.
var (
	Resource_DiskInfo_Source_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "PATH",
		2: "MOUNT",
		3: "BLOCK",
		4: "RAW",
	}
	Resource_DiskInfo_Source_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"PATH":    1,
		"MOUNT":   2,
		"BLOCK":   3,
		"RAW":     4,
	}
)

func (x Resource_DiskInfo_Source_Type) Enum() *Resource_DiskInfo_Source_Type {
	p := new(Resource_DiskInfo_Source_Type)
	*p = x
	return p
}

func (x Resource_DiskInfo_Source_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Resource_DiskInfo_Source_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[14].Descriptor()
}

func (Resource_DiskInfo_Source_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[14]
}

func (x Resource_DiskInfo_Source_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Resource_DiskInfo_Source_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Resource_DiskInfo_Source_Type(num)
	return nil
}

// Deprecated: Use Resource_DiskInfo_Source_Type.Descriptor instead.
func (Resource_DiskInfo_Source_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 2, 1, 0}
}

type Offer_Operation_Type int32

const (
	Offer_Operation_UNKNOWN       Offer_Operation_Type = 0
	Offer_Operation_LAUNCH        Offer_Operation_Type = 1
	Offer_Operation_LAUNCH_GROUP  Offer_Operation_Type = 6
	Offer_Operation_RESERVE       Offer_Operation_Type = 2
	Offer_Operation_UNRESERVE     Offer_Operation_Type = 3
	Offer_Operation_CREATE        Offer_Operation_Type = 4
	Offer_Operation_DESTROY       Offer_Operation_Type = 5
	Offer_Operation_GROW_VOLUME   Offer_Operation_Type = 11 // EXPERIMENTAL.
	Offer_Operation_SHRINK_VOLUME Offer_Operation_Type = 12 // EXPERIMENTAL.
	Offer_Operation_CREATE_DISK   Offer_Operation_Type = 13 // EXPERIMENTAL.
	Offer_Operation_DESTROY_DISK  Offer_Operation_Type = 14 // EXPERIMENTAL.
)

// Enum value maps for Offer_Operation_Type.
var (
	Offer_Operation_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "LAUNCH",
		6:  "LAUNCH_GROUP",
		2:  "RESERVE",
		3:  "UNRESERVE",
		4:  "CREATE",
		5:  "DESTROY",
		11: "GROW_VOLUME",
		12: "SHRINK_VOLUME",
		13: "CREATE_DISK",
		14: "DESTROY_DISK",
	}
	Offer_Operation_Type_value = map[string]int32{
		"UNKNOWN":       0,
		"LAUNCH":        1,
		"LAUNCH_GROUP":  6,
		"RESERVE":       2,
		"UNRESERVE":     3,
		"CREATE":        4,
		"DESTROY":       5,
		"GROW_VOLUME":   11,
		"SHRINK_VOLUME": 12,
		"CREATE_DISK":   13,
		"DESTROY_DISK":  14,
	}
)

func (x Offer_Operation_Type) Enum() *Offer_Operation_Type {
	p := new(Offer_Operation_Type)
	*p = x
	return p
}

func (x Offer_Operation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Offer_Operation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[15].Descriptor()
}

func (Offer_Operation_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[15]
}

func (x Offer_Operation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Offer_Operation_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Offer_Operation_Type(num)
	return nil
}

// Deprecated: Use Offer_Operation_Type.Descriptor instead.
func (Offer_Operation_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 0}
}

// Describes the source of the task status update.
type TaskStatus_Source int32

const (
	TaskStatus_SOURCE_MASTER   TaskStatus_Source = 0
	TaskStatus_SOURCE_AGENT    TaskStatus_Source = 1
	TaskStatus_SOURCE_EXECUTOR TaskStatus_Source = 2
)

// Enum value maps for TaskStatus_Source.
var (
	TaskStatus_Source_name = map[int32]string{
		0: "SOURCE_MASTER",
		1: "SOURCE_AGENT",
		2: "SOURCE_EXECUTOR",
	}
	TaskStatus_Source_value = map[string]int32{
		"SOURCE_MASTER":   0,
		"SOURCE_AGENT":    1,
		"SOURCE_EXECUTOR": 2,
	}
)

func (x TaskStatus_Source) Enum() *TaskStatus_Source {
	p := new(TaskStatus_Source)
	*p = x
	return p
}

func (x TaskStatus_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[16].Descriptor()
}

func (TaskStatus_Source) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[16]
}

func (x TaskStatus_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskStatus_Source) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskStatus_Source(num)
	return nil
}

// Deprecated: Use TaskStatus_Source.Descriptor instead.
func (TaskStatus_Source) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{53, 0}
}

// Detailed reason for the task status update.
// Refer to docs/task-state-reasons.md for additional explanation.
type TaskStatus_Reason int32

const (
	// TODO(jieyu): The default value when a caller doesn't check for
	// presence is 0 and so ideally the 0 reason is not a valid one.
	// Since this is not used anywhere, consider removing this reason.
	TaskStatus_REASON_COMMAND_EXECUTOR_FAILED          TaskStatus_Reason = 0
	TaskStatus_REASON_CONTAINER_LAUNCH_FAILED          TaskStatus_Reason = 21
	TaskStatus_REASON_CONTAINER_LIMITATION             TaskStatus_Reason = 19
	TaskStatus_REASON_CONTAINER_LIMITATION_DISK        TaskStatus_Reason = 20
	TaskStatus_REASON_CONTAINER_LIMITATION_MEMORY      TaskStatus_Reason = 8
	TaskStatus_REASON_CONTAINER_PREEMPTED              TaskStatus_Reason = 17
	TaskStatus_REASON_CONTAINER_UPDATE_FAILED          TaskStatus_Reason = 22
	TaskStatus_REASON_MAX_COMPLETION_TIME_REACHED      TaskStatus_Reason = 33
	TaskStatus_REASON_EXECUTOR_REGISTRATION_TIMEOUT    TaskStatus_Reason = 23
	TaskStatus_REASON_EXECUTOR_REREGISTRATION_TIMEOUT  TaskStatus_Reason = 24
	TaskStatus_REASON_EXECUTOR_TERMINATED              TaskStatus_Reason = 1
	TaskStatus_REASON_EXECUTOR_UNREGISTERED            TaskStatus_Reason = 2 // No longer used.
	TaskStatus_REASON_FRAMEWORK_REMOVED                TaskStatus_Reason = 3
	TaskStatus_REASON_GC_ERROR                         TaskStatus_Reason = 4
	TaskStatus_REASON_INVALID_FRAMEWORKID              TaskStatus_Reason = 5
	TaskStatus_REASON_INVALID_OFFERS                   TaskStatus_Reason = 6
	TaskStatus_REASON_IO_SWITCHBOARD_EXITED            TaskStatus_Reason = 27
	TaskStatus_REASON_MASTER_DISCONNECTED              TaskStatus_Reason = 7
	TaskStatus_REASON_RECONCILIATION                   TaskStatus_Reason = 9
	TaskStatus_REASON_RESOURCES_UNKNOWN                TaskStatus_Reason = 18
	TaskStatus_REASON_AGENT_DISCONNECTED               TaskStatus_Reason = 10
	TaskStatus_REASON_AGENT_DRAINING                   TaskStatus_Reason = 34
	TaskStatus_REASON_AGENT_REMOVED                    TaskStatus_Reason = 11
	TaskStatus_REASON_AGENT_REMOVED_BY_OPERATOR        TaskStatus_Reason = 31
	TaskStatus_REASON_AGENT_REREGISTERED               TaskStatus_Reason = 32
	TaskStatus_REASON_AGENT_RESTARTED                  TaskStatus_Reason = 12
	TaskStatus_REASON_AGENT_UNKNOWN                    TaskStatus_Reason = 13
	TaskStatus_REASON_TASK_KILLED_DURING_LAUNCH        TaskStatus_Reason = 30
	TaskStatus_REASON_TASK_CHECK_STATUS_UPDATED        TaskStatus_Reason = 28
	TaskStatus_REASON_TASK_HEALTH_CHECK_STATUS_UPDATED TaskStatus_Reason = 29
	TaskStatus_REASON_TASK_GROUP_INVALID               TaskStatus_Reason = 25
	TaskStatus_REASON_TASK_GROUP_UNAUTHORIZED          TaskStatus_Reason = 26
	TaskStatus_REASON_TASK_INVALID                     TaskStatus_Reason = 14
	TaskStatus_REASON_TASK_UNAUTHORIZED                TaskStatus_Reason = 15
	TaskStatus_REASON_TASK_UNKNOWN                     TaskStatus_Reason = 16
)

// Enum value maps for TaskStatus_Reason.
var (
	TaskStatus_Reason_name = map[int32]string{
		0:  "REASON_COMMAND_EXECUTOR_FAILED",
		21: "REASON_CONTAINER_LAUNCH_FAILED",
		19: "REASON_CONTAINER_LIMITATION",
		20: "REASON_CONTAINER_LIMITATION_DISK",
		8:  "REASON_CONTAINER_LIMITATION_MEMORY",
		17: "REASON_CONTAINER_PREEMPTED",
		22: "REASON_CONTAINER_UPDATE_FAILED",
		33: "REASON_MAX_COMPLETION_TIME_REACHED",
		23: "REASON_EXECUTOR_REGISTRATION_TIMEOUT",
		24: "REASON_EXECUTOR_REREGISTRATION_TIMEOUT",
		1:  "REASON_EXECUTOR_TERMINATED",
		2:  "REASON_EXECUTOR_UNREGISTERED",
		3:  "REASON_FRAMEWORK_REMOVED",
		4:  "REASON_GC_ERROR",
		5:  "REASON_INVALID_FRAMEWORKID",
		6:  "REASON_INVALID_OFFERS",
		27: "REASON_IO_SWITCHBOARD_EXITED",
		7:  "REASON_MASTER_DISCONNECTED",
		9:  "REASON_RECONCILIATION",
		18: "REASON_RESOURCES_UNKNOWN",
		10: "REASON_AGENT_DISCONNECTED",
		34: "REASON_AGENT_DRAINING",
		11: "REASON_AGENT_REMOVED",
		31: "REASON_AGENT_REMOVED_BY_OPERATOR",
		32: "REASON_AGENT_REREGISTERED",
		12: "REASON_AGENT_RESTARTED",
		13: "REASON_AGENT_UNKNOWN",
		30: "REASON_TASK_KILLED_DURING_LAUNCH",
		28: "REASON_TASK_CHECK_STATUS_UPDATED",
		29: "REASON_TASK_HEALTH_CHECK_STATUS_UPDATED",
		25: "REASON_TASK_GROUP_INVALID",
		26: "REASON_TASK_GROUP_UNAUTHORIZED",
		14: "REASON_TASK_INVALID",
		15: "REASON_TASK_UNAUTHORIZED",
		16: "REASON_TASK_UNKNOWN",
	}
	TaskStatus_Reason_value = map[string]int32{
		"REASON_COMMAND_EXECUTOR_FAILED":          0,
		"REASON_CONTAINER_LAUNCH_FAILED":          21,
		"REASON_CONTAINER_LIMITATION":             19,
		"REASON_CONTAINER_LIMITATION_DISK":        20,
		"REASON_CONTAINER_LIMITATION_MEMORY":      8,
		"REASON_CONTAINER_PREEMPTED":              17,
		"REASON_CONTAINER_UPDATE_FAILED":          22,
		"REASON_MAX_COMPLETION_TIME_REACHED":      33,
		"REASON_EXECUTOR_REGISTRATION_TIMEOUT":    23,
		"REASON_EXECUTOR_REREGISTRATION_TIMEOUT":  24,
		"REASON_EXECUTOR_TERMINATED":              1,
		"REASON_EXECUTOR_UNREGISTERED":            2,
		"REASON_FRAMEWORK_REMOVED":                3,
		"REASON_GC_ERROR":                         4,
		"REASON_INVALID_FRAMEWORKID":              5,
		"REASON_INVALID_OFFERS":                   6,
		"REASON_IO_SWITCHBOARD_EXITED":            27,
		"REASON_MASTER_DISCONNECTED":              7,
		"REASON_RECONCILIATION":                   9,
		"REASON_RESOURCES_UNKNOWN":                18,
		"REASON_AGENT_DISCONNECTED":               10,
		"REASON_AGENT_DRAINING":                   34,
		"REASON_AGENT_REMOVED":                    11,
		"REASON_AGENT_REMOVED_BY_OPERATOR":        31,
		"REASON_AGENT_REREGISTERED":               32,
		"REASON_AGENT_RESTARTED":                  12,
		"REASON_AGENT_UNKNOWN":                    13,
		"REASON_TASK_KILLED_DURING_LAUNCH":        30,
		"REASON_TASK_CHECK_STATUS_UPDATED":        28,
		"REASON_TASK_HEALTH_CHECK_STATUS_UPDATED": 29,
		"REASON_TASK_GROUP_INVALID":               25,
		"REASON_TASK_GROUP_UNAUTHORIZED":          26,
		"REASON_TASK_INVALID":                     14,
		"REASON_TASK_UNAUTHORIZED":                15,
		"REASON_TASK_UNKNOWN":                     16,
	}
)

func (x TaskStatus_Reason) Enum() *TaskStatus_Reason {
	p := new(TaskStatus_Reason)
	*p = x
	return p
}

func (x TaskStatus_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[17].Descriptor()
}

func (TaskStatus_Reason) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[17]
}

func (x TaskStatus_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TaskStatus_Reason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TaskStatus_Reason(num)
	return nil
}

// Deprecated: Use TaskStatus_Reason.Descriptor instead.
func (TaskStatus_Reason) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{53, 1}
}

type Environment_Variable_Type int32

const (
	Environment_Variable_UNKNOWN Environment_Variable_Type = 0
	Environment_Variable_VALUE   Environment_Variable_Type = 1
	Environment_Variable_SECRET  Environment_Variable_Type = 2
)

// Enum value maps for Environment_Variable_Type.
var (
	Environment_Variable_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "VALUE",
		2: "SECRET",
	}
	Environment_Variable_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"VALUE":   1,
		"SECRET":  2,
	}
)

func (x Environment_Variable_Type) Enum() *Environment_Variable_Type {
	p := new(Environment_Variable_Type)
	*p = x
	return p
}

func (x Environment_Variable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Environment_Variable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[18].Descriptor()
}

func (Environment_Variable_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[18]
}

func (x Environment_Variable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Environment_Variable_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Environment_Variable_Type(num)
	return nil
}

// Deprecated: Use Environment_Variable_Type.Descriptor instead.
func (Environment_Variable_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{55, 0, 0}
}

type Secret_Type int32

const (
	Secret_UNKNOWN   Secret_Type = 0
	Secret_REFERENCE Secret_Type = 1
	Secret_VALUE     Secret_Type = 2
)

// Enum value maps for Secret_Type.
var (
	Secret_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "REFERENCE",
		2: "VALUE",
	}
	Secret_Type_value = map[string]int32{
		"UNKNOWN":   0,
		"REFERENCE": 1,
		"VALUE":     2,
	}
)

func (x Secret_Type) Enum() *Secret_Type {
	p := new(Secret_Type)
	*p = x
	return p
}

func (x Secret_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Secret_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[19].Descriptor()
}

func (Secret_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[19]
}

func (x Secret_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Secret_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Secret_Type(num)
	return nil
}

// Deprecated: Use Secret_Type.Descriptor instead.
func (Secret_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{60, 0}
}

type Image_Type int32

const (
	Image_APPC   Image_Type = 1
	Image_DOCKER Image_Type = 2
)

// Enum value maps for Image_Type.
var (
	Image_Type_name = map[int32]string{
		1: "APPC",
		2: "DOCKER",
	}
	Image_Type_value = map[string]int32{
		"APPC":   1,
		"DOCKER": 2,
	}
)

func (x Image_Type) Enum() *Image_Type {
	p := new(Image_Type)
	*p = x
	return p
}

func (x Image_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[20].Descriptor()
}

func (Image_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[20]
}

func (x Image_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Image_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Image_Type(num)
	return nil
}

// Deprecated: Use Image_Type.Descriptor instead.
func (Image_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{63, 0}
}

type MountPropagation_Mode int32

const (
	MountPropagation_UNKNOWN MountPropagation_Mode = 0
	// The volume in a container will receive new mounts from the host
	// or other containers, but filesystems mounted inside the
	// container won't be propagated to the host or other containers.
	// This is currently the default behavior for all volumes.
	MountPropagation_HOST_TO_CONTAINER MountPropagation_Mode = 1
	// The volume in a container will receive new mounts from the host
	// or other containers, and its own mounts will be propagated from
	// the container to the host or other containers.
	MountPropagation_BIDIRECTIONAL MountPropagation_Mode = 2
)

// Enum value maps for MountPropagation_Mode.
var (
	MountPropagation_Mode_name = map[int32]string{
		0: "UNKNOWN",
		1: "HOST_TO_CONTAINER",
		2: "BIDIRECTIONAL",
	}
	MountPropagation_Mode_value = map[string]int32{
		"UNKNOWN":           0,
		"HOST_TO_CONTAINER": 1,
		"BIDIRECTIONAL":     2,
	}
)

func (x MountPropagation_Mode) Enum() *MountPropagation_Mode {
	p := new(MountPropagation_Mode)
	*p = x
	return p
}

func (x MountPropagation_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountPropagation_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[21].Descriptor()
}

func (MountPropagation_Mode) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[21]
}

func (x MountPropagation_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MountPropagation_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MountPropagation_Mode(num)
	return nil
}

// Deprecated: Use MountPropagation_Mode.Descriptor instead.
func (MountPropagation_Mode) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{64, 0}
}

type Volume_Mode int32

const (
	Volume_RW Volume_Mode = 1 // read-write.
	Volume_RO Volume_Mode = 2 // read-only.
)

// Enum value maps for Volume_Mode.
var (
	Volume_Mode_name = map[int32]string{
		1: "RW",
		2: "RO",
	}
	Volume_Mode_value = map[string]int32{
		"RW": 1,
		"RO": 2,
	}
)

func (x Volume_Mode) Enum() *Volume_Mode {
	p := new(Volume_Mode)
	*p = x
	return p
}

func (x Volume_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[22].Descriptor()
}

func (Volume_Mode) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[22]
}

func (x Volume_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Volume_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Volume_Mode(num)
	return nil
}

// Deprecated: Use Volume_Mode.Descriptor instead.
func (Volume_Mode) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0}
}

type Volume_Source_Type int32

const (
	// This must be the first enum value in this list, to
	// ensure that if 'type' is not set, the default value
	// is UNKNOWN. This enables enum values to be added
	// in a backwards-compatible way. See: MESOS-4997.
	Volume_Source_UNKNOWN Volume_Source_Type = 0
	// TODO(gyliu513): Add IMAGE as volume source type.
	Volume_Source_DOCKER_VOLUME Volume_Source_Type = 1
	Volume_Source_HOST_PATH     Volume_Source_Type = 4
	Volume_Source_SANDBOX_PATH  Volume_Source_Type = 2
	Volume_Source_SECRET        Volume_Source_Type = 3
	Volume_Source_CSI_VOLUME    Volume_Source_Type = 5
)

// Enum value maps for Volume_Source_Type.
var (
	Volume_Source_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "DOCKER_VOLUME",
		4: "HOST_PATH",
		2: "SANDBOX_PATH",
		3: "SECRET",
		5: "CSI_VOLUME",
	}
	Volume_Source_Type_value = map[string]int32{
		"UNKNOWN":       0,
		"DOCKER_VOLUME": 1,
		"HOST_PATH":     4,
		"SANDBOX_PATH":  2,
		"SECRET":        3,
		"CSI_VOLUME":    5,
	}
)

func (x Volume_Source_Type) Enum() *Volume_Source_Type {
	p := new(Volume_Source_Type)
	*p = x
	return p
}

func (x Volume_Source_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_Source_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[23].Descriptor()
}

func (Volume_Source_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[23]
}

func (x Volume_Source_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Volume_Source_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Volume_Source_Type(num)
	return nil
}

// Deprecated: Use Volume_Source_Type.Descriptor instead.
func (Volume_Source_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 0}
}

type Volume_Source_SandboxPath_Type int32

const (
	Volume_Source_SandboxPath_UNKNOWN Volume_Source_SandboxPath_Type = 0
	Volume_Source_SandboxPath_SELF    Volume_Source_SandboxPath_Type = 1
	Volume_Source_SandboxPath_PARENT  Volume_Source_SandboxPath_Type = 2
)

// Enum value maps for Volume_Source_SandboxPath_Type.
var (
	Volume_Source_SandboxPath_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "SELF",
		2: "PARENT",
	}
	Volume_Source_SandboxPath_Type_value = map[string]int32{
		"UNKNOWN": 0,
		"SELF":    1,
		"PARENT":  2,
	}
)

func (x Volume_Source_SandboxPath_Type) Enum() *Volume_Source_SandboxPath_Type {
	p := new(Volume_Source_SandboxPath_Type)
	*p = x
	return p
}

func (x Volume_Source_SandboxPath_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_Source_SandboxPath_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[24].Descriptor()
}

func (Volume_Source_SandboxPath_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[24]
}

func (x Volume_Source_SandboxPath_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Volume_Source_SandboxPath_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Volume_Source_SandboxPath_Type(num)
	return nil
}

// Deprecated: Use Volume_Source_SandboxPath_Type.Descriptor instead.
func (Volume_Source_SandboxPath_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 2, 0}
}

type Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode int32

const (
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_UNKNOWN Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode = 0
	// Can only be published once as read/write on a single node, at
	// any given time.
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_SINGLE_NODE_WRITER Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode = 1
	// Can only be published once as readonly on a single node, at
	// any given time.
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_SINGLE_NODE_READER_ONLY Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode = 2
	// Can be published as readonly at multiple nodes simultaneously.
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_MULTI_NODE_READER_ONLY Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode = 3
	// Can be published at multiple nodes simultaneously. Only one of
	// the node can be used as read/write. The rest will be readonly.
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_MULTI_NODE_SINGLE_WRITER Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode = 4
	// Can be published as read/write at multiple nodes
	// simultaneously.
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_MULTI_NODE_MULTI_WRITER Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode = 5
)

// Enum value maps for Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode.
var (
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode_name = map[int32]string{
		0: "UNKNOWN",
		1: "SINGLE_NODE_WRITER",
		2: "SINGLE_NODE_READER_ONLY",
		3: "MULTI_NODE_READER_ONLY",
		4: "MULTI_NODE_SINGLE_WRITER",
		5: "MULTI_NODE_MULTI_WRITER",
	}
	Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode_value = map[string]int32{
		"UNKNOWN":                  0,
		"SINGLE_NODE_WRITER":       1,
		"SINGLE_NODE_READER_ONLY":  2,
		"MULTI_NODE_READER_ONLY":   3,
		"MULTI_NODE_SINGLE_WRITER": 4,
		"MULTI_NODE_MULTI_WRITER":  5,
	}
)

func (x Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) Enum() *Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode {
	p := new(Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode)
	*p = x
	return p
}

func (x Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[25].Descriptor()
}

func (Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[25]
}

func (x Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode(num)
	return nil
}

// Deprecated: Use Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode.Descriptor instead.
func (Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3, 0, 2, 0}
}

type NetworkInfo_Protocol int32

const (
	NetworkInfo_IPv4 NetworkInfo_Protocol = 1
	NetworkInfo_IPv6 NetworkInfo_Protocol = 2
)

// Enum value maps for NetworkInfo_Protocol.
var (
	NetworkInfo_Protocol_name = map[int32]string{
		1: "IPv4",
		2: "IPv6",
	}
	NetworkInfo_Protocol_value = map[string]int32{
		"IPv4": 1,
		"IPv6": 2,
	}
)

func (x NetworkInfo_Protocol) Enum() *NetworkInfo_Protocol {
	p := new(NetworkInfo_Protocol)
	*p = x
	return p
}

func (x NetworkInfo_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInfo_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[26].Descriptor()
}

func (NetworkInfo_Protocol) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[26]
}

func (x NetworkInfo_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NetworkInfo_Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NetworkInfo_Protocol(num)
	return nil
}

// Deprecated: Use NetworkInfo_Protocol.Descriptor instead.
func (NetworkInfo_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{66, 0}
}

// We start the actual values at an offset(1000) because Protobuf 2
// uses the first value as the default one. Separating the default
// value from the real first value helps to disambiguate them. This
// is especially valuable for backward compatibility.
// See: MESOS-4997.
type CapabilityInfo_Capability int32

const (
	CapabilityInfo_UNKNOWN            CapabilityInfo_Capability = 0
	CapabilityInfo_CHOWN              CapabilityInfo_Capability = 1000
	CapabilityInfo_DAC_OVERRIDE       CapabilityInfo_Capability = 1001
	CapabilityInfo_DAC_READ_SEARCH    CapabilityInfo_Capability = 1002
	CapabilityInfo_FOWNER             CapabilityInfo_Capability = 1003
	CapabilityInfo_FSETID             CapabilityInfo_Capability = 1004
	CapabilityInfo_KILL               CapabilityInfo_Capability = 1005
	CapabilityInfo_SETGID             CapabilityInfo_Capability = 1006
	CapabilityInfo_SETUID             CapabilityInfo_Capability = 1007
	CapabilityInfo_SETPCAP            CapabilityInfo_Capability = 1008
	CapabilityInfo_LINUX_IMMUTABLE    CapabilityInfo_Capability = 1009
	CapabilityInfo_NET_BIND_SERVICE   CapabilityInfo_Capability = 1010
	CapabilityInfo_NET_BROADCAST      CapabilityInfo_Capability = 1011
	CapabilityInfo_NET_ADMIN          CapabilityInfo_Capability = 1012
	CapabilityInfo_NET_RAW            CapabilityInfo_Capability = 1013
	CapabilityInfo_IPC_LOCK           CapabilityInfo_Capability = 1014
	CapabilityInfo_IPC_OWNER          CapabilityInfo_Capability = 1015
	CapabilityInfo_SYS_MODULE         CapabilityInfo_Capability = 1016
	CapabilityInfo_SYS_RAWIO          CapabilityInfo_Capability = 1017
	CapabilityInfo_SYS_CHROOT         CapabilityInfo_Capability = 1018
	CapabilityInfo_SYS_PTRACE         CapabilityInfo_Capability = 1019
	CapabilityInfo_SYS_PACCT          CapabilityInfo_Capability = 1020
	CapabilityInfo_SYS_ADMIN          CapabilityInfo_Capability = 1021
	CapabilityInfo_SYS_BOOT           CapabilityInfo_Capability = 1022
	CapabilityInfo_SYS_NICE           CapabilityInfo_Capability = 1023
	CapabilityInfo_SYS_RESOURCE       CapabilityInfo_Capability = 1024
	CapabilityInfo_SYS_TIME           CapabilityInfo_Capability = 1025
	CapabilityInfo_SYS_TTY_CONFIG     CapabilityInfo_Capability = 1026
	CapabilityInfo_MKNOD              CapabilityInfo_Capability = 1027
	CapabilityInfo_LEASE              CapabilityInfo_Capability = 1028
	CapabilityInfo_AUDIT_WRITE        CapabilityInfo_Capability = 1029
	CapabilityInfo_AUDIT_CONTROL      CapabilityInfo_Capability = 1030
	CapabilityInfo_SETFCAP            CapabilityInfo_Capability = 1031
	CapabilityInfo_MAC_OVERRIDE       CapabilityInfo_Capability = 1032
	CapabilityInfo_MAC_ADMIN          CapabilityInfo_Capability = 1033
	CapabilityInfo_SYSLOG             CapabilityInfo_Capability = 1034
	CapabilityInfo_WAKE_ALARM         CapabilityInfo_Capability = 1035
	CapabilityInfo_BLOCK_SUSPEND      CapabilityInfo_Capability = 1036
	CapabilityInfo_AUDIT_READ         CapabilityInfo_Capability = 1037
	CapabilityInfo_PERFMON            CapabilityInfo_Capability = 1038
	CapabilityInfo_BPF                CapabilityInfo_Capability = 1039
	CapabilityInfo_CHECKPOINT_RESTORE CapabilityInfo_Capability = 1040
)

// Enum value maps for CapabilityInfo_Capability.
var (
	CapabilityInfo_Capability_name = map[int32]string{
		0:    "UNKNOWN",
		1000: "CHOWN",
		1001: "DAC_OVERRIDE",
		1002: "DAC_READ_SEARCH",
		1003: "FOWNER",
		1004: "FSETID",
		1005: "KILL",
		1006: "SETGID",
		1007: "SETUID",
		1008: "SETPCAP",
		1009: "LINUX_IMMUTABLE",
		1010: "NET_BIND_SERVICE",
		1011: "NET_BROADCAST",
		1012: "NET_ADMIN",
		1013: "NET_RAW",
		1014: "IPC_LOCK",
		1015: "IPC_OWNER",
		1016: "SYS_MODULE",
		1017: "SYS_RAWIO",
		1018: "SYS_CHROOT",
		1019: "SYS_PTRACE",
		1020: "SYS_PACCT",
		1021: "SYS_ADMIN",
		1022: "SYS_BOOT",
		1023: "SYS_NICE",
		1024: "SYS_RESOURCE",
		1025: "SYS_TIME",
		1026: "SYS_TTY_CONFIG",
		1027: "MKNOD",
		1028: "LEASE",
		1029: "AUDIT_WRITE",
		1030: "AUDIT_CONTROL",
		1031: "SETFCAP",
		1032: "MAC_OVERRIDE",
		1033: "MAC_ADMIN",
		1034: "SYSLOG",
		1035: "WAKE_ALARM",
		1036: "BLOCK_SUSPEND",
		1037: "AUDIT_READ",
		1038: "PERFMON",
		1039: "BPF",
		1040: "CHECKPOINT_RESTORE",
	}
	CapabilityInfo_Capability_value = map[string]int32{
		"UNKNOWN":            0,
		"CHOWN":              1000,
		"DAC_OVERRIDE":       1001,
		"DAC_READ_SEARCH":    1002,
		"FOWNER":             1003,
		"FSETID":             1004,
		"KILL":               1005,
		"SETGID":             1006,
		"SETUID":             1007,
		"SETPCAP":            1008,
		"LINUX_IMMUTABLE":    1009,
		"NET_BIND_SERVICE":   1010,
		"NET_BROADCAST":      1011,
		"NET_ADMIN":          1012,
		"NET_RAW":            1013,
		"IPC_LOCK":           1014,
		"IPC_OWNER":          1015,
		"SYS_MODULE":         1016,
		"SYS_RAWIO":          1017,
		"SYS_CHROOT":         1018,
		"SYS_PTRACE":         1019,
		"SYS_PACCT":          1020,
		"SYS_ADMIN":          1021,
		"SYS_BOOT":           1022,
		"SYS_NICE":           1023,
		"SYS_RESOURCE":       1024,
		"SYS_TIME":           1025,
		"SYS_TTY_CONFIG":     1026,
		"MKNOD":              1027,
		"LEASE":              1028,
		"AUDIT_WRITE":        1029,
		"AUDIT_CONTROL":      1030,
		"SETFCAP":            1031,
		"MAC_OVERRIDE":       1032,
		"MAC_ADMIN":          1033,
		"SYSLOG":             1034,
		"WAKE_ALARM":         1035,
		"BLOCK_SUSPEND":      1036,
		"AUDIT_READ":         1037,
		"PERFMON":            1038,
		"BPF":                1039,
		"CHECKPOINT_RESTORE": 1040,
	}
)

func (x CapabilityInfo_Capability) Enum() *CapabilityInfo_Capability {
	p := new(CapabilityInfo_Capability)
	*p = x
	return p
}

func (x CapabilityInfo_Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilityInfo_Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[27].Descriptor()
}

func (CapabilityInfo_Capability) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[27]
}

func (x CapabilityInfo_Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CapabilityInfo_Capability) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CapabilityInfo_Capability(num)
	return nil
}

// Deprecated: Use CapabilityInfo_Capability.Descriptor instead.
func (CapabilityInfo_Capability) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{67, 0}
}

type LinuxInfo_IpcMode int32

const (
	LinuxInfo_UNKNOWN LinuxInfo_IpcMode = 0
	// The container will have its own IPC namespace and /dev/shm, with a
	// possibility to share them with its child containers.
	LinuxInfo_PRIVATE LinuxInfo_IpcMode = 1
	// The container will share the IPC namespace and /dev/shm from its
	// parent. If the container is a top level container, it will share
	// the IPC namespace and /dev/shm from the agent host, if the container
	// is a nested container, it will share the IPC namespace and /dev/shm
	// from its parent container. The implication is if a nested container
	// wants to share the IPC namespace and /dev/shm from the agent host,
	// its parent container has to do it first.
	LinuxInfo_SHARE_PARENT LinuxInfo_IpcMode = 2
)

// Enum value maps for LinuxInfo_IpcMode.
var (
	LinuxInfo_IpcMode_name = map[int32]string{
		0: "UNKNOWN",
		1: "PRIVATE",
		2: "SHARE_PARENT",
	}
	LinuxInfo_IpcMode_value = map[string]int32{
		"UNKNOWN":      0,
		"PRIVATE":      1,
		"SHARE_PARENT": 2,
	}
)

func (x LinuxInfo_IpcMode) Enum() *LinuxInfo_IpcMode {
	p := new(LinuxInfo_IpcMode)
	*p = x
	return p
}

func (x LinuxInfo_IpcMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinuxInfo_IpcMode) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[28].Descriptor()
}

func (LinuxInfo_IpcMode) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[28]
}

func (x LinuxInfo_IpcMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LinuxInfo_IpcMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LinuxInfo_IpcMode(num)
	return nil
}

// Deprecated: Use LinuxInfo_IpcMode.Descriptor instead.
func (LinuxInfo_IpcMode) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{69, 0}
}

type RLimitInfo_RLimit_Type int32

const (
	RLimitInfo_RLimit_UNKNOWN         RLimitInfo_RLimit_Type = 0
	RLimitInfo_RLimit_RLMT_AS         RLimitInfo_RLimit_Type = 1
	RLimitInfo_RLimit_RLMT_CORE       RLimitInfo_RLimit_Type = 2
	RLimitInfo_RLimit_RLMT_CPU        RLimitInfo_RLimit_Type = 3
	RLimitInfo_RLimit_RLMT_DATA       RLimitInfo_RLimit_Type = 4
	RLimitInfo_RLimit_RLMT_FSIZE      RLimitInfo_RLimit_Type = 5
	RLimitInfo_RLimit_RLMT_LOCKS      RLimitInfo_RLimit_Type = 6
	RLimitInfo_RLimit_RLMT_MEMLOCK    RLimitInfo_RLimit_Type = 7
	RLimitInfo_RLimit_RLMT_MSGQUEUE   RLimitInfo_RLimit_Type = 8
	RLimitInfo_RLimit_RLMT_NICE       RLimitInfo_RLimit_Type = 9
	RLimitInfo_RLimit_RLMT_NOFILE     RLimitInfo_RLimit_Type = 10
	RLimitInfo_RLimit_RLMT_NPROC      RLimitInfo_RLimit_Type = 11
	RLimitInfo_RLimit_RLMT_RSS        RLimitInfo_RLimit_Type = 12
	RLimitInfo_RLimit_RLMT_RTPRIO     RLimitInfo_RLimit_Type = 13
	RLimitInfo_RLimit_RLMT_RTTIME     RLimitInfo_RLimit_Type = 14
	RLimitInfo_RLimit_RLMT_SIGPENDING RLimitInfo_RLimit_Type = 15
	RLimitInfo_RLimit_RLMT_STACK      RLimitInfo_RLimit_Type = 16
)

// Enum value maps for RLimitInfo_RLimit_Type.
var (
	RLimitInfo_RLimit_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "RLMT_AS",
		2:  "RLMT_CORE",
		3:  "RLMT_CPU",
		4:  "RLMT_DATA",
		5:  "RLMT_FSIZE",
		6:  "RLMT_LOCKS",
		7:  "RLMT_MEMLOCK",
		8:  "RLMT_MSGQUEUE",
		9:  "RLMT_NICE",
		10: "RLMT_NOFILE",
		11: "RLMT_NPROC",
		12: "RLMT_RSS",
		13: "RLMT_RTPRIO",
		14: "RLMT_RTTIME",
		15: "RLMT_SIGPENDING",
		16: "RLMT_STACK",
	}
	RLimitInfo_RLimit_Type_value = map[string]int32{
		"UNKNOWN":         0,
		"RLMT_AS":         1,
		"RLMT_CORE":       2,
		"RLMT_CPU":        3,
		"RLMT_DATA":       4,
		"RLMT_FSIZE":      5,
		"RLMT_LOCKS":      6,
		"RLMT_MEMLOCK":    7,
		"RLMT_MSGQUEUE":   8,
		"RLMT_NICE":       9,
		"RLMT_NOFILE":     10,
		"RLMT_NPROC":      11,
		"RLMT_RSS":        12,
		"RLMT_RTPRIO":     13,
		"RLMT_RTTIME":     14,
		"RLMT_SIGPENDING": 15,
		"RLMT_STACK":      16,
	}
)

func (x RLimitInfo_RLimit_Type) Enum() *RLimitInfo_RLimit_Type {
	p := new(RLimitInfo_RLimit_Type)
	*p = x
	return p
}

func (x RLimitInfo_RLimit_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RLimitInfo_RLimit_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[29].Descriptor()
}

func (RLimitInfo_RLimit_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[29]
}

func (x RLimitInfo_RLimit_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RLimitInfo_RLimit_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RLimitInfo_RLimit_Type(num)
	return nil
}

// Deprecated: Use RLimitInfo_RLimit_Type.Descriptor instead.
func (RLimitInfo_RLimit_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{70, 0, 0}
}

// All container implementation types.
// For each type there should be a field in the ContainerInfo itself
// with exactly matching name in lowercase.
type ContainerInfo_Type int32

const (
	ContainerInfo_DOCKER ContainerInfo_Type = 1
	ContainerInfo_MESOS  ContainerInfo_Type = 2
)

// Enum value maps for ContainerInfo_Type.
var (
	ContainerInfo_Type_name = map[int32]string{
		1: "DOCKER",
		2: "MESOS",
	}
	ContainerInfo_Type_value = map[string]int32{
		"DOCKER": 1,
		"MESOS":  2,
	}
)

func (x ContainerInfo_Type) Enum() *ContainerInfo_Type {
	p := new(ContainerInfo_Type)
	*p = x
	return p
}

func (x ContainerInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[30].Descriptor()
}

func (ContainerInfo_Type) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[30]
}

func (x ContainerInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerInfo_Type(num)
	return nil
}

// Deprecated: Use ContainerInfo_Type.Descriptor instead.
func (ContainerInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{72, 0}
}

// Network options.
type ContainerInfo_DockerInfo_Network int32

const (
	ContainerInfo_DockerInfo_HOST   ContainerInfo_DockerInfo_Network = 1
	ContainerInfo_DockerInfo_BRIDGE ContainerInfo_DockerInfo_Network = 2
	ContainerInfo_DockerInfo_NONE   ContainerInfo_DockerInfo_Network = 3
	ContainerInfo_DockerInfo_USER   ContainerInfo_DockerInfo_Network = 4
)

// Enum value maps for ContainerInfo_DockerInfo_Network.
var (
	ContainerInfo_DockerInfo_Network_name = map[int32]string{
		1: "HOST",
		2: "BRIDGE",
		3: "NONE",
		4: "USER",
	}
	ContainerInfo_DockerInfo_Network_value = map[string]int32{
		"HOST":   1,
		"BRIDGE": 2,
		"NONE":   3,
		"USER":   4,
	}
)

func (x ContainerInfo_DockerInfo_Network) Enum() *ContainerInfo_DockerInfo_Network {
	p := new(ContainerInfo_DockerInfo_Network)
	*p = x
	return p
}

func (x ContainerInfo_DockerInfo_Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerInfo_DockerInfo_Network) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[31].Descriptor()
}

func (ContainerInfo_DockerInfo_Network) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[31]
}

func (x ContainerInfo_DockerInfo_Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContainerInfo_DockerInfo_Network) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContainerInfo_DockerInfo_Network(num)
	return nil
}

// Deprecated: Use ContainerInfo_DockerInfo_Network.Descriptor instead.
func (ContainerInfo_DockerInfo_Network) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{72, 0, 0}
}

type CgroupInfo_Blkio_Operation int32

const (
	CgroupInfo_Blkio_UNKNOWN CgroupInfo_Blkio_Operation = 0
	CgroupInfo_Blkio_TOTAL   CgroupInfo_Blkio_Operation = 1
	CgroupInfo_Blkio_READ    CgroupInfo_Blkio_Operation = 2
	CgroupInfo_Blkio_WRITE   CgroupInfo_Blkio_Operation = 3
	CgroupInfo_Blkio_SYNC    CgroupInfo_Blkio_Operation = 4
	CgroupInfo_Blkio_ASYNC   CgroupInfo_Blkio_Operation = 5
	CgroupInfo_Blkio_DISCARD CgroupInfo_Blkio_Operation = 6
)

// Enum value maps for CgroupInfo_Blkio_Operation.
var (
	CgroupInfo_Blkio_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "TOTAL",
		2: "READ",
		3: "WRITE",
		4: "SYNC",
		5: "ASYNC",
		6: "DISCARD",
	}
	CgroupInfo_Blkio_Operation_value = map[string]int32{
		"UNKNOWN": 0,
		"TOTAL":   1,
		"READ":    2,
		"WRITE":   3,
		"SYNC":    4,
		"ASYNC":   5,
		"DISCARD": 6,
	}
)

func (x CgroupInfo_Blkio_Operation) Enum() *CgroupInfo_Blkio_Operation {
	p := new(CgroupInfo_Blkio_Operation)
	*p = x
	return p
}

func (x CgroupInfo_Blkio_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CgroupInfo_Blkio_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[32].Descriptor()
}

func (CgroupInfo_Blkio_Operation) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[32]
}

func (x CgroupInfo_Blkio_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CgroupInfo_Blkio_Operation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CgroupInfo_Blkio_Operation(num)
	return nil
}

// Deprecated: Use CgroupInfo_Blkio_Operation.Descriptor instead.
func (CgroupInfo_Blkio_Operation) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 0}
}

type DiscoveryInfo_Visibility int32

const (
	DiscoveryInfo_FRAMEWORK DiscoveryInfo_Visibility = 0
	DiscoveryInfo_CLUSTER   DiscoveryInfo_Visibility = 1
	DiscoveryInfo_EXTERNAL  DiscoveryInfo_Visibility = 2
)

// Enum value maps for DiscoveryInfo_Visibility.
var (
	DiscoveryInfo_Visibility_name = map[int32]string{
		0: "FRAMEWORK",
		1: "CLUSTER",
		2: "EXTERNAL",
	}
	DiscoveryInfo_Visibility_value = map[string]int32{
		"FRAMEWORK": 0,
		"CLUSTER":   1,
		"EXTERNAL":  2,
	}
)

func (x DiscoveryInfo_Visibility) Enum() *DiscoveryInfo_Visibility {
	p := new(DiscoveryInfo_Visibility)
	*p = x
	return p
}

func (x DiscoveryInfo_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscoveryInfo_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_mesos_proto_enumTypes[33].Descriptor()
}

func (DiscoveryInfo_Visibility) Type() protoreflect.EnumType {
	return &file_mesos_proto_enumTypes[33]
}

func (x DiscoveryInfo_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DiscoveryInfo_Visibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DiscoveryInfo_Visibility(num)
	return nil
}

// Deprecated: Use DiscoveryInfo_Visibility.Descriptor instead.
func (DiscoveryInfo_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{79, 0}
}

// *
// A unique ID assigned to a framework. A framework can reuse this ID
// in order to do failover (see MesosSchedulerDriver).
type FrameworkID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *FrameworkID) Reset() {
	*x = FrameworkID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkID) ProtoMessage() {}

func (x *FrameworkID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkID.ProtoReflect.Descriptor instead.
func (*FrameworkID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{0}
}

func (x *FrameworkID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// A unique ID assigned to an offer.
type OfferID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *OfferID) Reset() {
	*x = OfferID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferID) ProtoMessage() {}

func (x *OfferID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferID.ProtoReflect.Descriptor instead.
func (*OfferID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{1}
}

func (x *OfferID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// A unique ID assigned to an agent. Currently, an agent gets a new ID
// whenever it (re)registers with Mesos. Framework writers shouldn't
// assume any binding between an agent ID and and a hostname.
type AgentID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *AgentID) Reset() {
	*x = AgentID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentID) ProtoMessage() {}

func (x *AgentID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentID.ProtoReflect.Descriptor instead.
func (*AgentID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{2}
}

func (x *AgentID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// A framework-generated ID to distinguish a task. The ID must remain
// unique while the task is active. A framework can reuse an ID _only_
// if the previous task with the same ID has reached a terminal state
// (e.g., TASK_FINISHED, TASK_KILLED, etc.). However, reusing task IDs
// is strongly discouraged (MESOS-2198).
type TaskID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *TaskID) Reset() {
	*x = TaskID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskID) ProtoMessage() {}

func (x *TaskID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskID.ProtoReflect.Descriptor instead.
func (*TaskID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{3}
}

func (x *TaskID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// A framework-generated ID to distinguish an executor. Only one
// executor with the same ID can be active on the same agent at a
// time. However, reusing executor IDs is discouraged.
type ExecutorID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *ExecutorID) Reset() {
	*x = ExecutorID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorID) ProtoMessage() {}

func (x *ExecutorID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorID.ProtoReflect.Descriptor instead.
func (*ExecutorID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{4}
}

func (x *ExecutorID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// ID used to uniquely identify a container. If the `parent` is not
// specified, the ID is a UUID generated by the agent to uniquely
// identify the container of an executor run. If the `parent` field is
// specified, it represents a nested container.
type ContainerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value  *string      `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Parent *ContainerID `protobuf:"bytes,2,opt,name=parent" json:"parent,omitempty"`
}

func (x *ContainerID) Reset() {
	*x = ContainerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerID) ProtoMessage() {}

func (x *ContainerID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerID.ProtoReflect.Descriptor instead.
func (*ContainerID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ContainerID) GetParent() *ContainerID {
	if x != nil {
		return x.Parent
	}
	return nil
}

// *
// A unique ID assigned to a resource provider. Currently, a resource
// provider gets a new ID whenever it (re)registers with Mesos.
type ResourceProviderID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *ResourceProviderID) Reset() {
	*x = ResourceProviderID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceProviderID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceProviderID) ProtoMessage() {}

func (x *ResourceProviderID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceProviderID.ProtoReflect.Descriptor instead.
func (*ResourceProviderID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceProviderID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// A framework-generated ID to distinguish an operation. The ID
// must be unique within the framework.
type OperationID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *OperationID) Reset() {
	*x = OperationID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationID) ProtoMessage() {}

func (x *OperationID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationID.ProtoReflect.Descriptor instead.
func (*OperationID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{7}
}

func (x *OperationID) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// Represents time since the epoch, in nanoseconds.
type TimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nanoseconds *int64 `protobuf:"varint,1,req,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (x *TimeInfo) Reset() {
	*x = TimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInfo) ProtoMessage() {}

func (x *TimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInfo.ProtoReflect.Descriptor instead.
func (*TimeInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{8}
}

func (x *TimeInfo) GetNanoseconds() int64 {
	if x != nil && x.Nanoseconds != nil {
		return *x.Nanoseconds
	}
	return 0
}

// *
// Represents duration in nanoseconds.
type DurationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nanoseconds *int64 `protobuf:"varint,1,req,name=nanoseconds" json:"nanoseconds,omitempty"`
}

func (x *DurationInfo) Reset() {
	*x = DurationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationInfo) ProtoMessage() {}

func (x *DurationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationInfo.ProtoReflect.Descriptor instead.
func (*DurationInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{9}
}

func (x *DurationInfo) GetNanoseconds() int64 {
	if x != nil && x.Nanoseconds != nil {
		return *x.Nanoseconds
	}
	return 0
}

// *
// A network address.
//
// TODO(bmahler): Use this more widely.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// May contain a hostname, IP address, or both.
	Hostname *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip       *string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port     *int32  `protobuf:"varint,3,req,name=port" json:"port,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{10}
}

func (x *Address) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *Address) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Address) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

// *
// Represents a URL.
type URL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme   *string      `protobuf:"bytes,1,req,name=scheme" json:"scheme,omitempty"`
	Address  *Address     `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	Path     *string      `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
	Query    []*Parameter `protobuf:"bytes,4,rep,name=query" json:"query,omitempty"`
	Fragment *string      `protobuf:"bytes,5,opt,name=fragment" json:"fragment,omitempty"`
}

func (x *URL) Reset() {
	*x = URL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*URL) ProtoMessage() {}

func (x *URL) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use URL.ProtoReflect.Descriptor instead.
func (*URL) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{11}
}

func (x *URL) GetScheme() string {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return ""
}

func (x *URL) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *URL) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *URL) GetQuery() []*Parameter {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *URL) GetFragment() string {
	if x != nil && x.Fragment != nil {
		return *x.Fragment
	}
	return ""
}

// *
// Represents an interval, from a given start time over a given duration.
// This interval pertains to an unavailability event, such as maintenance,
// and is not a generic interval.
type Unavailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *TimeInfo `protobuf:"bytes,1,req,name=start" json:"start,omitempty"`
	// When added to `start`, this represents the end of the interval.
	// If unspecified, the duration is assumed to be infinite.
	Duration *DurationInfo `protobuf:"bytes,2,opt,name=duration" json:"duration,omitempty"`
}

func (x *Unavailability) Reset() {
	*x = Unavailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unavailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unavailability) ProtoMessage() {}

func (x *Unavailability) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unavailability.ProtoReflect.Descriptor instead.
func (*Unavailability) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{12}
}

func (x *Unavailability) GetStart() *TimeInfo {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Unavailability) GetDuration() *DurationInfo {
	if x != nil {
		return x.Duration
	}
	return nil
}

// *
// Represents a single machine, which may hold one or more agents.
//
// NOTE: In order to match an agent to a machine, both the `hostname` and
// `ip` must match the values advertised by the agent to the master.
// Hostname is not case-sensitive.
type MachineID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname *string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Ip       *string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
}

func (x *MachineID) Reset() {
	*x = MachineID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineID) ProtoMessage() {}

func (x *MachineID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineID.ProtoReflect.Descriptor instead.
func (*MachineID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{13}
}

func (x *MachineID) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *MachineID) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

// *
// Holds information about a single machine, its `mode`, and any other
// relevant information which may affect the behavior of the machine.
type MachineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *MachineID        `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Mode *MachineInfo_Mode `protobuf:"varint,2,opt,name=mode,enum=mesos.v1.MachineInfo_Mode" json:"mode,omitempty"`
	// Signifies that the machine may be unavailable during the given interval.
	// See comments in `Unavailability` and for the `unavailability` fields
	// in `Offer` and `InverseOffer` for more information.
	Unavailability *Unavailability `protobuf:"bytes,3,opt,name=unavailability" json:"unavailability,omitempty"`
}

func (x *MachineInfo) Reset() {
	*x = MachineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineInfo) ProtoMessage() {}

func (x *MachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineInfo.ProtoReflect.Descriptor instead.
func (*MachineInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{14}
}

func (x *MachineInfo) GetId() *MachineID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MachineInfo) GetMode() MachineInfo_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return MachineInfo_UP
}

func (x *MachineInfo) GetUnavailability() *Unavailability {
	if x != nil {
		return x.Unavailability
	}
	return nil
}

// *
// Describes a framework.
type FrameworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used to determine the Unix user that an executor or task should be
	// launched as.
	//
	// When using the MesosSchedulerDriver, if the field is set to an
	// empty string, it will automagically set it to the current user.
	//
	// When using the HTTP Scheduler API, the user has to be set
	// explicitly.
	User *string `protobuf:"bytes,1,req,name=user" json:"user,omitempty"`
	// Name of the framework that shows up in the Mesos Web UI.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Used to uniquely identify the framework.
	//
	// This field must be unset when the framework subscribes for the
	// first time upon which the master will assign a new ID. To
	// resubscribe after scheduler failover the framework should set
	// 'id' to the ID assigned by the master.  Setting 'id' to values
	// not assigned by Mesos masters is unsupported.
	Id *FrameworkID `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// The amount of time (in seconds) that the master will wait for the
	// scheduler to failover before it tears down the framework by
	// killing all its tasks/executors. This should be non-zero if a
	// framework expects to reconnect after a failure and not lose its
	// tasks/executors.
	//
	// NOTE: To avoid accidental destruction of tasks, production
	// frameworks typically set this to a large value (e.g., 1 week).
	FailoverTimeout *float64 `protobuf:"fixed64,4,opt,name=failover_timeout,json=failoverTimeout,def=0" json:"failover_timeout,omitempty"`
	// If set, agents running tasks started by this framework will write
	// the framework pid, executor pids and status updates to disk. If
	// the agent exits (e.g., due to a crash or as part of upgrading
	// Mesos), this checkpointed data allows the restarted agent to
	// reconnect to executors that were started by the old instance of
	// the agent. Enabling checkpointing improves fault tolerance, at
	// the cost of a (usually small) increase in disk I/O.
	Checkpoint *bool `protobuf:"varint,5,opt,name=checkpoint,def=0" json:"checkpoint,omitempty"`
	// Roles are the entities to which allocations are made.
	// The framework must have at least one role in order to
	// be offered resources. Note that `role` is deprecated
	// in favor of `roles` and only one of these fields must
	// be used. Since we cannot distinguish between empty
	// `roles` and the default unset `role`, we require that
	// frameworks set the `MULTI_ROLE` capability if
	// setting the `roles` field.
	//
	// Deprecated: Marked as deprecated in mesos.proto.
	Role  *string  `protobuf:"bytes,6,opt,name=role,def=*" json:"role,omitempty"`
	Roles []string `protobuf:"bytes,12,rep,name=roles" json:"roles,omitempty"`
	// Used to indicate the current host from which the scheduler is
	// registered in the Mesos Web UI. If set to an empty string Mesos
	// will automagically set it to the current hostname if one is
	// available.
	Hostname *string `protobuf:"bytes,7,opt,name=hostname" json:"hostname,omitempty"`
	// This field should match the credential's principal the framework
	// uses for authentication. This field is used for framework API
	// rate limiting and dynamic reservations. It should be set even
	// if authentication is not enabled if these features are desired.
	Principal *string `protobuf:"bytes,8,opt,name=principal" json:"principal,omitempty"`
	// This field allows a framework to advertise its web UI, so that
	// the Mesos web UI can link to it. It is expected to be a full URL,
	// for example http://my-scheduler.example.com:8080/.
	WebuiUrl *string `protobuf:"bytes,9,opt,name=webui_url,json=webuiUrl" json:"webui_url,omitempty"`
	// This field allows a framework to advertise its set of
	// capabilities (e.g., ability to receive offers for revocable
	// resources).
	Capabilities []*FrameworkInfo_Capability `protobuf:"bytes,10,rep,name=capabilities" json:"capabilities,omitempty"`
	// Labels are free-form key value pairs supplied by the framework
	// scheduler (e.g., to describe additional functionality offered by
	// the framework). These labels are not interpreted by Mesos itself.
	// Labels should not contain duplicate key-value pairs.
	Labels *Labels `protobuf:"bytes,11,opt,name=labels" json:"labels,omitempty"`
	// Specifc resource requirements for each of the framework's roles. This field
	// is used by e.g., the default allocator to decide whether a framework is
	// interested in seeing a resource of a certain shape.
	OfferFilters map[string]*OfferFilters `protobuf:"bytes,13,rep,name=offer_filters,json=offerFilters" json:"offer_filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Default values for FrameworkInfo fields.
const (
	Default_FrameworkInfo_FailoverTimeout = float64(0)
	Default_FrameworkInfo_Checkpoint      = bool(false)
	Default_FrameworkInfo_Role            = string("*")
)

func (x *FrameworkInfo) Reset() {
	*x = FrameworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkInfo) ProtoMessage() {}

func (x *FrameworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkInfo.ProtoReflect.Descriptor instead.
func (*FrameworkInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{15}
}

func (x *FrameworkInfo) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *FrameworkInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FrameworkInfo) GetId() *FrameworkID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FrameworkInfo) GetFailoverTimeout() float64 {
	if x != nil && x.FailoverTimeout != nil {
		return *x.FailoverTimeout
	}
	return Default_FrameworkInfo_FailoverTimeout
}

func (x *FrameworkInfo) GetCheckpoint() bool {
	if x != nil && x.Checkpoint != nil {
		return *x.Checkpoint
	}
	return Default_FrameworkInfo_Checkpoint
}

// Deprecated: Marked as deprecated in mesos.proto.
func (x *FrameworkInfo) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Default_FrameworkInfo_Role
}

func (x *FrameworkInfo) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *FrameworkInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *FrameworkInfo) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

func (x *FrameworkInfo) GetWebuiUrl() string {
	if x != nil && x.WebuiUrl != nil {
		return *x.WebuiUrl
	}
	return ""
}

func (x *FrameworkInfo) GetCapabilities() []*FrameworkInfo_Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *FrameworkInfo) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FrameworkInfo) GetOfferFilters() map[string]*OfferFilters {
	if x != nil {
		return x.OfferFilters
	}
	return nil
}

// *
// Describes a general non-interpreting non-killing check for a task or
// executor (or any arbitrary process/command). A type is picked by
// specifying one of the optional fields. Specifying more than one type
// is an error.
//
// NOTE: This API is subject to change and the related feature is experimental.
type CheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the check.
	Type *CheckInfo_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.CheckInfo_Type" json:"type,omitempty"`
	// Command check.
	Command *CheckInfo_Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	// HTTP check.
	Http *CheckInfo_Http `protobuf:"bytes,3,opt,name=http" json:"http,omitempty"`
	// TCP check.
	Tcp *CheckInfo_Tcp `protobuf:"bytes,7,opt,name=tcp" json:"tcp,omitempty"`
	// Amount of time to wait to start checking the task after it
	// transitions to `TASK_RUNNING` or `TASK_STARTING` if the latter
	// is used by the executor.
	DelaySeconds *float64 `protobuf:"fixed64,4,opt,name=delay_seconds,json=delaySeconds,def=15" json:"delay_seconds,omitempty"`
	// Interval between check attempts, i.e., amount of time to wait after
	// the previous check finished or timed out to start the next check.
	IntervalSeconds *float64 `protobuf:"fixed64,5,opt,name=interval_seconds,json=intervalSeconds,def=10" json:"interval_seconds,omitempty"`
	// Amount of time to wait for the check to complete. Zero means infinite
	// timeout.
	//
	// After this timeout, the check attempt is aborted and no result is
	// reported. Note that this may be considered a state change and hence
	// may trigger a check status change delivery to the corresponding
	// scheduler. See `CheckStatusInfo` for more details.
	TimeoutSeconds *float64 `protobuf:"fixed64,6,opt,name=timeout_seconds,json=timeoutSeconds,def=20" json:"timeout_seconds,omitempty"`
}

// Default values for CheckInfo fields.
const (
	Default_CheckInfo_DelaySeconds    = float64(15)
	Default_CheckInfo_IntervalSeconds = float64(10)
	Default_CheckInfo_TimeoutSeconds  = float64(20)
)

func (x *CheckInfo) Reset() {
	*x = CheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInfo) ProtoMessage() {}

func (x *CheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInfo.ProtoReflect.Descriptor instead.
func (*CheckInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{16}
}

func (x *CheckInfo) GetType() CheckInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CheckInfo_UNKNOWN
}

func (x *CheckInfo) GetCommand() *CheckInfo_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CheckInfo) GetHttp() *CheckInfo_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *CheckInfo) GetTcp() *CheckInfo_Tcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *CheckInfo) GetDelaySeconds() float64 {
	if x != nil && x.DelaySeconds != nil {
		return *x.DelaySeconds
	}
	return Default_CheckInfo_DelaySeconds
}

func (x *CheckInfo) GetIntervalSeconds() float64 {
	if x != nil && x.IntervalSeconds != nil {
		return *x.IntervalSeconds
	}
	return Default_CheckInfo_IntervalSeconds
}

func (x *CheckInfo) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return Default_CheckInfo_TimeoutSeconds
}

// *
// Describes a health check for a task or executor (or any arbitrary
// process/command). A type is picked by specifying one of the
// optional fields. Specifying more than one type is an error.
type HealthCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of time to wait to start health checking the task after it
	// transitions to `TASK_RUNNING` or `TASK_STATING` if the latter is
	// used by the executor.
	DelaySeconds *float64 `protobuf:"fixed64,2,opt,name=delay_seconds,json=delaySeconds,def=15" json:"delay_seconds,omitempty"`
	// Interval between health checks, i.e., amount of time to wait after
	// the previous health check finished or timed out to start the next
	// health check.
	IntervalSeconds *float64 `protobuf:"fixed64,3,opt,name=interval_seconds,json=intervalSeconds,def=10" json:"interval_seconds,omitempty"`
	// Amount of time to wait for the health check to complete. After this
	// timeout, the health check is aborted and treated as a failure. Zero
	// means infinite timeout.
	TimeoutSeconds *float64 `protobuf:"fixed64,4,opt,name=timeout_seconds,json=timeoutSeconds,def=20" json:"timeout_seconds,omitempty"`
	// Number of consecutive failures until the task is killed by the executor.
	ConsecutiveFailures *uint32 `protobuf:"varint,5,opt,name=consecutive_failures,json=consecutiveFailures,def=3" json:"consecutive_failures,omitempty"`
	// Amount of time after the task is launched during which health check
	// failures are ignored. Once a check succeeds for the first time,
	// the grace period does not apply anymore. Note that it includes
	// `delay_seconds`, i.e., setting `grace_period_seconds` < `delay_seconds`
	// has no effect.
	GracePeriodSeconds *float64 `protobuf:"fixed64,6,opt,name=grace_period_seconds,json=gracePeriodSeconds,def=10" json:"grace_period_seconds,omitempty"`
	// The type of health check.
	Type *HealthCheck_Type `protobuf:"varint,8,opt,name=type,enum=mesos.v1.HealthCheck_Type" json:"type,omitempty"`
	// Command health check.
	Command *CommandInfo `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	// HTTP health check.
	Http *HealthCheck_HTTPCheckInfo `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
	// TCP health check.
	Tcp *HealthCheck_TCPCheckInfo `protobuf:"bytes,9,opt,name=tcp" json:"tcp,omitempty"`
}

// Default values for HealthCheck fields.
const (
	Default_HealthCheck_DelaySeconds        = float64(15)
	Default_HealthCheck_IntervalSeconds     = float64(10)
	Default_HealthCheck_TimeoutSeconds      = float64(20)
	Default_HealthCheck_ConsecutiveFailures = uint32(3)
	Default_HealthCheck_GracePeriodSeconds  = float64(10)
)

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{17}
}

func (x *HealthCheck) GetDelaySeconds() float64 {
	if x != nil && x.DelaySeconds != nil {
		return *x.DelaySeconds
	}
	return Default_HealthCheck_DelaySeconds
}

func (x *HealthCheck) GetIntervalSeconds() float64 {
	if x != nil && x.IntervalSeconds != nil {
		return *x.IntervalSeconds
	}
	return Default_HealthCheck_IntervalSeconds
}

func (x *HealthCheck) GetTimeoutSeconds() float64 {
	if x != nil && x.TimeoutSeconds != nil {
		return *x.TimeoutSeconds
	}
	return Default_HealthCheck_TimeoutSeconds
}

func (x *HealthCheck) GetConsecutiveFailures() uint32 {
	if x != nil && x.ConsecutiveFailures != nil {
		return *x.ConsecutiveFailures
	}
	return Default_HealthCheck_ConsecutiveFailures
}

func (x *HealthCheck) GetGracePeriodSeconds() float64 {
	if x != nil && x.GracePeriodSeconds != nil {
		return *x.GracePeriodSeconds
	}
	return Default_HealthCheck_GracePeriodSeconds
}

func (x *HealthCheck) GetType() HealthCheck_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HealthCheck_UNKNOWN
}

func (x *HealthCheck) GetCommand() *CommandInfo {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *HealthCheck) GetHttp() *HealthCheck_HTTPCheckInfo {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *HealthCheck) GetTcp() *HealthCheck_TCPCheckInfo {
	if x != nil {
		return x.Tcp
	}
	return nil
}

// *
// Describes a kill policy for a task. Currently does not express
// different policies (e.g. hitting HTTP endpoints), only controls
// how long to wait between graceful and forcible task kill:
//
//	graceful kill --------------> forcible kill
//	               grace_period
//
// Kill policies are best-effort, because machine failures / forcible
// terminations may occur.
//
// NOTE: For executor-less command-based tasks, the kill is performed
// via sending a signal to the task process: SIGTERM for the graceful
// kill and SIGKILL for the forcible kill. For the docker executor-less
// tasks the grace period is passed to 'docker stop --time'.
type KillPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The grace period specifies how long to wait before forcibly
	// killing the task. It is recommended to attempt to gracefully
	// kill the task (and send TASK_KILLING) to indicate that the
	// graceful kill is in progress. Once the grace period elapses,
	// if the task has not terminated, a forcible kill should occur.
	// The task should not assume that it will always be allotted
	// the full grace period. For example, the executor may be
	// shutdown more quickly by the agent, or failures / forcible
	// terminations may occur.
	GracePeriod *DurationInfo `protobuf:"bytes,1,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
}

func (x *KillPolicy) Reset() {
	*x = KillPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillPolicy) ProtoMessage() {}

func (x *KillPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillPolicy.ProtoReflect.Descriptor instead.
func (*KillPolicy) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{18}
}

func (x *KillPolicy) GetGracePeriod() *DurationInfo {
	if x != nil {
		return x.GracePeriod
	}
	return nil
}

// *
// Describes a command, executed via: '/bin/sh -c value'. Any URIs specified
// are fetched before executing the command.  If the executable field for an
// uri is set, executable file permission is set on the downloaded file.
// Otherwise, if the downloaded file has a recognized archive extension
// (currently [compressed] tar and zip) it is extracted into the executor's
// working directory. This extraction can be disabled by setting `extract` to
// false. In addition, any environment variables are set before executing
// the command (so they can be used to "parameterize" your command).
type CommandInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uris        []*CommandInfo_URI `protobuf:"bytes,1,rep,name=uris" json:"uris,omitempty"`
	Environment *Environment       `protobuf:"bytes,2,opt,name=environment" json:"environment,omitempty"`
	// There are two ways to specify the command:
	//  1. If 'shell == true', the command will be launched via shell
	//     (i.e., /bin/sh -c 'value'). The 'value' specified will be
	//     treated as the shell command. The 'arguments' will be ignored.
	//  2. If 'shell == false', the command will be launched by passing
	//     arguments to an executable. The 'value' specified will be
	//     treated as the filename of the executable. The 'arguments'
	//     will be treated as the arguments to the executable. This is
	//     similar to how POSIX exec families launch processes (i.e.,
	//     execlp(value, arguments(0), arguments(1), ...)).
	//
	// NOTE: The field 'value' is changed from 'required' to 'optional'
	// in 0.20.0. It will only cause issues if a new framework is
	// connecting to an old master.
	Shell     *bool    `protobuf:"varint,6,opt,name=shell,def=1" json:"shell,omitempty"`
	Value     *string  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Arguments []string `protobuf:"bytes,7,rep,name=arguments" json:"arguments,omitempty"`
	// Enables executor and tasks to run as a specific user. If the user
	// field is present both in FrameworkInfo and here, the CommandInfo
	// user value takes precedence.
	User *string `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
}

// Default values for CommandInfo fields.
const (
	Default_CommandInfo_Shell = bool(true)
)

func (x *CommandInfo) Reset() {
	*x = CommandInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInfo) ProtoMessage() {}

func (x *CommandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInfo.ProtoReflect.Descriptor instead.
func (*CommandInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{19}
}

func (x *CommandInfo) GetUris() []*CommandInfo_URI {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *CommandInfo) GetEnvironment() *Environment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *CommandInfo) GetShell() bool {
	if x != nil && x.Shell != nil {
		return *x.Shell
	}
	return Default_CommandInfo_Shell
}

func (x *CommandInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CommandInfo) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *CommandInfo) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

// *
// Describes information about an executor.
type ExecutorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For backwards compatibility, if this field is not set when using `LAUNCH`
	// operation, Mesos will infer the type by checking if `command` is set
	// (`CUSTOM`) or unset (`DEFAULT`). `type` must be set when using
	// `LAUNCH_GROUP` operation.
	//
	// TODO(vinod): Add support for explicitly setting `type` to `DEFAULT` in
	// `LAUNCH` operation.
	Type        *ExecutorInfo_Type `protobuf:"varint,15,opt,name=type,enum=mesos.v1.ExecutorInfo_Type" json:"type,omitempty"`
	ExecutorId  *ExecutorID        `protobuf:"bytes,1,req,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	FrameworkId *FrameworkID       `protobuf:"bytes,8,opt,name=framework_id,json=frameworkId" json:"framework_id,omitempty"` // TODO(benh): Make this required.
	Command     *CommandInfo       `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	// Executor provided with a container will launch the container
	// with the executor's CommandInfo and we expect the container to
	// act as a Mesos executor.
	Container *ContainerInfo `protobuf:"bytes,11,opt,name=container" json:"container,omitempty"`
	Resources []*Resource    `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
	Name      *string        `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	// 'source' is an identifier style string used by frameworks to
	// track the source of an executor. This is useful when it's
	// possible for different executor ids to be related semantically.
	//
	// NOTE: 'source' is exposed alongside the resource usage of the
	// executor via JSON on the agent. This allows users to import usage
	// information into a time series database for monitoring.
	//
	// This field is deprecated since 1.0. Please use labels for
	// free-form metadata instead.
	//
	// Deprecated: Marked as deprecated in mesos.proto.
	Source *string `protobuf:"bytes,10,opt,name=source" json:"source,omitempty"` // Since 1.0.
	// This field can be used to pass arbitrary bytes to an executor.
	Data []byte `protobuf:"bytes,4,opt,name=data" json:"data,omitempty"`
	// Service discovery information for the executor. It is not
	// interpreted or acted upon by Mesos. It is up to a service
	// discovery system to use this information as needed and to handle
	// executors without service discovery information.
	Discovery *DiscoveryInfo `protobuf:"bytes,12,opt,name=discovery" json:"discovery,omitempty"`
	// When shutting down an executor the agent will wait in a
	// best-effort manner for the grace period specified here
	// before forcibly destroying the container. The executor
	// must not assume that it will always be allotted the full
	// grace period, as the agent may decide to allot a shorter
	// period and failures / forcible terminations may occur.
	ShutdownGracePeriod *DurationInfo `protobuf:"bytes,13,opt,name=shutdown_grace_period,json=shutdownGracePeriod" json:"shutdown_grace_period,omitempty"`
	// Labels are free-form key value pairs which are exposed through
	// master and agent endpoints. Labels will not be interpreted or
	// acted upon by Mesos itself. As opposed to the data field, labels
	// will be kept in memory on master and agent processes. Therefore,
	// labels should be used to tag executors with lightweight metadata.
	// Labels should not contain duplicate key-value pairs.
	Labels *Labels `protobuf:"bytes,14,opt,name=labels" json:"labels,omitempty"`
}

func (x *ExecutorInfo) Reset() {
	*x = ExecutorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorInfo) ProtoMessage() {}

func (x *ExecutorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorInfo.ProtoReflect.Descriptor instead.
func (*ExecutorInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{20}
}

func (x *ExecutorInfo) GetType() ExecutorInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ExecutorInfo_UNKNOWN
}

func (x *ExecutorInfo) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *ExecutorInfo) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *ExecutorInfo) GetCommand() *CommandInfo {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *ExecutorInfo) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ExecutorInfo) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ExecutorInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in mesos.proto.
func (x *ExecutorInfo) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ExecutorInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecutorInfo) GetDiscovery() *DiscoveryInfo {
	if x != nil {
		return x.Discovery
	}
	return nil
}

func (x *ExecutorInfo) GetShutdownGracePeriod() *DurationInfo {
	if x != nil {
		return x.ShutdownGracePeriod
	}
	return nil
}

func (x *ExecutorInfo) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// *
// Describes a domain. A domain is a collection of hosts that have
// similar characteristics. Mesos currently only supports "fault
// domains", which identify groups of hosts with similar failure
// characteristics.
//
// Frameworks can generally assume that network links between hosts in
// the same fault domain have lower latency, higher bandwidth, and better
// availability than network links between hosts in different domains.
// Schedulers may prefer to place network-intensive workloads in the
// same domain, as this may improve performance. Conversely, a single
// failure that affects a host in a domain may be more likely to
// affect other hosts in the same domain; hence, schedulers may prefer
// to place workloads that require high availability in multiple
// domains. (For example, all the hosts in a single rack might lose
// power or network connectivity simultaneously.)
//
// There are two kinds of fault domains: regions and zones. Regions
// offer the highest degree of fault isolation, but network latency
// between regions is typically high (typically >50 ms). Zones offer a
// modest degree of fault isolation along with reasonably low network
// latency (typically <10 ms).
//
// The mapping from fault domains to physical infrastructure is up to
// the operator to configure. In cloud environments, regions and zones
// can be mapped to the "region" and "availability zone" concepts
// exposed by most cloud providers, respectively. In on-premise
// deployments, regions and zones can be mapped to data centers and
// racks, respectively.
//
// Both masters and agents can be configured with domains. Frameworks
// can compare the domains of two hosts to determine if the hosts are
// in the same zone, in different zones in the same region, or in
// different regions. Note that all masters in a given Mesos cluster
// must be in the same region.
//
// Complex deployments may have additional levels of hierarchy: for example,
// multiple racks might be grouped together into "halls" and multiple DCs in
// the same geographical vicinity might be grouped together. As a convention,
// the recommended way to represent additional levels of hierarchy is via dot-
// separated labels in the existing zone and region fields. For example, the
// fact that racks "abc" and "def" are in the same hall might be represented
// using the zone names "rack-abc.hall-1" and "rack-def.hall-1", for example.
// Software that is not aware of this additional structure will compare the
// zone names for equality- hence, the two zones will be treated as different
// (unrelated) zones. Software that is "hall-aware" can inspect the zone names
// and make use of the additional hierarchy.
type DomainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaultDomain *DomainInfo_FaultDomain `protobuf:"bytes,1,opt,name=fault_domain,json=faultDomain" json:"fault_domain,omitempty"`
}

func (x *DomainInfo) Reset() {
	*x = DomainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo) ProtoMessage() {}

func (x *DomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{21}
}

func (x *DomainInfo) GetFaultDomain() *DomainInfo_FaultDomain {
	if x != nil {
		return x.FaultDomain
	}
	return nil
}

// *
// Describes a master. This will probably have more fields in the
// future which might be used, for example, to link a framework webui
// to a master webui.
type MasterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// The IP address (only IPv4) as a packed 4-bytes integer,
	// stored in network order.  Deprecated, use `address.ip` instead.
	Ip *uint32 `protobuf:"varint,2,req,name=ip" json:"ip,omitempty"`
	// The TCP port the Master is listening on for incoming
	// HTTP requests; deprecated, use `address.port` instead.
	Port *uint32 `protobuf:"varint,3,req,name=port,def=5050" json:"port,omitempty"`
	// In the default implementation, this will contain information
	// about both the IP address, port and Master name; it should really
	// not be relied upon by external tooling/frameworks and be
	// considered an "internal" implementation field.
	Pid *string `protobuf:"bytes,4,opt,name=pid" json:"pid,omitempty"`
	// The server's hostname, if available; it may be unreliable
	// in environments where the DNS configuration does not resolve
	// internal hostnames (eg, some public cloud providers).
	// Deprecated, use `address.hostname` instead.
	Hostname *string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	// The running Master version, as a string; taken from the
	// generated "master/version.hpp".
	Version *string `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	// The full IP address (supports both IPv4 and IPv6 formats)
	// and supersedes the use of `ip`, `port` and `hostname`.
	// Since Mesos 0.24.
	Address *Address `protobuf:"bytes,7,opt,name=address" json:"address,omitempty"`
	// The domain that this master belongs to. All masters in a Mesos
	// cluster should belong to the same region.
	Domain       *DomainInfo              `protobuf:"bytes,8,opt,name=domain" json:"domain,omitempty"`
	Capabilities []*MasterInfo_Capability `protobuf:"bytes,9,rep,name=capabilities" json:"capabilities,omitempty"`
}

// Default values for MasterInfo fields.
const (
	Default_MasterInfo_Port = uint32(5050)
)

func (x *MasterInfo) Reset() {
	*x = MasterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterInfo) ProtoMessage() {}

func (x *MasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterInfo.ProtoReflect.Descriptor instead.
func (*MasterInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{22}
}

func (x *MasterInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MasterInfo) GetIp() uint32 {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return 0
}

func (x *MasterInfo) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return Default_MasterInfo_Port
}

func (x *MasterInfo) GetPid() string {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return ""
}

func (x *MasterInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *MasterInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *MasterInfo) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MasterInfo) GetDomain() *DomainInfo {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *MasterInfo) GetCapabilities() []*MasterInfo_Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// *
// Describes an agent. Note that the 'id' field is only available
// after an agent is registered with the master, and is made available
// here to facilitate re-registration.
type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname *string `protobuf:"bytes,1,req,name=hostname" json:"hostname,omitempty"`
	Port     *int32  `protobuf:"varint,8,opt,name=port,def=5051" json:"port,omitempty"`
	// The configured resources at the agent. This does not include any
	// dynamic reservations or persistent volumes that may currently
	// exist at the agent.
	Resources  []*Resource  `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,5,rep,name=attributes" json:"attributes,omitempty"`
	Id         *AgentID     `protobuf:"bytes,6,opt,name=id" json:"id,omitempty"`
	// The domain that this agent belongs to. If the agent's region
	// differs from the master's region, it will not appear in resource
	// offers to frameworks that have not enabled the REGION_AWARE
	// capability.
	Domain *DomainInfo `protobuf:"bytes,10,opt,name=domain" json:"domain,omitempty"`
}

// Default values for AgentInfo fields.
const (
	Default_AgentInfo_Port = int32(5051)
)

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{23}
}

func (x *AgentInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *AgentInfo) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return Default_AgentInfo_Port
}

func (x *AgentInfo) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *AgentInfo) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *AgentInfo) GetId() *AgentID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AgentInfo) GetDomain() *DomainInfo {
	if x != nil {
		return x.Domain
	}
	return nil
}

// *
// Describes the container configuration to run a managed CSI plugin.
type CSIPluginContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services  []CSIPluginContainerInfo_Service `protobuf:"varint,1,rep,name=services,enum=mesos.v1.CSIPluginContainerInfo_Service" json:"services,omitempty"`
	Command   *CommandInfo                     `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Resources []*Resource                      `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	Container *ContainerInfo                   `protobuf:"bytes,4,opt,name=container" json:"container,omitempty"`
}

func (x *CSIPluginContainerInfo) Reset() {
	*x = CSIPluginContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSIPluginContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSIPluginContainerInfo) ProtoMessage() {}

func (x *CSIPluginContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSIPluginContainerInfo.ProtoReflect.Descriptor instead.
func (*CSIPluginContainerInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{24}
}

func (x *CSIPluginContainerInfo) GetServices() []CSIPluginContainerInfo_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *CSIPluginContainerInfo) GetCommand() *CommandInfo {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CSIPluginContainerInfo) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *CSIPluginContainerInfo) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

// *
// Describes the endpoint of an unmanaged CSI plugin service.
type CSIPluginEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CsiService *CSIPluginContainerInfo_Service `protobuf:"varint,1,req,name=csi_service,json=csiService,enum=mesos.v1.CSIPluginContainerInfo_Service" json:"csi_service,omitempty"`
	Endpoint   *string                         `protobuf:"bytes,2,req,name=endpoint" json:"endpoint,omitempty"`
}

func (x *CSIPluginEndpoint) Reset() {
	*x = CSIPluginEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSIPluginEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSIPluginEndpoint) ProtoMessage() {}

func (x *CSIPluginEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSIPluginEndpoint.ProtoReflect.Descriptor instead.
func (*CSIPluginEndpoint) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{25}
}

func (x *CSIPluginEndpoint) GetCsiService() CSIPluginContainerInfo_Service {
	if x != nil && x.CsiService != nil {
		return *x.CsiService
	}
	return CSIPluginContainerInfo_UNKNOWN
}

func (x *CSIPluginEndpoint) GetEndpoint() string {
	if x != nil && x.Endpoint != nil {
		return *x.Endpoint
	}
	return ""
}

// *
// Describes a CSI plugin.
type CSIPluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the CSI plugin. This uniquely identifies a CSI
	// implementation. For instance:
	//
	//	org.apache.mesos.csi.test
	//
	// Please follow to Java package naming convention
	// (https://en.wikipedia.org/wiki/Java_package#Package_naming_conventions)
	// to avoid conflicts on type names.
	Type *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	// The name of the CSI plugin. There could be multiple instances of a
	// type of CSI plugin within a Mesos cluster. The name field is used to
	// distinguish these instances. It should be a legal Java identifier
	// (https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html)
	// to avoid conflicts on concatenation of type and name.
	//
	// The type and name together provide the means to uniquely identify a storage
	// backend and its resources in the cluster, so the operator should ensure
	// that the concatenation of type and name is unique in the cluster, and it
	// remains the same if the instance is migrated to another agent (e.g., there
	// is a change in the agent ID).
	Name *string `protobuf:"bytes,2,opt,name=name,def=default" json:"name,omitempty"`
	// A list of container configurations to run managed CSI plugin.
	// The controller service will be served by the first configuration
	// that contains `CONTROLLER_SERVICE`, and the node service will be
	// served by the first configuration that contains `NODE_SERVICE`.
	Containers []*CSIPluginContainerInfo `protobuf:"bytes,3,rep,name=containers" json:"containers,omitempty"`
	// The service endpoints of the unmanaged CSI plugin. An endpoint is usually
	// a path to a Unix domain socket.
	Endpoints []*CSIPluginEndpoint `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
	// The root directory of all the target paths managed by the CSI plugin.
	// Each volume will be published by the CSI plugin at a sub-directory
	// under this path.
	TargetPathRoot *string `protobuf:"bytes,5,opt,name=target_path_root,json=targetPathRoot" json:"target_path_root,omitempty"`
	// For some CSI plugins which implement CSI v1 spec, they expect the target
	// path is an existing path which is actually not CSI v1 spec compliant. In
	// such case this field should be set to `true` as a work around for those
	// plugins. For the CSI plugins which implement CSI v0 spec, this field will
	// be just ignored.
	TargetPathExists *bool `protobuf:"varint,6,opt,name=target_path_exists,json=targetPathExists" json:"target_path_exists,omitempty"`
}

// Default values for CSIPluginInfo fields.
const (
	Default_CSIPluginInfo_Name = string("default")
)

func (x *CSIPluginInfo) Reset() {
	*x = CSIPluginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSIPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSIPluginInfo) ProtoMessage() {}

func (x *CSIPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSIPluginInfo.ProtoReflect.Descriptor instead.
func (*CSIPluginInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{26}
}

func (x *CSIPluginInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CSIPluginInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return Default_CSIPluginInfo_Name
}

func (x *CSIPluginInfo) GetContainers() []*CSIPluginContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *CSIPluginInfo) GetEndpoints() []*CSIPluginEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *CSIPluginInfo) GetTargetPathRoot() string {
	if x != nil && x.TargetPathRoot != nil {
		return *x.TargetPathRoot
	}
	return ""
}

func (x *CSIPluginInfo) GetTargetPathExists() bool {
	if x != nil && x.TargetPathExists != nil {
		return *x.TargetPathExists
	}
	return false
}

// *
// Describes a resource provider. Note that the 'id' field is only available
// after a resource provider is registered with the master, and is made
// available here to facilitate re-registration.
type ResourceProviderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *ResourceProviderID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []*Attribute        `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	// The type of the resource provider. This uniquely identifies a
	// resource provider implementation. For instance:
	//
	//	org.apache.mesos.rp.local.storage
	//
	// Please follow to Java package naming convention
	// (https://en.wikipedia.org/wiki/Java_package#Package_naming_conventions)
	// to avoid conflicts on type names.
	Type *string `protobuf:"bytes,3,req,name=type" json:"type,omitempty"`
	// The name of the resource provider. There could be multiple
	// instances of a type of resource provider. The name field is used
	// to distinguish these instances. It should be a legal Java identifier
	// (https://docs.oracle.com/javase/tutorial/java/nutsandbolts/variables.html)
	// to avoid conflicts on concatenation of type and name.
	Name *string `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	// The stack of default reservations. If this field is not empty, it
	// indicates that resources from this resource provider are reserved
	// by default, except for the resources that have been reserved or
	// unreserved through operations. The first `ReservationInfo`
	// may have type `STATIC` or `DYNAMIC`, but the rest must have
	// `DYNAMIC`. One can create a new reservation on top of an existing
	// one by pushing a new `ReservationInfo` to the back. The last
	// `ReservationInfo` in this stack is the "current" reservation. The
	// new reservation's role must be a child of the current one.
	DefaultReservations []*Resource_ReservationInfo   `protobuf:"bytes,5,rep,name=default_reservations,json=defaultReservations" json:"default_reservations,omitempty"` // EXPERIMENTAL.
	Storage             *ResourceProviderInfo_Storage `protobuf:"bytes,6,opt,name=storage" json:"storage,omitempty"`                                                    // EXPERIMENTAL.
}

func (x *ResourceProviderInfo) Reset() {
	*x = ResourceProviderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceProviderInfo) ProtoMessage() {}

func (x *ResourceProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceProviderInfo.ProtoReflect.Descriptor instead.
func (*ResourceProviderInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{27}
}

func (x *ResourceProviderInfo) GetId() *ResourceProviderID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceProviderInfo) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *ResourceProviderInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ResourceProviderInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceProviderInfo) GetDefaultReservations() []*Resource_ReservationInfo {
	if x != nil {
		return x.DefaultReservations
	}
	return nil
}

func (x *ResourceProviderInfo) GetStorage() *ResourceProviderInfo_Storage {
	if x != nil {
		return x.Storage
	}
	return nil
}

// *
// Describes an Attribute or Resource "value". A value is described
// using the standard protocol buffer "union" trick.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *Value_Type   `protobuf:"varint,1,req,name=type,enum=mesos.v1.Value_Type" json:"type,omitempty"`
	Scalar *Value_Scalar `protobuf:"bytes,2,opt,name=scalar" json:"scalar,omitempty"`
	Ranges *Value_Ranges `protobuf:"bytes,3,opt,name=ranges" json:"ranges,omitempty"`
	Set    *Value_Set    `protobuf:"bytes,4,opt,name=set" json:"set,omitempty"`
	Text   *Value_Text   `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28}
}

func (x *Value) GetType() Value_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Value_SCALAR
}

func (x *Value) GetScalar() *Value_Scalar {
	if x != nil {
		return x.Scalar
	}
	return nil
}

func (x *Value) GetRanges() *Value_Ranges {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *Value) GetSet() *Value_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *Value) GetText() *Value_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

// *
// Describes an attribute that can be set on a machine. For now,
// attributes and resources share the same "value" type, but this may
// change in the future and attributes may only be string based.
type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type   *Value_Type   `protobuf:"varint,2,req,name=type,enum=mesos.v1.Value_Type" json:"type,omitempty"`
	Scalar *Value_Scalar `protobuf:"bytes,3,opt,name=scalar" json:"scalar,omitempty"`
	Ranges *Value_Ranges `protobuf:"bytes,4,opt,name=ranges" json:"ranges,omitempty"`
	Set    *Value_Set    `protobuf:"bytes,6,opt,name=set" json:"set,omitempty"`
	Text   *Value_Text   `protobuf:"bytes,5,opt,name=text" json:"text,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{29}
}

func (x *Attribute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Attribute) GetType() Value_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Value_SCALAR
}

func (x *Attribute) GetScalar() *Value_Scalar {
	if x != nil {
		return x.Scalar
	}
	return nil
}

func (x *Attribute) GetRanges() *Value_Ranges {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *Attribute) GetSet() *Value_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *Attribute) GetText() *Value_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

// *
// Describes a resource from a resource provider. The `name` field is
// a string like "cpus" or "mem" that indicates which kind of resource
// this is; the rest of the fields describe the properties of the
// resource. A resource can take on one of three types: scalar
// (double), a list of finite and discrete ranges (e.g., [1-10,
// 20-30]), or a set of items. A resource is described using the
// standard protocol buffer "union" trick.
//
// Note that "disk" and "mem" resources are scalar values expressed in
// megabytes. Fractional "cpus" values are allowed (e.g., "0.5"),
// which correspond to partial shares of a CPU.
type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specified if the resource comes from a particular resource provider.
	ProviderId *ResourceProviderID `protobuf:"bytes,12,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	Name       *string             `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Type       *Value_Type         `protobuf:"varint,2,req,name=type,enum=mesos.v1.Value_Type" json:"type,omitempty"`
	Scalar     *Value_Scalar       `protobuf:"bytes,3,opt,name=scalar" json:"scalar,omitempty"`
	Ranges     *Value_Ranges       `protobuf:"bytes,4,opt,name=ranges" json:"ranges,omitempty"`
	Set        *Value_Set          `protobuf:"bytes,5,opt,name=set" json:"set,omitempty"`
	// The role that this resource is reserved for. If "*", this indicates
	// that the resource is unreserved. Otherwise, the resource will only
	// be offered to frameworks that belong to this role.
	//
	// NOTE: Frameworks must not set this field if `reservations` is set.
	//
	//	See the 'Resource Format' section for more details.
	//
	// TODO(mpark): Deprecate once `reservations` is no longer experimental.
	//
	// Deprecated: Marked as deprecated in mesos.proto.
	Role           *string                  `protobuf:"bytes,6,opt,name=role,def=*" json:"role,omitempty"`
	AllocationInfo *Resource_AllocationInfo `protobuf:"bytes,11,opt,name=allocation_info,json=allocationInfo" json:"allocation_info,omitempty"`
	// If this is set, this resource was dynamically reserved by an
	// operator or a framework. Otherwise, this resource is either unreserved
	// or statically reserved by an operator via the --resources flag.
	//
	// NOTE: Frameworks must not set this field if `reservations` is set.
	//
	//	See the 'Resource Format' section for more details.
	//
	// TODO(mpark): Deprecate once `reservations` is no longer experimental.
	Reservation *Resource_ReservationInfo `protobuf:"bytes,8,opt,name=reservation" json:"reservation,omitempty"`
	// The stack of reservations. If this field is empty, it indicates that this
	// resource is unreserved. Otherwise, the resource is reserved. The first
	// `ReservationInfo` may have type `STATIC` or `DYNAMIC`, but the rest must
	// have `DYNAMIC`. One can create a new reservation on top of an existing
	// one by pushing a new `ReservationInfo` to the back. The last
	// `ReservationInfo` in this stack is the "current" reservation. The new
	// reservation's role must be a child of the current reservation's role.
	//
	// NOTE: Frameworks must not set this field if `reservation` is set.
	//
	//	See the 'Resource Format' section for more details.
	//
	// TODO(mpark): Deprecate `role` and `reservation` once this is stable.
	Reservations []*Resource_ReservationInfo `protobuf:"bytes,13,rep,name=reservations" json:"reservations,omitempty"` // EXPERIMENTAL.
	Disk         *Resource_DiskInfo          `protobuf:"bytes,7,opt,name=disk" json:"disk,omitempty"`
	// If this is set, the resources are revocable, i.e., any tasks or
	// executors launched using these resources could get preempted or
	// throttled at any time. This could be used by frameworks to run
	// best effort tasks that do not need strict uptime or performance
	// guarantees. Note that if this is set, 'disk' or 'reservation'
	// cannot be set.
	Revocable *Resource_RevocableInfo `protobuf:"bytes,9,opt,name=revocable" json:"revocable,omitempty"`
	// If this is set, the resources are shared, i.e. multiple tasks
	// can be launched using this resource and all of them shall refer
	// to the same physical resource on the cluster. Note that only
	// persistent volumes can be shared currently.
	//
	// NOTE: Different shared resources must be uniquely identifiable.
	// This currently holds as persistent volume should have unique `id`
	// (this is not validated for enforced though).
	Shared *Resource_SharedInfo `protobuf:"bytes,10,opt,name=shared" json:"shared,omitempty"`
}

// Default values for Resource fields.
const (
	Default_Resource_Role = string("*")
)

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30}
}

func (x *Resource) GetProviderId() *ResourceProviderID {
	if x != nil {
		return x.ProviderId
	}
	return nil
}

func (x *Resource) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Resource) GetType() Value_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Value_SCALAR
}

func (x *Resource) GetScalar() *Value_Scalar {
	if x != nil {
		return x.Scalar
	}
	return nil
}

func (x *Resource) GetRanges() *Value_Ranges {
	if x != nil {
		return x.Ranges
	}
	return nil
}

func (x *Resource) GetSet() *Value_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

// Deprecated: Marked as deprecated in mesos.proto.
func (x *Resource) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return Default_Resource_Role
}

func (x *Resource) GetAllocationInfo() *Resource_AllocationInfo {
	if x != nil {
		return x.AllocationInfo
	}
	return nil
}

func (x *Resource) GetReservation() *Resource_ReservationInfo {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *Resource) GetReservations() []*Resource_ReservationInfo {
	if x != nil {
		return x.Reservations
	}
	return nil
}

func (x *Resource) GetDisk() *Resource_DiskInfo {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *Resource) GetRevocable() *Resource_RevocableInfo {
	if x != nil {
		return x.Revocable
	}
	return nil
}

func (x *Resource) GetShared() *Resource_SharedInfo {
	if x != nil {
		return x.Shared
	}
	return nil
}

// *
// When the network bandwidth caps are enabled and the container
// is over its limit, outbound packets may be either delayed or
// dropped completely either because it exceeds the maximum bandwidth
// allocation for a single container (the cap) or because the combined
// network traffic of multiple containers on the host exceeds the
// transmit capacity of the host (the share). We can report the
// following statistics for each of these conditions exported directly
// from the Linux Traffic Control Queueing Discipline.
//
// id         : name of the limiter, e.g. 'tx_bw_cap'
// backlog    : number of packets currently delayed
// bytes      : total bytes seen
// drops      : number of packets dropped in total
// overlimits : number of packets which exceeded allocation
// packets    : total packets seen
// qlen       : number of packets currently queued
// rate_bps   : throughput in bytes/sec
// rate_pps   : throughput in packets/sec
// requeues   : number of times a packet has been delayed due to
//
//	locking or device contention issues
//
// More information on the operation of Linux Traffic Control can be
// found at http://www.lartc.org/lartc.html.
type TrafficControlStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Backlog    *uint64 `protobuf:"varint,2,opt,name=backlog" json:"backlog,omitempty"`
	Bytes      *uint64 `protobuf:"varint,3,opt,name=bytes" json:"bytes,omitempty"`
	Drops      *uint64 `protobuf:"varint,4,opt,name=drops" json:"drops,omitempty"`
	Overlimits *uint64 `protobuf:"varint,5,opt,name=overlimits" json:"overlimits,omitempty"`
	Packets    *uint64 `protobuf:"varint,6,opt,name=packets" json:"packets,omitempty"`
	Qlen       *uint64 `protobuf:"varint,7,opt,name=qlen" json:"qlen,omitempty"`
	Ratebps    *uint64 `protobuf:"varint,8,opt,name=ratebps" json:"ratebps,omitempty"`
	Ratepps    *uint64 `protobuf:"varint,9,opt,name=ratepps" json:"ratepps,omitempty"`
	Requeues   *uint64 `protobuf:"varint,10,opt,name=requeues" json:"requeues,omitempty"`
}

func (x *TrafficControlStatistics) Reset() {
	*x = TrafficControlStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficControlStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficControlStatistics) ProtoMessage() {}

func (x *TrafficControlStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficControlStatistics.ProtoReflect.Descriptor instead.
func (*TrafficControlStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{31}
}

func (x *TrafficControlStatistics) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TrafficControlStatistics) GetBacklog() uint64 {
	if x != nil && x.Backlog != nil {
		return *x.Backlog
	}
	return 0
}

func (x *TrafficControlStatistics) GetBytes() uint64 {
	if x != nil && x.Bytes != nil {
		return *x.Bytes
	}
	return 0
}

func (x *TrafficControlStatistics) GetDrops() uint64 {
	if x != nil && x.Drops != nil {
		return *x.Drops
	}
	return 0
}

func (x *TrafficControlStatistics) GetOverlimits() uint64 {
	if x != nil && x.Overlimits != nil {
		return *x.Overlimits
	}
	return 0
}

func (x *TrafficControlStatistics) GetPackets() uint64 {
	if x != nil && x.Packets != nil {
		return *x.Packets
	}
	return 0
}

func (x *TrafficControlStatistics) GetQlen() uint64 {
	if x != nil && x.Qlen != nil {
		return *x.Qlen
	}
	return 0
}

func (x *TrafficControlStatistics) GetRatebps() uint64 {
	if x != nil && x.Ratebps != nil {
		return *x.Ratebps
	}
	return 0
}

func (x *TrafficControlStatistics) GetRatepps() uint64 {
	if x != nil && x.Ratepps != nil {
		return *x.Ratepps
	}
	return 0
}

func (x *TrafficControlStatistics) GetRequeues() uint64 {
	if x != nil && x.Requeues != nil {
		return *x.Requeues
	}
	return 0
}

type IpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Forwarding      *int64 `protobuf:"varint,1,opt,name=Forwarding" json:"Forwarding,omitempty"`
	DefaultTTL      *int64 `protobuf:"varint,2,opt,name=DefaultTTL" json:"DefaultTTL,omitempty"`
	InReceives      *int64 `protobuf:"varint,3,opt,name=InReceives" json:"InReceives,omitempty"`
	InHdrErrors     *int64 `protobuf:"varint,4,opt,name=InHdrErrors" json:"InHdrErrors,omitempty"`
	InAddrErrors    *int64 `protobuf:"varint,5,opt,name=InAddrErrors" json:"InAddrErrors,omitempty"`
	ForwDatagrams   *int64 `protobuf:"varint,6,opt,name=ForwDatagrams" json:"ForwDatagrams,omitempty"`
	InUnknownProtos *int64 `protobuf:"varint,7,opt,name=InUnknownProtos" json:"InUnknownProtos,omitempty"`
	InDiscards      *int64 `protobuf:"varint,8,opt,name=InDiscards" json:"InDiscards,omitempty"`
	InDelivers      *int64 `protobuf:"varint,9,opt,name=InDelivers" json:"InDelivers,omitempty"`
	OutRequests     *int64 `protobuf:"varint,10,opt,name=OutRequests" json:"OutRequests,omitempty"`
	OutDiscards     *int64 `protobuf:"varint,11,opt,name=OutDiscards" json:"OutDiscards,omitempty"`
	OutNoRoutes     *int64 `protobuf:"varint,12,opt,name=OutNoRoutes" json:"OutNoRoutes,omitempty"`
	ReasmTimeout    *int64 `protobuf:"varint,13,opt,name=ReasmTimeout" json:"ReasmTimeout,omitempty"`
	ReasmReqds      *int64 `protobuf:"varint,14,opt,name=ReasmReqds" json:"ReasmReqds,omitempty"`
	ReasmOKs        *int64 `protobuf:"varint,15,opt,name=ReasmOKs" json:"ReasmOKs,omitempty"`
	ReasmFails      *int64 `protobuf:"varint,16,opt,name=ReasmFails" json:"ReasmFails,omitempty"`
	FragOKs         *int64 `protobuf:"varint,17,opt,name=FragOKs" json:"FragOKs,omitempty"`
	FragFails       *int64 `protobuf:"varint,18,opt,name=FragFails" json:"FragFails,omitempty"`
	FragCreates     *int64 `protobuf:"varint,19,opt,name=FragCreates" json:"FragCreates,omitempty"`
}

func (x *IpStatistics) Reset() {
	*x = IpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpStatistics) ProtoMessage() {}

func (x *IpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpStatistics.ProtoReflect.Descriptor instead.
func (*IpStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{32}
}

func (x *IpStatistics) GetForwarding() int64 {
	if x != nil && x.Forwarding != nil {
		return *x.Forwarding
	}
	return 0
}

func (x *IpStatistics) GetDefaultTTL() int64 {
	if x != nil && x.DefaultTTL != nil {
		return *x.DefaultTTL
	}
	return 0
}

func (x *IpStatistics) GetInReceives() int64 {
	if x != nil && x.InReceives != nil {
		return *x.InReceives
	}
	return 0
}

func (x *IpStatistics) GetInHdrErrors() int64 {
	if x != nil && x.InHdrErrors != nil {
		return *x.InHdrErrors
	}
	return 0
}

func (x *IpStatistics) GetInAddrErrors() int64 {
	if x != nil && x.InAddrErrors != nil {
		return *x.InAddrErrors
	}
	return 0
}

func (x *IpStatistics) GetForwDatagrams() int64 {
	if x != nil && x.ForwDatagrams != nil {
		return *x.ForwDatagrams
	}
	return 0
}

func (x *IpStatistics) GetInUnknownProtos() int64 {
	if x != nil && x.InUnknownProtos != nil {
		return *x.InUnknownProtos
	}
	return 0
}

func (x *IpStatistics) GetInDiscards() int64 {
	if x != nil && x.InDiscards != nil {
		return *x.InDiscards
	}
	return 0
}

func (x *IpStatistics) GetInDelivers() int64 {
	if x != nil && x.InDelivers != nil {
		return *x.InDelivers
	}
	return 0
}

func (x *IpStatistics) GetOutRequests() int64 {
	if x != nil && x.OutRequests != nil {
		return *x.OutRequests
	}
	return 0
}

func (x *IpStatistics) GetOutDiscards() int64 {
	if x != nil && x.OutDiscards != nil {
		return *x.OutDiscards
	}
	return 0
}

func (x *IpStatistics) GetOutNoRoutes() int64 {
	if x != nil && x.OutNoRoutes != nil {
		return *x.OutNoRoutes
	}
	return 0
}

func (x *IpStatistics) GetReasmTimeout() int64 {
	if x != nil && x.ReasmTimeout != nil {
		return *x.ReasmTimeout
	}
	return 0
}

func (x *IpStatistics) GetReasmReqds() int64 {
	if x != nil && x.ReasmReqds != nil {
		return *x.ReasmReqds
	}
	return 0
}

func (x *IpStatistics) GetReasmOKs() int64 {
	if x != nil && x.ReasmOKs != nil {
		return *x.ReasmOKs
	}
	return 0
}

func (x *IpStatistics) GetReasmFails() int64 {
	if x != nil && x.ReasmFails != nil {
		return *x.ReasmFails
	}
	return 0
}

func (x *IpStatistics) GetFragOKs() int64 {
	if x != nil && x.FragOKs != nil {
		return *x.FragOKs
	}
	return 0
}

func (x *IpStatistics) GetFragFails() int64 {
	if x != nil && x.FragFails != nil {
		return *x.FragFails
	}
	return 0
}

func (x *IpStatistics) GetFragCreates() int64 {
	if x != nil && x.FragCreates != nil {
		return *x.FragCreates
	}
	return 0
}

type IcmpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InMsgs           *int64 `protobuf:"varint,1,opt,name=InMsgs" json:"InMsgs,omitempty"`
	InErrors         *int64 `protobuf:"varint,2,opt,name=InErrors" json:"InErrors,omitempty"`
	InCsumErrors     *int64 `protobuf:"varint,3,opt,name=InCsumErrors" json:"InCsumErrors,omitempty"`
	InDestUnreachs   *int64 `protobuf:"varint,4,opt,name=InDestUnreachs" json:"InDestUnreachs,omitempty"`
	InTimeExcds      *int64 `protobuf:"varint,5,opt,name=InTimeExcds" json:"InTimeExcds,omitempty"`
	InParmProbs      *int64 `protobuf:"varint,6,opt,name=InParmProbs" json:"InParmProbs,omitempty"`
	InSrcQuenchs     *int64 `protobuf:"varint,7,opt,name=InSrcQuenchs" json:"InSrcQuenchs,omitempty"`
	InRedirects      *int64 `protobuf:"varint,8,opt,name=InRedirects" json:"InRedirects,omitempty"`
	InEchos          *int64 `protobuf:"varint,9,opt,name=InEchos" json:"InEchos,omitempty"`
	InEchoReps       *int64 `protobuf:"varint,10,opt,name=InEchoReps" json:"InEchoReps,omitempty"`
	InTimestamps     *int64 `protobuf:"varint,11,opt,name=InTimestamps" json:"InTimestamps,omitempty"`
	InTimestampReps  *int64 `protobuf:"varint,12,opt,name=InTimestampReps" json:"InTimestampReps,omitempty"`
	InAddrMasks      *int64 `protobuf:"varint,13,opt,name=InAddrMasks" json:"InAddrMasks,omitempty"`
	InAddrMaskReps   *int64 `protobuf:"varint,14,opt,name=InAddrMaskReps" json:"InAddrMaskReps,omitempty"`
	OutMsgs          *int64 `protobuf:"varint,15,opt,name=OutMsgs" json:"OutMsgs,omitempty"`
	OutErrors        *int64 `protobuf:"varint,16,opt,name=OutErrors" json:"OutErrors,omitempty"`
	OutDestUnreachs  *int64 `protobuf:"varint,17,opt,name=OutDestUnreachs" json:"OutDestUnreachs,omitempty"`
	OutTimeExcds     *int64 `protobuf:"varint,18,opt,name=OutTimeExcds" json:"OutTimeExcds,omitempty"`
	OutParmProbs     *int64 `protobuf:"varint,19,opt,name=OutParmProbs" json:"OutParmProbs,omitempty"`
	OutSrcQuenchs    *int64 `protobuf:"varint,20,opt,name=OutSrcQuenchs" json:"OutSrcQuenchs,omitempty"`
	OutRedirects     *int64 `protobuf:"varint,21,opt,name=OutRedirects" json:"OutRedirects,omitempty"`
	OutEchos         *int64 `protobuf:"varint,22,opt,name=OutEchos" json:"OutEchos,omitempty"`
	OutEchoReps      *int64 `protobuf:"varint,23,opt,name=OutEchoReps" json:"OutEchoReps,omitempty"`
	OutTimestamps    *int64 `protobuf:"varint,24,opt,name=OutTimestamps" json:"OutTimestamps,omitempty"`
	OutTimestampReps *int64 `protobuf:"varint,25,opt,name=OutTimestampReps" json:"OutTimestampReps,omitempty"`
	OutAddrMasks     *int64 `protobuf:"varint,26,opt,name=OutAddrMasks" json:"OutAddrMasks,omitempty"`
	OutAddrMaskReps  *int64 `protobuf:"varint,27,opt,name=OutAddrMaskReps" json:"OutAddrMaskReps,omitempty"`
}

func (x *IcmpStatistics) Reset() {
	*x = IcmpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcmpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcmpStatistics) ProtoMessage() {}

func (x *IcmpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcmpStatistics.ProtoReflect.Descriptor instead.
func (*IcmpStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{33}
}

func (x *IcmpStatistics) GetInMsgs() int64 {
	if x != nil && x.InMsgs != nil {
		return *x.InMsgs
	}
	return 0
}

func (x *IcmpStatistics) GetInErrors() int64 {
	if x != nil && x.InErrors != nil {
		return *x.InErrors
	}
	return 0
}

func (x *IcmpStatistics) GetInCsumErrors() int64 {
	if x != nil && x.InCsumErrors != nil {
		return *x.InCsumErrors
	}
	return 0
}

func (x *IcmpStatistics) GetInDestUnreachs() int64 {
	if x != nil && x.InDestUnreachs != nil {
		return *x.InDestUnreachs
	}
	return 0
}

func (x *IcmpStatistics) GetInTimeExcds() int64 {
	if x != nil && x.InTimeExcds != nil {
		return *x.InTimeExcds
	}
	return 0
}

func (x *IcmpStatistics) GetInParmProbs() int64 {
	if x != nil && x.InParmProbs != nil {
		return *x.InParmProbs
	}
	return 0
}

func (x *IcmpStatistics) GetInSrcQuenchs() int64 {
	if x != nil && x.InSrcQuenchs != nil {
		return *x.InSrcQuenchs
	}
	return 0
}

func (x *IcmpStatistics) GetInRedirects() int64 {
	if x != nil && x.InRedirects != nil {
		return *x.InRedirects
	}
	return 0
}

func (x *IcmpStatistics) GetInEchos() int64 {
	if x != nil && x.InEchos != nil {
		return *x.InEchos
	}
	return 0
}

func (x *IcmpStatistics) GetInEchoReps() int64 {
	if x != nil && x.InEchoReps != nil {
		return *x.InEchoReps
	}
	return 0
}

func (x *IcmpStatistics) GetInTimestamps() int64 {
	if x != nil && x.InTimestamps != nil {
		return *x.InTimestamps
	}
	return 0
}

func (x *IcmpStatistics) GetInTimestampReps() int64 {
	if x != nil && x.InTimestampReps != nil {
		return *x.InTimestampReps
	}
	return 0
}

func (x *IcmpStatistics) GetInAddrMasks() int64 {
	if x != nil && x.InAddrMasks != nil {
		return *x.InAddrMasks
	}
	return 0
}

func (x *IcmpStatistics) GetInAddrMaskReps() int64 {
	if x != nil && x.InAddrMaskReps != nil {
		return *x.InAddrMaskReps
	}
	return 0
}

func (x *IcmpStatistics) GetOutMsgs() int64 {
	if x != nil && x.OutMsgs != nil {
		return *x.OutMsgs
	}
	return 0
}

func (x *IcmpStatistics) GetOutErrors() int64 {
	if x != nil && x.OutErrors != nil {
		return *x.OutErrors
	}
	return 0
}

func (x *IcmpStatistics) GetOutDestUnreachs() int64 {
	if x != nil && x.OutDestUnreachs != nil {
		return *x.OutDestUnreachs
	}
	return 0
}

func (x *IcmpStatistics) GetOutTimeExcds() int64 {
	if x != nil && x.OutTimeExcds != nil {
		return *x.OutTimeExcds
	}
	return 0
}

func (x *IcmpStatistics) GetOutParmProbs() int64 {
	if x != nil && x.OutParmProbs != nil {
		return *x.OutParmProbs
	}
	return 0
}

func (x *IcmpStatistics) GetOutSrcQuenchs() int64 {
	if x != nil && x.OutSrcQuenchs != nil {
		return *x.OutSrcQuenchs
	}
	return 0
}

func (x *IcmpStatistics) GetOutRedirects() int64 {
	if x != nil && x.OutRedirects != nil {
		return *x.OutRedirects
	}
	return 0
}

func (x *IcmpStatistics) GetOutEchos() int64 {
	if x != nil && x.OutEchos != nil {
		return *x.OutEchos
	}
	return 0
}

func (x *IcmpStatistics) GetOutEchoReps() int64 {
	if x != nil && x.OutEchoReps != nil {
		return *x.OutEchoReps
	}
	return 0
}

func (x *IcmpStatistics) GetOutTimestamps() int64 {
	if x != nil && x.OutTimestamps != nil {
		return *x.OutTimestamps
	}
	return 0
}

func (x *IcmpStatistics) GetOutTimestampReps() int64 {
	if x != nil && x.OutTimestampReps != nil {
		return *x.OutTimestampReps
	}
	return 0
}

func (x *IcmpStatistics) GetOutAddrMasks() int64 {
	if x != nil && x.OutAddrMasks != nil {
		return *x.OutAddrMasks
	}
	return 0
}

func (x *IcmpStatistics) GetOutAddrMaskReps() int64 {
	if x != nil && x.OutAddrMaskReps != nil {
		return *x.OutAddrMaskReps
	}
	return 0
}

type TcpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RtoAlgorithm *int64 `protobuf:"varint,1,opt,name=RtoAlgorithm" json:"RtoAlgorithm,omitempty"`
	RtoMin       *int64 `protobuf:"varint,2,opt,name=RtoMin" json:"RtoMin,omitempty"`
	RtoMax       *int64 `protobuf:"varint,3,opt,name=RtoMax" json:"RtoMax,omitempty"`
	MaxConn      *int64 `protobuf:"varint,4,opt,name=MaxConn" json:"MaxConn,omitempty"`
	ActiveOpens  *int64 `protobuf:"varint,5,opt,name=ActiveOpens" json:"ActiveOpens,omitempty"`
	PassiveOpens *int64 `protobuf:"varint,6,opt,name=PassiveOpens" json:"PassiveOpens,omitempty"`
	AttemptFails *int64 `protobuf:"varint,7,opt,name=AttemptFails" json:"AttemptFails,omitempty"`
	EstabResets  *int64 `protobuf:"varint,8,opt,name=EstabResets" json:"EstabResets,omitempty"`
	CurrEstab    *int64 `protobuf:"varint,9,opt,name=CurrEstab" json:"CurrEstab,omitempty"`
	InSegs       *int64 `protobuf:"varint,10,opt,name=InSegs" json:"InSegs,omitempty"`
	OutSegs      *int64 `protobuf:"varint,11,opt,name=OutSegs" json:"OutSegs,omitempty"`
	RetransSegs  *int64 `protobuf:"varint,12,opt,name=RetransSegs" json:"RetransSegs,omitempty"`
	InErrs       *int64 `protobuf:"varint,13,opt,name=InErrs" json:"InErrs,omitempty"`
	OutRsts      *int64 `protobuf:"varint,14,opt,name=OutRsts" json:"OutRsts,omitempty"`
	InCsumErrors *int64 `protobuf:"varint,15,opt,name=InCsumErrors" json:"InCsumErrors,omitempty"`
}

func (x *TcpStatistics) Reset() {
	*x = TcpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpStatistics) ProtoMessage() {}

func (x *TcpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpStatistics.ProtoReflect.Descriptor instead.
func (*TcpStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{34}
}

func (x *TcpStatistics) GetRtoAlgorithm() int64 {
	if x != nil && x.RtoAlgorithm != nil {
		return *x.RtoAlgorithm
	}
	return 0
}

func (x *TcpStatistics) GetRtoMin() int64 {
	if x != nil && x.RtoMin != nil {
		return *x.RtoMin
	}
	return 0
}

func (x *TcpStatistics) GetRtoMax() int64 {
	if x != nil && x.RtoMax != nil {
		return *x.RtoMax
	}
	return 0
}

func (x *TcpStatistics) GetMaxConn() int64 {
	if x != nil && x.MaxConn != nil {
		return *x.MaxConn
	}
	return 0
}

func (x *TcpStatistics) GetActiveOpens() int64 {
	if x != nil && x.ActiveOpens != nil {
		return *x.ActiveOpens
	}
	return 0
}

func (x *TcpStatistics) GetPassiveOpens() int64 {
	if x != nil && x.PassiveOpens != nil {
		return *x.PassiveOpens
	}
	return 0
}

func (x *TcpStatistics) GetAttemptFails() int64 {
	if x != nil && x.AttemptFails != nil {
		return *x.AttemptFails
	}
	return 0
}

func (x *TcpStatistics) GetEstabResets() int64 {
	if x != nil && x.EstabResets != nil {
		return *x.EstabResets
	}
	return 0
}

func (x *TcpStatistics) GetCurrEstab() int64 {
	if x != nil && x.CurrEstab != nil {
		return *x.CurrEstab
	}
	return 0
}

func (x *TcpStatistics) GetInSegs() int64 {
	if x != nil && x.InSegs != nil {
		return *x.InSegs
	}
	return 0
}

func (x *TcpStatistics) GetOutSegs() int64 {
	if x != nil && x.OutSegs != nil {
		return *x.OutSegs
	}
	return 0
}

func (x *TcpStatistics) GetRetransSegs() int64 {
	if x != nil && x.RetransSegs != nil {
		return *x.RetransSegs
	}
	return 0
}

func (x *TcpStatistics) GetInErrs() int64 {
	if x != nil && x.InErrs != nil {
		return *x.InErrs
	}
	return 0
}

func (x *TcpStatistics) GetOutRsts() int64 {
	if x != nil && x.OutRsts != nil {
		return *x.OutRsts
	}
	return 0
}

func (x *TcpStatistics) GetInCsumErrors() int64 {
	if x != nil && x.InCsumErrors != nil {
		return *x.InCsumErrors
	}
	return 0
}

type UdpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InDatagrams  *int64 `protobuf:"varint,1,opt,name=InDatagrams" json:"InDatagrams,omitempty"`
	NoPorts      *int64 `protobuf:"varint,2,opt,name=NoPorts" json:"NoPorts,omitempty"`
	InErrors     *int64 `protobuf:"varint,3,opt,name=InErrors" json:"InErrors,omitempty"`
	OutDatagrams *int64 `protobuf:"varint,4,opt,name=OutDatagrams" json:"OutDatagrams,omitempty"`
	RcvbufErrors *int64 `protobuf:"varint,5,opt,name=RcvbufErrors" json:"RcvbufErrors,omitempty"`
	SndbufErrors *int64 `protobuf:"varint,6,opt,name=SndbufErrors" json:"SndbufErrors,omitempty"`
	InCsumErrors *int64 `protobuf:"varint,7,opt,name=InCsumErrors" json:"InCsumErrors,omitempty"`
	IgnoredMulti *int64 `protobuf:"varint,8,opt,name=IgnoredMulti" json:"IgnoredMulti,omitempty"`
}

func (x *UdpStatistics) Reset() {
	*x = UdpStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UdpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UdpStatistics) ProtoMessage() {}

func (x *UdpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UdpStatistics.ProtoReflect.Descriptor instead.
func (*UdpStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{35}
}

func (x *UdpStatistics) GetInDatagrams() int64 {
	if x != nil && x.InDatagrams != nil {
		return *x.InDatagrams
	}
	return 0
}

func (x *UdpStatistics) GetNoPorts() int64 {
	if x != nil && x.NoPorts != nil {
		return *x.NoPorts
	}
	return 0
}

func (x *UdpStatistics) GetInErrors() int64 {
	if x != nil && x.InErrors != nil {
		return *x.InErrors
	}
	return 0
}

func (x *UdpStatistics) GetOutDatagrams() int64 {
	if x != nil && x.OutDatagrams != nil {
		return *x.OutDatagrams
	}
	return 0
}

func (x *UdpStatistics) GetRcvbufErrors() int64 {
	if x != nil && x.RcvbufErrors != nil {
		return *x.RcvbufErrors
	}
	return 0
}

func (x *UdpStatistics) GetSndbufErrors() int64 {
	if x != nil && x.SndbufErrors != nil {
		return *x.SndbufErrors
	}
	return 0
}

func (x *UdpStatistics) GetInCsumErrors() int64 {
	if x != nil && x.InCsumErrors != nil {
		return *x.InCsumErrors
	}
	return 0
}

func (x *UdpStatistics) GetIgnoredMulti() int64 {
	if x != nil && x.IgnoredMulti != nil {
		return *x.IgnoredMulti
	}
	return 0
}

type SNMPStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpStats   *IpStatistics   `protobuf:"bytes,1,opt,name=ip_stats,json=ipStats" json:"ip_stats,omitempty"`
	IcmpStats *IcmpStatistics `protobuf:"bytes,2,opt,name=icmp_stats,json=icmpStats" json:"icmp_stats,omitempty"`
	TcpStats  *TcpStatistics  `protobuf:"bytes,3,opt,name=tcp_stats,json=tcpStats" json:"tcp_stats,omitempty"`
	UdpStats  *UdpStatistics  `protobuf:"bytes,4,opt,name=udp_stats,json=udpStats" json:"udp_stats,omitempty"`
}

func (x *SNMPStatistics) Reset() {
	*x = SNMPStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNMPStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNMPStatistics) ProtoMessage() {}

func (x *SNMPStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNMPStatistics.ProtoReflect.Descriptor instead.
func (*SNMPStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{36}
}

func (x *SNMPStatistics) GetIpStats() *IpStatistics {
	if x != nil {
		return x.IpStats
	}
	return nil
}

func (x *SNMPStatistics) GetIcmpStats() *IcmpStatistics {
	if x != nil {
		return x.IcmpStats
	}
	return nil
}

func (x *SNMPStatistics) GetTcpStats() *TcpStatistics {
	if x != nil {
		return x.TcpStats
	}
	return nil
}

func (x *SNMPStatistics) GetUdpStats() *UdpStatistics {
	if x != nil {
		return x.UdpStats
	}
	return nil
}

type DiskStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source      *Resource_DiskInfo_Source      `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Persistence *Resource_DiskInfo_Persistence `protobuf:"bytes,2,opt,name=persistence" json:"persistence,omitempty"`
	LimitBytes  *uint64                        `protobuf:"varint,3,opt,name=limit_bytes,json=limitBytes" json:"limit_bytes,omitempty"`
	UsedBytes   *uint64                        `protobuf:"varint,4,opt,name=used_bytes,json=usedBytes" json:"used_bytes,omitempty"`
}

func (x *DiskStatistics) Reset() {
	*x = DiskStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStatistics) ProtoMessage() {}

func (x *DiskStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStatistics.ProtoReflect.Descriptor instead.
func (*DiskStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{37}
}

func (x *DiskStatistics) GetSource() *Resource_DiskInfo_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DiskStatistics) GetPersistence() *Resource_DiskInfo_Persistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

func (x *DiskStatistics) GetLimitBytes() uint64 {
	if x != nil && x.LimitBytes != nil {
		return *x.LimitBytes
	}
	return 0
}

func (x *DiskStatistics) GetUsedBytes() uint64 {
	if x != nil && x.UsedBytes != nil {
		return *x.UsedBytes
	}
	return 0
}

// *
// A snapshot of resource usage statistics.
type ResourceStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *float64 `protobuf:"fixed64,1,req,name=timestamp" json:"timestamp,omitempty"` // Snapshot time, in seconds since the Epoch.
	Processes *uint32  `protobuf:"varint,30,opt,name=processes" json:"processes,omitempty"`
	Threads   *uint32  `protobuf:"varint,31,opt,name=threads" json:"threads,omitempty"`
	// CPU Usage Information:
	// Total CPU time spent in user mode, and kernel mode.
	CpusUserTimeSecs   *float64 `protobuf:"fixed64,2,opt,name=cpus_user_time_secs,json=cpusUserTimeSecs" json:"cpus_user_time_secs,omitempty"`
	CpusSystemTimeSecs *float64 `protobuf:"fixed64,3,opt,name=cpus_system_time_secs,json=cpusSystemTimeSecs" json:"cpus_system_time_secs,omitempty"`
	// Hard CPU limit.
	CpusLimit *float64 `protobuf:"fixed64,4,opt,name=cpus_limit,json=cpusLimit" json:"cpus_limit,omitempty"`
	// Soft CPU limit.
	CpusSoftLimit *float64 `protobuf:"fixed64,45,opt,name=cpus_soft_limit,json=cpusSoftLimit" json:"cpus_soft_limit,omitempty"`
	// cpu.stat on process throttling (for contention issues).
	CpusNrPeriods         *uint32  `protobuf:"varint,7,opt,name=cpus_nr_periods,json=cpusNrPeriods" json:"cpus_nr_periods,omitempty"`
	CpusNrThrottled       *uint32  `protobuf:"varint,8,opt,name=cpus_nr_throttled,json=cpusNrThrottled" json:"cpus_nr_throttled,omitempty"`
	CpusThrottledTimeSecs *float64 `protobuf:"fixed64,9,opt,name=cpus_throttled_time_secs,json=cpusThrottledTimeSecs" json:"cpus_throttled_time_secs,omitempty"`
	// mem_total_bytes was added in 0.23.0 to represent the total memory
	// of a process in RAM (as opposed to in Swap). This was previously
	// reported as mem_rss_bytes, which was also changed in 0.23.0 to
	// represent only the anonymous memory usage, to keep in sync with
	// Linux kernel's (arguably erroneous) use of terminology.
	MemTotalBytes *uint64 `protobuf:"varint,36,opt,name=mem_total_bytes,json=memTotalBytes" json:"mem_total_bytes,omitempty"`
	// Total memory + swap usage. This is set if swap is enabled.
	MemTotalMemswBytes *uint64 `protobuf:"varint,37,opt,name=mem_total_memsw_bytes,json=memTotalMemswBytes" json:"mem_total_memsw_bytes,omitempty"`
	// Current kernel memory allocation.
	MemKmemUsageBytes *uint64 `protobuf:"varint,52,opt,name=mem_kmem_usage_bytes,json=memKmemUsageBytes" json:"mem_kmem_usage_bytes,omitempty"`
	// Current TCP buf memory allocation.
	MemKmemTcpUsageBytes *uint64 `protobuf:"varint,53,opt,name=mem_kmem_tcp_usage_bytes,json=memKmemTcpUsageBytes" json:"mem_kmem_tcp_usage_bytes,omitempty"`
	// Hard memory limit.
	MemLimitBytes *uint64 `protobuf:"varint,6,opt,name=mem_limit_bytes,json=memLimitBytes" json:"mem_limit_bytes,omitempty"`
	// Soft memory limit.
	MemSoftLimitBytes *uint64 `protobuf:"varint,38,opt,name=mem_soft_limit_bytes,json=memSoftLimitBytes" json:"mem_soft_limit_bytes,omitempty"`
	// TODO(chzhcn) mem_file_bytes and mem_anon_bytes are deprecated in
	// 0.23.0 and will be removed in 0.24.0.
	MemFileBytes *uint64 `protobuf:"varint,10,opt,name=mem_file_bytes,json=memFileBytes" json:"mem_file_bytes,omitempty"`
	MemAnonBytes *uint64 `protobuf:"varint,11,opt,name=mem_anon_bytes,json=memAnonBytes" json:"mem_anon_bytes,omitempty"`
	// mem_cache_bytes is added in 0.23.0 to represent page cache usage.
	MemCacheBytes *uint64 `protobuf:"varint,39,opt,name=mem_cache_bytes,json=memCacheBytes" json:"mem_cache_bytes,omitempty"`
	// Since 0.23.0, mem_rss_bytes is changed to represent only
	// anonymous memory usage. Note that neither its requiredness, type,
	// name nor numeric tag has been changed.
	MemRssBytes        *uint64 `protobuf:"varint,5,opt,name=mem_rss_bytes,json=memRssBytes" json:"mem_rss_bytes,omitempty"`
	MemMappedFileBytes *uint64 `protobuf:"varint,12,opt,name=mem_mapped_file_bytes,json=memMappedFileBytes" json:"mem_mapped_file_bytes,omitempty"`
	// This is only set if swap is enabled.
	MemSwapBytes        *uint64 `protobuf:"varint,40,opt,name=mem_swap_bytes,json=memSwapBytes" json:"mem_swap_bytes,omitempty"`
	MemUnevictableBytes *uint64 `protobuf:"varint,41,opt,name=mem_unevictable_bytes,json=memUnevictableBytes" json:"mem_unevictable_bytes,omitempty"`
	// Number of occurrences of different levels of memory pressure
	// events reported by memory cgroup. Pressure listening (re)starts
	// with these values set to 0 when agent (re)starts. See
	// https://www.kernel.org/doc/Documentation/cgroups/memory.txt for
	// more details.
	MemLowPressureCounter      *uint64 `protobuf:"varint,32,opt,name=mem_low_pressure_counter,json=memLowPressureCounter" json:"mem_low_pressure_counter,omitempty"`
	MemMediumPressureCounter   *uint64 `protobuf:"varint,33,opt,name=mem_medium_pressure_counter,json=memMediumPressureCounter" json:"mem_medium_pressure_counter,omitempty"`
	MemCriticalPressureCounter *uint64 `protobuf:"varint,34,opt,name=mem_critical_pressure_counter,json=memCriticalPressureCounter" json:"mem_critical_pressure_counter,omitempty"`
	// Disk Usage Information for executor working directory.
	DiskLimitBytes *uint64 `protobuf:"varint,26,opt,name=disk_limit_bytes,json=diskLimitBytes" json:"disk_limit_bytes,omitempty"`
	DiskUsedBytes  *uint64 `protobuf:"varint,27,opt,name=disk_used_bytes,json=diskUsedBytes" json:"disk_used_bytes,omitempty"`
	// Per disk (resource) statistics.
	DiskStatistics []*DiskStatistics `protobuf:"bytes,43,rep,name=disk_statistics,json=diskStatistics" json:"disk_statistics,omitempty"`
	// Cgroups blkio statistics.
	BlkioStatistics *CgroupInfo_Blkio_Statistics `protobuf:"bytes,44,opt,name=blkio_statistics,json=blkioStatistics" json:"blkio_statistics,omitempty"`
	// Perf statistics.
	Perf *PerfStatistics `protobuf:"bytes,13,opt,name=perf" json:"perf,omitempty"`
	// Network Usage Information:
	NetRxPackets        *uint64                            `protobuf:"varint,14,opt,name=net_rx_packets,json=netRxPackets" json:"net_rx_packets,omitempty"`
	NetRxBytes          *uint64                            `protobuf:"varint,15,opt,name=net_rx_bytes,json=netRxBytes" json:"net_rx_bytes,omitempty"`
	NetRxErrors         *uint64                            `protobuf:"varint,16,opt,name=net_rx_errors,json=netRxErrors" json:"net_rx_errors,omitempty"`
	NetRxDropped        *uint64                            `protobuf:"varint,17,opt,name=net_rx_dropped,json=netRxDropped" json:"net_rx_dropped,omitempty"`
	NetTxPackets        *uint64                            `protobuf:"varint,18,opt,name=net_tx_packets,json=netTxPackets" json:"net_tx_packets,omitempty"`
	NetTxBytes          *uint64                            `protobuf:"varint,19,opt,name=net_tx_bytes,json=netTxBytes" json:"net_tx_bytes,omitempty"`
	NetTxErrors         *uint64                            `protobuf:"varint,20,opt,name=net_tx_errors,json=netTxErrors" json:"net_tx_errors,omitempty"`
	NetTxDropped        *uint64                            `protobuf:"varint,21,opt,name=net_tx_dropped,json=netTxDropped" json:"net_tx_dropped,omitempty"`
	NetTxRateLimit      *uint64                            `protobuf:"varint,46,opt,name=net_tx_rate_limit,json=netTxRateLimit" json:"net_tx_rate_limit,omitempty"`
	NetTxBurstRateLimit *uint64                            `protobuf:"varint,47,opt,name=net_tx_burst_rate_limit,json=netTxBurstRateLimit" json:"net_tx_burst_rate_limit,omitempty"`
	NetTxBurstSize      *uint64                            `protobuf:"varint,48,opt,name=net_tx_burst_size,json=netTxBurstSize" json:"net_tx_burst_size,omitempty"`
	NetRxRateLimit      *uint64                            `protobuf:"varint,49,opt,name=net_rx_rate_limit,json=netRxRateLimit" json:"net_rx_rate_limit,omitempty"`
	NetRxBurstRateLimit *uint64                            `protobuf:"varint,50,opt,name=net_rx_burst_rate_limit,json=netRxBurstRateLimit" json:"net_rx_burst_rate_limit,omitempty"`
	NetRxBurstSize      *uint64                            `protobuf:"varint,51,opt,name=net_rx_burst_size,json=netRxBurstSize" json:"net_rx_burst_size,omitempty"`
	NetRateStatistics   *ResourceStatistics_RateStatistics `protobuf:"bytes,54,opt,name=net_rate_statistics,json=netRateStatistics" json:"net_rate_statistics,omitempty"`
	// Inclusive ephemeral ports range of the container.
	NetEphemeralPorts *Value_Range `protobuf:"bytes,55,opt,name=net_ephemeral_ports,json=netEphemeralPorts" json:"net_ephemeral_ports,omitempty"`
	// The kernel keeps track of RTT (round-trip time) for its TCP
	// sockets. RTT is a way to tell the latency of a container.
	NetTcpRttMicrosecsP50     *float64 `protobuf:"fixed64,22,opt,name=net_tcp_rtt_microsecs_p50,json=netTcpRttMicrosecsP50" json:"net_tcp_rtt_microsecs_p50,omitempty"`
	NetTcpRttMicrosecsP90     *float64 `protobuf:"fixed64,23,opt,name=net_tcp_rtt_microsecs_p90,json=netTcpRttMicrosecsP90" json:"net_tcp_rtt_microsecs_p90,omitempty"`
	NetTcpRttMicrosecsP95     *float64 `protobuf:"fixed64,24,opt,name=net_tcp_rtt_microsecs_p95,json=netTcpRttMicrosecsP95" json:"net_tcp_rtt_microsecs_p95,omitempty"`
	NetTcpRttMicrosecsP99     *float64 `protobuf:"fixed64,25,opt,name=net_tcp_rtt_microsecs_p99,json=netTcpRttMicrosecsP99" json:"net_tcp_rtt_microsecs_p99,omitempty"`
	NetTcpActiveConnections   *float64 `protobuf:"fixed64,28,opt,name=net_tcp_active_connections,json=netTcpActiveConnections" json:"net_tcp_active_connections,omitempty"`
	NetTcpTimeWaitConnections *float64 `protobuf:"fixed64,29,opt,name=net_tcp_time_wait_connections,json=netTcpTimeWaitConnections" json:"net_tcp_time_wait_connections,omitempty"`
	// Network traffic flowing into or out of a container can be delayed
	// or dropped due to congestion or policy inside and outside the
	// container.
	NetTrafficControlStatistics []*TrafficControlStatistics `protobuf:"bytes,35,rep,name=net_traffic_control_statistics,json=netTrafficControlStatistics" json:"net_traffic_control_statistics,omitempty"`
	// Network SNMP statistics for each container.
	NetSnmpStatistics *SNMPStatistics `protobuf:"bytes,42,opt,name=net_snmp_statistics,json=netSnmpStatistics" json:"net_snmp_statistics,omitempty"`
}

func (x *ResourceStatistics) Reset() {
	*x = ResourceStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatistics) ProtoMessage() {}

func (x *ResourceStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatistics.ProtoReflect.Descriptor instead.
func (*ResourceStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{38}
}

func (x *ResourceStatistics) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ResourceStatistics) GetProcesses() uint32 {
	if x != nil && x.Processes != nil {
		return *x.Processes
	}
	return 0
}

func (x *ResourceStatistics) GetThreads() uint32 {
	if x != nil && x.Threads != nil {
		return *x.Threads
	}
	return 0
}

func (x *ResourceStatistics) GetCpusUserTimeSecs() float64 {
	if x != nil && x.CpusUserTimeSecs != nil {
		return *x.CpusUserTimeSecs
	}
	return 0
}

func (x *ResourceStatistics) GetCpusSystemTimeSecs() float64 {
	if x != nil && x.CpusSystemTimeSecs != nil {
		return *x.CpusSystemTimeSecs
	}
	return 0
}

func (x *ResourceStatistics) GetCpusLimit() float64 {
	if x != nil && x.CpusLimit != nil {
		return *x.CpusLimit
	}
	return 0
}

func (x *ResourceStatistics) GetCpusSoftLimit() float64 {
	if x != nil && x.CpusSoftLimit != nil {
		return *x.CpusSoftLimit
	}
	return 0
}

func (x *ResourceStatistics) GetCpusNrPeriods() uint32 {
	if x != nil && x.CpusNrPeriods != nil {
		return *x.CpusNrPeriods
	}
	return 0
}

func (x *ResourceStatistics) GetCpusNrThrottled() uint32 {
	if x != nil && x.CpusNrThrottled != nil {
		return *x.CpusNrThrottled
	}
	return 0
}

func (x *ResourceStatistics) GetCpusThrottledTimeSecs() float64 {
	if x != nil && x.CpusThrottledTimeSecs != nil {
		return *x.CpusThrottledTimeSecs
	}
	return 0
}

func (x *ResourceStatistics) GetMemTotalBytes() uint64 {
	if x != nil && x.MemTotalBytes != nil {
		return *x.MemTotalBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemTotalMemswBytes() uint64 {
	if x != nil && x.MemTotalMemswBytes != nil {
		return *x.MemTotalMemswBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemKmemUsageBytes() uint64 {
	if x != nil && x.MemKmemUsageBytes != nil {
		return *x.MemKmemUsageBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemKmemTcpUsageBytes() uint64 {
	if x != nil && x.MemKmemTcpUsageBytes != nil {
		return *x.MemKmemTcpUsageBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemLimitBytes() uint64 {
	if x != nil && x.MemLimitBytes != nil {
		return *x.MemLimitBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemSoftLimitBytes() uint64 {
	if x != nil && x.MemSoftLimitBytes != nil {
		return *x.MemSoftLimitBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemFileBytes() uint64 {
	if x != nil && x.MemFileBytes != nil {
		return *x.MemFileBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemAnonBytes() uint64 {
	if x != nil && x.MemAnonBytes != nil {
		return *x.MemAnonBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemCacheBytes() uint64 {
	if x != nil && x.MemCacheBytes != nil {
		return *x.MemCacheBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemRssBytes() uint64 {
	if x != nil && x.MemRssBytes != nil {
		return *x.MemRssBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemMappedFileBytes() uint64 {
	if x != nil && x.MemMappedFileBytes != nil {
		return *x.MemMappedFileBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemSwapBytes() uint64 {
	if x != nil && x.MemSwapBytes != nil {
		return *x.MemSwapBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemUnevictableBytes() uint64 {
	if x != nil && x.MemUnevictableBytes != nil {
		return *x.MemUnevictableBytes
	}
	return 0
}

func (x *ResourceStatistics) GetMemLowPressureCounter() uint64 {
	if x != nil && x.MemLowPressureCounter != nil {
		return *x.MemLowPressureCounter
	}
	return 0
}

func (x *ResourceStatistics) GetMemMediumPressureCounter() uint64 {
	if x != nil && x.MemMediumPressureCounter != nil {
		return *x.MemMediumPressureCounter
	}
	return 0
}

func (x *ResourceStatistics) GetMemCriticalPressureCounter() uint64 {
	if x != nil && x.MemCriticalPressureCounter != nil {
		return *x.MemCriticalPressureCounter
	}
	return 0
}

func (x *ResourceStatistics) GetDiskLimitBytes() uint64 {
	if x != nil && x.DiskLimitBytes != nil {
		return *x.DiskLimitBytes
	}
	return 0
}

func (x *ResourceStatistics) GetDiskUsedBytes() uint64 {
	if x != nil && x.DiskUsedBytes != nil {
		return *x.DiskUsedBytes
	}
	return 0
}

func (x *ResourceStatistics) GetDiskStatistics() []*DiskStatistics {
	if x != nil {
		return x.DiskStatistics
	}
	return nil
}

func (x *ResourceStatistics) GetBlkioStatistics() *CgroupInfo_Blkio_Statistics {
	if x != nil {
		return x.BlkioStatistics
	}
	return nil
}

func (x *ResourceStatistics) GetPerf() *PerfStatistics {
	if x != nil {
		return x.Perf
	}
	return nil
}

func (x *ResourceStatistics) GetNetRxPackets() uint64 {
	if x != nil && x.NetRxPackets != nil {
		return *x.NetRxPackets
	}
	return 0
}

func (x *ResourceStatistics) GetNetRxBytes() uint64 {
	if x != nil && x.NetRxBytes != nil {
		return *x.NetRxBytes
	}
	return 0
}

func (x *ResourceStatistics) GetNetRxErrors() uint64 {
	if x != nil && x.NetRxErrors != nil {
		return *x.NetRxErrors
	}
	return 0
}

func (x *ResourceStatistics) GetNetRxDropped() uint64 {
	if x != nil && x.NetRxDropped != nil {
		return *x.NetRxDropped
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxPackets() uint64 {
	if x != nil && x.NetTxPackets != nil {
		return *x.NetTxPackets
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxBytes() uint64 {
	if x != nil && x.NetTxBytes != nil {
		return *x.NetTxBytes
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxErrors() uint64 {
	if x != nil && x.NetTxErrors != nil {
		return *x.NetTxErrors
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxDropped() uint64 {
	if x != nil && x.NetTxDropped != nil {
		return *x.NetTxDropped
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxRateLimit() uint64 {
	if x != nil && x.NetTxRateLimit != nil {
		return *x.NetTxRateLimit
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxBurstRateLimit() uint64 {
	if x != nil && x.NetTxBurstRateLimit != nil {
		return *x.NetTxBurstRateLimit
	}
	return 0
}

func (x *ResourceStatistics) GetNetTxBurstSize() uint64 {
	if x != nil && x.NetTxBurstSize != nil {
		return *x.NetTxBurstSize
	}
	return 0
}

func (x *ResourceStatistics) GetNetRxRateLimit() uint64 {
	if x != nil && x.NetRxRateLimit != nil {
		return *x.NetRxRateLimit
	}
	return 0
}

func (x *ResourceStatistics) GetNetRxBurstRateLimit() uint64 {
	if x != nil && x.NetRxBurstRateLimit != nil {
		return *x.NetRxBurstRateLimit
	}
	return 0
}

func (x *ResourceStatistics) GetNetRxBurstSize() uint64 {
	if x != nil && x.NetRxBurstSize != nil {
		return *x.NetRxBurstSize
	}
	return 0
}

func (x *ResourceStatistics) GetNetRateStatistics() *ResourceStatistics_RateStatistics {
	if x != nil {
		return x.NetRateStatistics
	}
	return nil
}

func (x *ResourceStatistics) GetNetEphemeralPorts() *Value_Range {
	if x != nil {
		return x.NetEphemeralPorts
	}
	return nil
}

func (x *ResourceStatistics) GetNetTcpRttMicrosecsP50() float64 {
	if x != nil && x.NetTcpRttMicrosecsP50 != nil {
		return *x.NetTcpRttMicrosecsP50
	}
	return 0
}

func (x *ResourceStatistics) GetNetTcpRttMicrosecsP90() float64 {
	if x != nil && x.NetTcpRttMicrosecsP90 != nil {
		return *x.NetTcpRttMicrosecsP90
	}
	return 0
}

func (x *ResourceStatistics) GetNetTcpRttMicrosecsP95() float64 {
	if x != nil && x.NetTcpRttMicrosecsP95 != nil {
		return *x.NetTcpRttMicrosecsP95
	}
	return 0
}

func (x *ResourceStatistics) GetNetTcpRttMicrosecsP99() float64 {
	if x != nil && x.NetTcpRttMicrosecsP99 != nil {
		return *x.NetTcpRttMicrosecsP99
	}
	return 0
}

func (x *ResourceStatistics) GetNetTcpActiveConnections() float64 {
	if x != nil && x.NetTcpActiveConnections != nil {
		return *x.NetTcpActiveConnections
	}
	return 0
}

func (x *ResourceStatistics) GetNetTcpTimeWaitConnections() float64 {
	if x != nil && x.NetTcpTimeWaitConnections != nil {
		return *x.NetTcpTimeWaitConnections
	}
	return 0
}

func (x *ResourceStatistics) GetNetTrafficControlStatistics() []*TrafficControlStatistics {
	if x != nil {
		return x.NetTrafficControlStatistics
	}
	return nil
}

func (x *ResourceStatistics) GetNetSnmpStatistics() *SNMPStatistics {
	if x != nil {
		return x.NetSnmpStatistics
	}
	return nil
}

// *
// Describes a snapshot of the resource usage for executors.
type ResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executors []*ResourceUsage_Executor `protobuf:"bytes,1,rep,name=executors" json:"executors,omitempty"`
	// Agent's total resources including checkpointed dynamic
	// reservations and persistent volumes.
	Total []*Resource `protobuf:"bytes,2,rep,name=total" json:"total,omitempty"`
}

func (x *ResourceUsage) Reset() {
	*x = ResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage) ProtoMessage() {}

func (x *ResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage.ProtoReflect.Descriptor instead.
func (*ResourceUsage) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{39}
}

func (x *ResourceUsage) GetExecutors() []*ResourceUsage_Executor {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *ResourceUsage) GetTotal() []*Resource {
	if x != nil {
		return x.Total
	}
	return nil
}

// *
// Describes a sample of events from "perf stat". Only available on
// Linux.
//
// NOTE: Each optional field matches the name of a perf event (see
// "perf list") with the following changes:
//  1. Names are downcased.
//  2. Hyphens ('-') are replaced with underscores ('_').
//  3. Events with alternate names use the name "perf stat" returns,
//     e.g., for the event "cycles OR cpu-cycles" perf always returns
//     cycles.
type PerfStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *float64 `protobuf:"fixed64,1,req,name=timestamp" json:"timestamp,omitempty"` // Start of sample interval, in seconds since the Epoch.
	Duration  *float64 `protobuf:"fixed64,2,req,name=duration" json:"duration,omitempty"`   // Duration of sample interval, in seconds.
	// Hardware event.
	Cycles                *uint64 `protobuf:"varint,3,opt,name=cycles" json:"cycles,omitempty"`
	StalledCyclesFrontend *uint64 `protobuf:"varint,4,opt,name=stalled_cycles_frontend,json=stalledCyclesFrontend" json:"stalled_cycles_frontend,omitempty"`
	StalledCyclesBackend  *uint64 `protobuf:"varint,5,opt,name=stalled_cycles_backend,json=stalledCyclesBackend" json:"stalled_cycles_backend,omitempty"`
	Instructions          *uint64 `protobuf:"varint,6,opt,name=instructions" json:"instructions,omitempty"`
	CacheReferences       *uint64 `protobuf:"varint,7,opt,name=cache_references,json=cacheReferences" json:"cache_references,omitempty"`
	CacheMisses           *uint64 `protobuf:"varint,8,opt,name=cache_misses,json=cacheMisses" json:"cache_misses,omitempty"`
	Branches              *uint64 `protobuf:"varint,9,opt,name=branches" json:"branches,omitempty"`
	BranchMisses          *uint64 `protobuf:"varint,10,opt,name=branch_misses,json=branchMisses" json:"branch_misses,omitempty"`
	BusCycles             *uint64 `protobuf:"varint,11,opt,name=bus_cycles,json=busCycles" json:"bus_cycles,omitempty"`
	RefCycles             *uint64 `protobuf:"varint,12,opt,name=ref_cycles,json=refCycles" json:"ref_cycles,omitempty"`
	// Software event.
	CpuClock        *float64 `protobuf:"fixed64,13,opt,name=cpu_clock,json=cpuClock" json:"cpu_clock,omitempty"`
	TaskClock       *float64 `protobuf:"fixed64,14,opt,name=task_clock,json=taskClock" json:"task_clock,omitempty"`
	PageFaults      *uint64  `protobuf:"varint,15,opt,name=page_faults,json=pageFaults" json:"page_faults,omitempty"`
	MinorFaults     *uint64  `protobuf:"varint,16,opt,name=minor_faults,json=minorFaults" json:"minor_faults,omitempty"`
	MajorFaults     *uint64  `protobuf:"varint,17,opt,name=major_faults,json=majorFaults" json:"major_faults,omitempty"`
	ContextSwitches *uint64  `protobuf:"varint,18,opt,name=context_switches,json=contextSwitches" json:"context_switches,omitempty"`
	CpuMigrations   *uint64  `protobuf:"varint,19,opt,name=cpu_migrations,json=cpuMigrations" json:"cpu_migrations,omitempty"`
	AlignmentFaults *uint64  `protobuf:"varint,20,opt,name=alignment_faults,json=alignmentFaults" json:"alignment_faults,omitempty"`
	EmulationFaults *uint64  `protobuf:"varint,21,opt,name=emulation_faults,json=emulationFaults" json:"emulation_faults,omitempty"`
	// Hardware cache event.
	L1DcacheLoads          *uint64 `protobuf:"varint,22,opt,name=l1_dcache_loads,json=l1DcacheLoads" json:"l1_dcache_loads,omitempty"`
	L1DcacheLoadMisses     *uint64 `protobuf:"varint,23,opt,name=l1_dcache_load_misses,json=l1DcacheLoadMisses" json:"l1_dcache_load_misses,omitempty"`
	L1DcacheStores         *uint64 `protobuf:"varint,24,opt,name=l1_dcache_stores,json=l1DcacheStores" json:"l1_dcache_stores,omitempty"`
	L1DcacheStoreMisses    *uint64 `protobuf:"varint,25,opt,name=l1_dcache_store_misses,json=l1DcacheStoreMisses" json:"l1_dcache_store_misses,omitempty"`
	L1DcachePrefetches     *uint64 `protobuf:"varint,26,opt,name=l1_dcache_prefetches,json=l1DcachePrefetches" json:"l1_dcache_prefetches,omitempty"`
	L1DcachePrefetchMisses *uint64 `protobuf:"varint,27,opt,name=l1_dcache_prefetch_misses,json=l1DcachePrefetchMisses" json:"l1_dcache_prefetch_misses,omitempty"`
	L1IcacheLoads          *uint64 `protobuf:"varint,28,opt,name=l1_icache_loads,json=l1IcacheLoads" json:"l1_icache_loads,omitempty"`
	L1IcacheLoadMisses     *uint64 `protobuf:"varint,29,opt,name=l1_icache_load_misses,json=l1IcacheLoadMisses" json:"l1_icache_load_misses,omitempty"`
	L1IcachePrefetches     *uint64 `protobuf:"varint,30,opt,name=l1_icache_prefetches,json=l1IcachePrefetches" json:"l1_icache_prefetches,omitempty"`
	L1IcachePrefetchMisses *uint64 `protobuf:"varint,31,opt,name=l1_icache_prefetch_misses,json=l1IcachePrefetchMisses" json:"l1_icache_prefetch_misses,omitempty"`
	LlcLoads               *uint64 `protobuf:"varint,32,opt,name=llc_loads,json=llcLoads" json:"llc_loads,omitempty"`
	LlcLoadMisses          *uint64 `protobuf:"varint,33,opt,name=llc_load_misses,json=llcLoadMisses" json:"llc_load_misses,omitempty"`
	LlcStores              *uint64 `protobuf:"varint,34,opt,name=llc_stores,json=llcStores" json:"llc_stores,omitempty"`
	LlcStoreMisses         *uint64 `protobuf:"varint,35,opt,name=llc_store_misses,json=llcStoreMisses" json:"llc_store_misses,omitempty"`
	LlcPrefetches          *uint64 `protobuf:"varint,36,opt,name=llc_prefetches,json=llcPrefetches" json:"llc_prefetches,omitempty"`
	LlcPrefetchMisses      *uint64 `protobuf:"varint,37,opt,name=llc_prefetch_misses,json=llcPrefetchMisses" json:"llc_prefetch_misses,omitempty"`
	DtlbLoads              *uint64 `protobuf:"varint,38,opt,name=dtlb_loads,json=dtlbLoads" json:"dtlb_loads,omitempty"`
	DtlbLoadMisses         *uint64 `protobuf:"varint,39,opt,name=dtlb_load_misses,json=dtlbLoadMisses" json:"dtlb_load_misses,omitempty"`
	DtlbStores             *uint64 `protobuf:"varint,40,opt,name=dtlb_stores,json=dtlbStores" json:"dtlb_stores,omitempty"`
	DtlbStoreMisses        *uint64 `protobuf:"varint,41,opt,name=dtlb_store_misses,json=dtlbStoreMisses" json:"dtlb_store_misses,omitempty"`
	DtlbPrefetches         *uint64 `protobuf:"varint,42,opt,name=dtlb_prefetches,json=dtlbPrefetches" json:"dtlb_prefetches,omitempty"`
	DtlbPrefetchMisses     *uint64 `protobuf:"varint,43,opt,name=dtlb_prefetch_misses,json=dtlbPrefetchMisses" json:"dtlb_prefetch_misses,omitempty"`
	ItlbLoads              *uint64 `protobuf:"varint,44,opt,name=itlb_loads,json=itlbLoads" json:"itlb_loads,omitempty"`
	ItlbLoadMisses         *uint64 `protobuf:"varint,45,opt,name=itlb_load_misses,json=itlbLoadMisses" json:"itlb_load_misses,omitempty"`
	BranchLoads            *uint64 `protobuf:"varint,46,opt,name=branch_loads,json=branchLoads" json:"branch_loads,omitempty"`
	BranchLoadMisses       *uint64 `protobuf:"varint,47,opt,name=branch_load_misses,json=branchLoadMisses" json:"branch_load_misses,omitempty"`
	NodeLoads              *uint64 `protobuf:"varint,48,opt,name=node_loads,json=nodeLoads" json:"node_loads,omitempty"`
	NodeLoadMisses         *uint64 `protobuf:"varint,49,opt,name=node_load_misses,json=nodeLoadMisses" json:"node_load_misses,omitempty"`
	NodeStores             *uint64 `protobuf:"varint,50,opt,name=node_stores,json=nodeStores" json:"node_stores,omitempty"`
	NodeStoreMisses        *uint64 `protobuf:"varint,51,opt,name=node_store_misses,json=nodeStoreMisses" json:"node_store_misses,omitempty"`
	NodePrefetches         *uint64 `protobuf:"varint,52,opt,name=node_prefetches,json=nodePrefetches" json:"node_prefetches,omitempty"`
	NodePrefetchMisses     *uint64 `protobuf:"varint,53,opt,name=node_prefetch_misses,json=nodePrefetchMisses" json:"node_prefetch_misses,omitempty"`
}

func (x *PerfStatistics) Reset() {
	*x = PerfStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfStatistics) ProtoMessage() {}

func (x *PerfStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfStatistics.ProtoReflect.Descriptor instead.
func (*PerfStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{40}
}

func (x *PerfStatistics) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *PerfStatistics) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *PerfStatistics) GetCycles() uint64 {
	if x != nil && x.Cycles != nil {
		return *x.Cycles
	}
	return 0
}

func (x *PerfStatistics) GetStalledCyclesFrontend() uint64 {
	if x != nil && x.StalledCyclesFrontend != nil {
		return *x.StalledCyclesFrontend
	}
	return 0
}

func (x *PerfStatistics) GetStalledCyclesBackend() uint64 {
	if x != nil && x.StalledCyclesBackend != nil {
		return *x.StalledCyclesBackend
	}
	return 0
}

func (x *PerfStatistics) GetInstructions() uint64 {
	if x != nil && x.Instructions != nil {
		return *x.Instructions
	}
	return 0
}

func (x *PerfStatistics) GetCacheReferences() uint64 {
	if x != nil && x.CacheReferences != nil {
		return *x.CacheReferences
	}
	return 0
}

func (x *PerfStatistics) GetCacheMisses() uint64 {
	if x != nil && x.CacheMisses != nil {
		return *x.CacheMisses
	}
	return 0
}

func (x *PerfStatistics) GetBranches() uint64 {
	if x != nil && x.Branches != nil {
		return *x.Branches
	}
	return 0
}

func (x *PerfStatistics) GetBranchMisses() uint64 {
	if x != nil && x.BranchMisses != nil {
		return *x.BranchMisses
	}
	return 0
}

func (x *PerfStatistics) GetBusCycles() uint64 {
	if x != nil && x.BusCycles != nil {
		return *x.BusCycles
	}
	return 0
}

func (x *PerfStatistics) GetRefCycles() uint64 {
	if x != nil && x.RefCycles != nil {
		return *x.RefCycles
	}
	return 0
}

func (x *PerfStatistics) GetCpuClock() float64 {
	if x != nil && x.CpuClock != nil {
		return *x.CpuClock
	}
	return 0
}

func (x *PerfStatistics) GetTaskClock() float64 {
	if x != nil && x.TaskClock != nil {
		return *x.TaskClock
	}
	return 0
}

func (x *PerfStatistics) GetPageFaults() uint64 {
	if x != nil && x.PageFaults != nil {
		return *x.PageFaults
	}
	return 0
}

func (x *PerfStatistics) GetMinorFaults() uint64 {
	if x != nil && x.MinorFaults != nil {
		return *x.MinorFaults
	}
	return 0
}

func (x *PerfStatistics) GetMajorFaults() uint64 {
	if x != nil && x.MajorFaults != nil {
		return *x.MajorFaults
	}
	return 0
}

func (x *PerfStatistics) GetContextSwitches() uint64 {
	if x != nil && x.ContextSwitches != nil {
		return *x.ContextSwitches
	}
	return 0
}

func (x *PerfStatistics) GetCpuMigrations() uint64 {
	if x != nil && x.CpuMigrations != nil {
		return *x.CpuMigrations
	}
	return 0
}

func (x *PerfStatistics) GetAlignmentFaults() uint64 {
	if x != nil && x.AlignmentFaults != nil {
		return *x.AlignmentFaults
	}
	return 0
}

func (x *PerfStatistics) GetEmulationFaults() uint64 {
	if x != nil && x.EmulationFaults != nil {
		return *x.EmulationFaults
	}
	return 0
}

func (x *PerfStatistics) GetL1DcacheLoads() uint64 {
	if x != nil && x.L1DcacheLoads != nil {
		return *x.L1DcacheLoads
	}
	return 0
}

func (x *PerfStatistics) GetL1DcacheLoadMisses() uint64 {
	if x != nil && x.L1DcacheLoadMisses != nil {
		return *x.L1DcacheLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetL1DcacheStores() uint64 {
	if x != nil && x.L1DcacheStores != nil {
		return *x.L1DcacheStores
	}
	return 0
}

func (x *PerfStatistics) GetL1DcacheStoreMisses() uint64 {
	if x != nil && x.L1DcacheStoreMisses != nil {
		return *x.L1DcacheStoreMisses
	}
	return 0
}

func (x *PerfStatistics) GetL1DcachePrefetches() uint64 {
	if x != nil && x.L1DcachePrefetches != nil {
		return *x.L1DcachePrefetches
	}
	return 0
}

func (x *PerfStatistics) GetL1DcachePrefetchMisses() uint64 {
	if x != nil && x.L1DcachePrefetchMisses != nil {
		return *x.L1DcachePrefetchMisses
	}
	return 0
}

func (x *PerfStatistics) GetL1IcacheLoads() uint64 {
	if x != nil && x.L1IcacheLoads != nil {
		return *x.L1IcacheLoads
	}
	return 0
}

func (x *PerfStatistics) GetL1IcacheLoadMisses() uint64 {
	if x != nil && x.L1IcacheLoadMisses != nil {
		return *x.L1IcacheLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetL1IcachePrefetches() uint64 {
	if x != nil && x.L1IcachePrefetches != nil {
		return *x.L1IcachePrefetches
	}
	return 0
}

func (x *PerfStatistics) GetL1IcachePrefetchMisses() uint64 {
	if x != nil && x.L1IcachePrefetchMisses != nil {
		return *x.L1IcachePrefetchMisses
	}
	return 0
}

func (x *PerfStatistics) GetLlcLoads() uint64 {
	if x != nil && x.LlcLoads != nil {
		return *x.LlcLoads
	}
	return 0
}

func (x *PerfStatistics) GetLlcLoadMisses() uint64 {
	if x != nil && x.LlcLoadMisses != nil {
		return *x.LlcLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetLlcStores() uint64 {
	if x != nil && x.LlcStores != nil {
		return *x.LlcStores
	}
	return 0
}

func (x *PerfStatistics) GetLlcStoreMisses() uint64 {
	if x != nil && x.LlcStoreMisses != nil {
		return *x.LlcStoreMisses
	}
	return 0
}

func (x *PerfStatistics) GetLlcPrefetches() uint64 {
	if x != nil && x.LlcPrefetches != nil {
		return *x.LlcPrefetches
	}
	return 0
}

func (x *PerfStatistics) GetLlcPrefetchMisses() uint64 {
	if x != nil && x.LlcPrefetchMisses != nil {
		return *x.LlcPrefetchMisses
	}
	return 0
}

func (x *PerfStatistics) GetDtlbLoads() uint64 {
	if x != nil && x.DtlbLoads != nil {
		return *x.DtlbLoads
	}
	return 0
}

func (x *PerfStatistics) GetDtlbLoadMisses() uint64 {
	if x != nil && x.DtlbLoadMisses != nil {
		return *x.DtlbLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetDtlbStores() uint64 {
	if x != nil && x.DtlbStores != nil {
		return *x.DtlbStores
	}
	return 0
}

func (x *PerfStatistics) GetDtlbStoreMisses() uint64 {
	if x != nil && x.DtlbStoreMisses != nil {
		return *x.DtlbStoreMisses
	}
	return 0
}

func (x *PerfStatistics) GetDtlbPrefetches() uint64 {
	if x != nil && x.DtlbPrefetches != nil {
		return *x.DtlbPrefetches
	}
	return 0
}

func (x *PerfStatistics) GetDtlbPrefetchMisses() uint64 {
	if x != nil && x.DtlbPrefetchMisses != nil {
		return *x.DtlbPrefetchMisses
	}
	return 0
}

func (x *PerfStatistics) GetItlbLoads() uint64 {
	if x != nil && x.ItlbLoads != nil {
		return *x.ItlbLoads
	}
	return 0
}

func (x *PerfStatistics) GetItlbLoadMisses() uint64 {
	if x != nil && x.ItlbLoadMisses != nil {
		return *x.ItlbLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetBranchLoads() uint64 {
	if x != nil && x.BranchLoads != nil {
		return *x.BranchLoads
	}
	return 0
}

func (x *PerfStatistics) GetBranchLoadMisses() uint64 {
	if x != nil && x.BranchLoadMisses != nil {
		return *x.BranchLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetNodeLoads() uint64 {
	if x != nil && x.NodeLoads != nil {
		return *x.NodeLoads
	}
	return 0
}

func (x *PerfStatistics) GetNodeLoadMisses() uint64 {
	if x != nil && x.NodeLoadMisses != nil {
		return *x.NodeLoadMisses
	}
	return 0
}

func (x *PerfStatistics) GetNodeStores() uint64 {
	if x != nil && x.NodeStores != nil {
		return *x.NodeStores
	}
	return 0
}

func (x *PerfStatistics) GetNodeStoreMisses() uint64 {
	if x != nil && x.NodeStoreMisses != nil {
		return *x.NodeStoreMisses
	}
	return 0
}

func (x *PerfStatistics) GetNodePrefetches() uint64 {
	if x != nil && x.NodePrefetches != nil {
		return *x.NodePrefetches
	}
	return 0
}

func (x *PerfStatistics) GetNodePrefetchMisses() uint64 {
	if x != nil && x.NodePrefetchMisses != nil {
		return *x.NodePrefetchMisses
	}
	return 0
}

// *
// Represents filters that allow a framework to control the shape of
// offers that will be sent to its role(s). These filters apply
// globally to any agent (unlike the existing `DECLINE` filter which
// us a time-based resource subset filter that only applies to the
// agent that was declined).
//
// NOTE: Custom allocators might interpret these fields in a different
// way, or not at all.
type OfferFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinAllocatableResources *OfferFilters_MinAllocatableResources `protobuf:"bytes,1,opt,name=min_allocatable_resources,json=minAllocatableResources" json:"min_allocatable_resources,omitempty"`
}

func (x *OfferFilters) Reset() {
	*x = OfferFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferFilters) ProtoMessage() {}

func (x *OfferFilters) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferFilters.ProtoReflect.Descriptor instead.
func (*OfferFilters) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{41}
}

func (x *OfferFilters) GetMinAllocatableResources() *OfferFilters_MinAllocatableResources {
	if x != nil {
		return x.MinAllocatableResources
	}
	return nil
}

// *
// Describes a request for resources that can be used by a framework
// to proactively influence the allocator.  If 'agent_id' is provided
// then this request is assumed to only apply to resources on that
// agent.
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId   *AgentID    `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Resources []*Resource `protobuf:"bytes,2,rep,name=resources" json:"resources,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{42}
}

func (x *Request) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Request) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// *
// Describes some resources available on an agent. An offer only
// contains resources from a single agent.
type Offer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *OfferID     `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	FrameworkId *FrameworkID `protobuf:"bytes,2,req,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	AgentId     *AgentID     `protobuf:"bytes,3,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Hostname    *string      `protobuf:"bytes,4,req,name=hostname" json:"hostname,omitempty"`
	// URL for reaching the agent running on the host.
	Url *URL `protobuf:"bytes,8,opt,name=url" json:"url,omitempty"`
	// The domain of the agent.
	Domain     *DomainInfo  `protobuf:"bytes,11,opt,name=domain" json:"domain,omitempty"`
	Resources  []*Resource  `protobuf:"bytes,5,rep,name=resources" json:"resources,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,7,rep,name=attributes" json:"attributes,omitempty"`
	// Executors of the same framework running on this agent.
	ExecutorIds []*ExecutorID `protobuf:"bytes,6,rep,name=executor_ids,json=executorIds" json:"executor_ids,omitempty"`
	// Signifies that the resources in this Offer may be unavailable during
	// the given interval.  Any tasks launched using these resources may be
	// killed when the interval arrives.  For example, these resources may be
	// part of a planned maintenance schedule.
	//
	// This field only provides information about a planned unavailability.
	// The unavailability interval may not necessarily start at exactly this
	// interval, nor last for exactly the duration of this interval.
	// The unavailability may also be forever!  See comments in
	// `Unavailability` for more details.
	Unavailability *Unavailability `protobuf:"bytes,9,opt,name=unavailability" json:"unavailability,omitempty"`
	// An offer represents resources allocated to *one* of the
	// roles managed by the scheduler. (Therefore, each
	// `Offer.resources[i].allocation_info` will match the
	// top level `Offer.allocation_info`).
	AllocationInfo *Resource_AllocationInfo `protobuf:"bytes,10,opt,name=allocation_info,json=allocationInfo" json:"allocation_info,omitempty"`
}

func (x *Offer) Reset() {
	*x = Offer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer) ProtoMessage() {}

func (x *Offer) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer.ProtoReflect.Descriptor instead.
func (*Offer) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43}
}

func (x *Offer) GetId() *OfferID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Offer) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *Offer) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Offer) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *Offer) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Offer) GetDomain() *DomainInfo {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *Offer) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Offer) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Offer) GetExecutorIds() []*ExecutorID {
	if x != nil {
		return x.ExecutorIds
	}
	return nil
}

func (x *Offer) GetUnavailability() *Unavailability {
	if x != nil {
		return x.Unavailability
	}
	return nil
}

func (x *Offer) GetAllocationInfo() *Resource_AllocationInfo {
	if x != nil {
		return x.AllocationInfo
	}
	return nil
}

// *
// A request to return some resources occupied by a framework.
type InverseOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the same OfferID as found in normal offers, which allows
	// re-use of some of the OfferID-only messages.
	Id *OfferID `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// URL for reaching the agent running on the host.  This enables some
	// optimizations as described in MESOS-3012, such as allowing the
	// scheduler driver to bypass the master and talk directly with an agent.
	Url *URL `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// The framework that should release its resources.
	// If no specifics are provided (i.e. which agent), all the framework's
	// resources are requested back.
	FrameworkId *FrameworkID `protobuf:"bytes,3,req,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	// Specified if the resources need to be released from a particular agent.
	// All the framework's resources on this agent are requested back,
	// unless further qualified by the `resources` field.
	AgentId *AgentID `protobuf:"bytes,4,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	// This InverseOffer represents a planned unavailability event in the
	// specified interval.  Any tasks running on the given framework or agent
	// may be killed when the interval arrives.  Therefore, frameworks should
	// aim to gracefully terminate tasks prior to the arrival of the interval.
	//
	// For reserved resources, the resources are expected to be returned to the
	// framework after the unavailability interval.  This is an expectation,
	// not a guarantee.  For example, if the unavailability duration is not set,
	// the resources may be removed permanently.
	//
	// For other resources, there is no guarantee that requested resources will
	// be returned after the unavailability interval.  The allocator has no
	// obligation to re-offer these resources to the prior framework after
	// the unavailability.
	Unavailability *Unavailability `protobuf:"bytes,5,req,name=unavailability" json:"unavailability,omitempty"`
	// A list of resources being requested back from the framework,
	// on the agent identified by `agent_id`.  If no resources are specified
	// then all resources are being requested back.  For the purpose of
	// maintenance, this field is always empty (maintenance always requests
	// all resources back).
	Resources []*Resource `protobuf:"bytes,6,rep,name=resources" json:"resources,omitempty"`
}

func (x *InverseOffer) Reset() {
	*x = InverseOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InverseOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InverseOffer) ProtoMessage() {}

func (x *InverseOffer) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InverseOffer.ProtoReflect.Descriptor instead.
func (*InverseOffer) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{44}
}

func (x *InverseOffer) GetId() *OfferID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *InverseOffer) GetUrl() *URL {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *InverseOffer) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *InverseOffer) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *InverseOffer) GetUnavailability() *Unavailability {
	if x != nil {
		return x.Unavailability
	}
	return nil
}

func (x *InverseOffer) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// *
// Describes a task. Passed from the scheduler all the way to an
// executor (see SchedulerDriver::launchTasks and
// Executor::launchTask). Either ExecutorInfo or CommandInfo should be set.
// A different executor can be used to launch this task, and subsequent tasks
// meant for the same executor can reuse the same ExecutorInfo struct.
type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	TaskId    *TaskID       `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	AgentId   *AgentID      `protobuf:"bytes,3,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Resources []*Resource   `protobuf:"bytes,4,rep,name=resources" json:"resources,omitempty"`
	Executor  *ExecutorInfo `protobuf:"bytes,5,opt,name=executor" json:"executor,omitempty"`
	Command   *CommandInfo  `protobuf:"bytes,7,opt,name=command" json:"command,omitempty"`
	// Task provided with a container will launch the container as part
	// of this task paired with the task's CommandInfo.
	Container *ContainerInfo `protobuf:"bytes,9,opt,name=container" json:"container,omitempty"`
	// A health check for the task. Implemented for executor-less
	// command-based tasks. For tasks that specify an executor, it is
	// the executor's responsibility to implement the health checking.
	HealthCheck *HealthCheck `protobuf:"bytes,8,opt,name=health_check,json=healthCheck" json:"health_check,omitempty"`
	// A general check for the task. Implemented for all built-in executors.
	// For tasks that specify an executor, it is the executor's responsibility
	// to implement checking support. Executors should (all built-in executors
	// will) neither interpret nor act on the check's result.
	//
	// NOTE: Check support in built-in executors is experimental.
	//
	// TODO(alexr): Consider supporting multiple checks per task.
	Check *CheckInfo `protobuf:"bytes,13,opt,name=check" json:"check,omitempty"`
	// A kill policy for the task. Implemented for executor-less
	// command-based and docker tasks. For tasks that specify an
	// executor, it is the executor's responsibility to implement
	// the kill policy.
	KillPolicy *KillPolicy `protobuf:"bytes,12,opt,name=kill_policy,json=killPolicy" json:"kill_policy,omitempty"`
	Data       []byte      `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	// Labels are free-form key value pairs which are exposed through
	// master and agent endpoints. Labels will not be interpreted or
	// acted upon by Mesos itself. As opposed to the data field, labels
	// will be kept in memory on master and agent processes. Therefore,
	// labels should be used to tag tasks with light-weight meta-data.
	// Labels should not contain duplicate key-value pairs.
	Labels *Labels `protobuf:"bytes,10,opt,name=labels" json:"labels,omitempty"`
	// Service discovery information for the task. It is not interpreted
	// or acted upon by Mesos. It is up to a service discovery system
	// to use this information as needed and to handle tasks without
	// service discovery information.
	Discovery *DiscoveryInfo `protobuf:"bytes,11,opt,name=discovery" json:"discovery,omitempty"`
	// Maximum duration for task completion. If the task is non-terminal at the
	// end of this duration, it will fail with the reason
	// `REASON_MAX_COMPLETION_TIME_REACHED`. Mesos supports this field for
	// executor-less tasks, and tasks that use Docker or default executors.
	// It is the executor's responsibility to implement this, so it might not be
	// supported by all custom executors.
	MaxCompletionTime *DurationInfo `protobuf:"bytes,14,opt,name=max_completion_time,json=maxCompletionTime" json:"max_completion_time,omitempty"`
	// Resource limits associated with the task.
	Limits map[string]*Value_Scalar `protobuf:"bytes,15,rep,name=limits" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{45}
}

func (x *TaskInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TaskInfo) GetTaskId() *TaskID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskInfo) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *TaskInfo) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskInfo) GetExecutor() *ExecutorInfo {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *TaskInfo) GetCommand() *CommandInfo {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *TaskInfo) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *TaskInfo) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *TaskInfo) GetCheck() *CheckInfo {
	if x != nil {
		return x.Check
	}
	return nil
}

func (x *TaskInfo) GetKillPolicy() *KillPolicy {
	if x != nil {
		return x.KillPolicy
	}
	return nil
}

func (x *TaskInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskInfo) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TaskInfo) GetDiscovery() *DiscoveryInfo {
	if x != nil {
		return x.Discovery
	}
	return nil
}

func (x *TaskInfo) GetMaxCompletionTime() *DurationInfo {
	if x != nil {
		return x.MaxCompletionTime
	}
	return nil
}

func (x *TaskInfo) GetLimits() map[string]*Value_Scalar {
	if x != nil {
		return x.Limits
	}
	return nil
}

// *
// Describes a group of tasks that belong to an executor. The
// executor will receive the task group in a single message to
// allow the group to be launched "atomically".
//
// NOTES:
//  1. `NetworkInfo` must not be set inside task's `ContainerInfo`.
//  2. `TaskInfo.executor` doesn't need to set. If set, it should match
//     `LaunchGroup.executor`.
type TaskGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskInfo `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (x *TaskGroupInfo) Reset() {
	*x = TaskGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGroupInfo) ProtoMessage() {}

func (x *TaskGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGroupInfo.ProtoReflect.Descriptor instead.
func (*TaskGroupInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{46}
}

func (x *TaskGroupInfo) GetTasks() []*TaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// *
// Describes a task, similar to `TaskInfo`.
//
// `Task` is used in some of the Mesos messages found below.
// `Task` is used instead of `TaskInfo` if:
//  1. we need additional IDs, such as a specific
//     framework, executor, or agent; or
//  2. we do not need the additional data, such as the command run by the
//     task. These additional fields may be large and unnecessary for some
//     Mesos messages.
//
// `Task` is generally constructed from a `TaskInfo`.  See protobuf::createTask.
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        *string       `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	TaskId      *TaskID       `protobuf:"bytes,2,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	FrameworkId *FrameworkID  `protobuf:"bytes,3,req,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	ExecutorId  *ExecutorID   `protobuf:"bytes,4,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"`
	AgentId     *AgentID      `protobuf:"bytes,5,req,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	State       *TaskState    `protobuf:"varint,6,req,name=state,enum=mesos.v1.TaskState" json:"state,omitempty"` // Latest state of the task.
	Resources   []*Resource   `protobuf:"bytes,7,rep,name=resources" json:"resources,omitempty"`
	Statuses    []*TaskStatus `protobuf:"bytes,8,rep,name=statuses" json:"statuses,omitempty"`
	// These fields correspond to the state and uuid of the latest
	// status update forwarded to the master.
	// NOTE: Either both the fields must be set or both must be unset.
	StatusUpdateState *TaskState `protobuf:"varint,9,opt,name=status_update_state,json=statusUpdateState,enum=mesos.v1.TaskState" json:"status_update_state,omitempty"`
	StatusUpdateUuid  []byte     `protobuf:"bytes,10,opt,name=status_update_uuid,json=statusUpdateUuid" json:"status_update_uuid,omitempty"`
	Labels            *Labels    `protobuf:"bytes,11,opt,name=labels" json:"labels,omitempty"`
	// Service discovery information for the task. It is not interpreted
	// or acted upon by Mesos. It is up to a service discovery system
	// to use this information as needed and to handle tasks without
	// service discovery information.
	Discovery *DiscoveryInfo `protobuf:"bytes,12,opt,name=discovery" json:"discovery,omitempty"`
	// Container information for the task.
	Container   *ContainerInfo `protobuf:"bytes,13,opt,name=container" json:"container,omitempty"`
	HealthCheck *HealthCheck   `protobuf:"bytes,15,opt,name=health_check,json=healthCheck" json:"health_check,omitempty"`
	// The kill policy used for this task when it is killed. It's possible for
	// this policy to be overridden by the scheduler when killing the task.
	KillPolicy *KillPolicy `protobuf:"bytes,16,opt,name=kill_policy,json=killPolicy" json:"kill_policy,omitempty"`
	// Specific user under which task is running.
	User *string `protobuf:"bytes,14,opt,name=user" json:"user,omitempty"`
	// Resource limits associated with the task.
	Limits map[string]*Value_Scalar `protobuf:"bytes,17,rep,name=limits" json:"limits,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{47}
}

func (x *Task) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Task) GetTaskId() *TaskID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *Task) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *Task) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *Task) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Task) GetState() TaskState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TaskState_TASK_STAGING
}

func (x *Task) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Task) GetStatuses() []*TaskStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Task) GetStatusUpdateState() TaskState {
	if x != nil && x.StatusUpdateState != nil {
		return *x.StatusUpdateState
	}
	return TaskState_TASK_STAGING
}

func (x *Task) GetStatusUpdateUuid() []byte {
	if x != nil {
		return x.StatusUpdateUuid
	}
	return nil
}

func (x *Task) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Task) GetDiscovery() *DiscoveryInfo {
	if x != nil {
		return x.Discovery
	}
	return nil
}

func (x *Task) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Task) GetHealthCheck() *HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *Task) GetKillPolicy() *KillPolicy {
	if x != nil {
		return x.KillPolicy
	}
	return nil
}

func (x *Task) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *Task) GetLimits() map[string]*Value_Scalar {
	if x != nil {
		return x.Limits
	}
	return nil
}

// *
// Describes a resource limitation that caused a task failure.
type TaskResourceLimitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field contains the resource whose limits were violated.
	//
	// NOTE: 'Resources' is used here because the resource may span
	// multiple roles (e.g. `"mem(*):1;mem(role):2"`).
	Resources []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
}

func (x *TaskResourceLimitation) Reset() {
	*x = TaskResourceLimitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResourceLimitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourceLimitation) ProtoMessage() {}

func (x *TaskResourceLimitation) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourceLimitation.ProtoReflect.Descriptor instead.
func (*TaskResourceLimitation) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{48}
}

func (x *TaskResourceLimitation) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// *
// A 128 bit (16 byte) UUID, see RFC 4122.
type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{49}
}

func (x *UUID) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// *
// Describes an operation, similar to `Offer.Operation`, with
// some additional information.
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameworkId  *FrameworkID     `protobuf:"bytes,1,opt,name=framework_id,json=frameworkId" json:"framework_id,omitempty"`
	AgentId      *AgentID         `protobuf:"bytes,2,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Info         *Offer_Operation `protobuf:"bytes,3,req,name=info" json:"info,omitempty"`
	LatestStatus *OperationStatus `protobuf:"bytes,4,req,name=latest_status,json=latestStatus" json:"latest_status,omitempty"`
	// All the statuses known to this operation. Some of the statuses in this
	// list might not have been acknowledged yet. The statuses are ordered.
	Statuses []*OperationStatus `protobuf:"bytes,5,rep,name=statuses" json:"statuses,omitempty"`
	// This is the internal UUID for the operation, which is kept independently
	// from the framework-specified operation ID, which is optional.
	Uuid *UUID `protobuf:"bytes,6,req,name=uuid" json:"uuid,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{50}
}

func (x *Operation) GetFrameworkId() *FrameworkID {
	if x != nil {
		return x.FrameworkId
	}
	return nil
}

func (x *Operation) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *Operation) GetInfo() *Offer_Operation {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Operation) GetLatestStatus() *OperationStatus {
	if x != nil {
		return x.LatestStatus
	}
	return nil
}

func (x *Operation) GetStatuses() []*OperationStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Operation) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

// *
// Describes the current status of an operation.
type OperationStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// While frameworks will only receive status updates for operations on which
	// they have set an ID, this field is optional because this message is also
	// used internally by Mesos components when the operation's ID has not been
	// set.
	OperationId *OperationID    `protobuf:"bytes,1,opt,name=operation_id,json=operationId" json:"operation_id,omitempty"`
	State       *OperationState `protobuf:"varint,2,req,name=state,enum=mesos.v1.OperationState" json:"state,omitempty"`
	Message     *string         `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// Converted resources after applying the operation. This only
	// applies if the `state` is `OPERATION_FINISHED`.
	ConvertedResources []*Resource `protobuf:"bytes,4,rep,name=converted_resources,json=convertedResources" json:"converted_resources,omitempty"`
	// Statuses that are delivered reliably to the scheduler will
	// include a `uuid`. The status is considered delivered once
	// it is acknowledged by the scheduler.
	Uuid *UUID `protobuf:"bytes,5,opt,name=uuid" json:"uuid,omitempty"`
	// If the operation affects resources from a local resource provider,
	// both `agent_id` and `resource_provider_id` will be set.
	//
	// If the operation affects resources that belong to an external
	// resource provider, only `resource_provider_id` will be set.
	//
	// In certain cases, e.g., invalid operations, neither `uuid`,
	// `slave_id` nor `resource_provider_id` will be set, and the
	// scheduler does not need to acknowledge this status update.
	AgentId            *AgentID            `protobuf:"bytes,6,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ResourceProviderId *ResourceProviderID `protobuf:"bytes,7,opt,name=resource_provider_id,json=resourceProviderId" json:"resource_provider_id,omitempty"`
}

func (x *OperationStatus) Reset() {
	*x = OperationStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStatus) ProtoMessage() {}

func (x *OperationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStatus.ProtoReflect.Descriptor instead.
func (*OperationStatus) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{51}
}

func (x *OperationStatus) GetOperationId() *OperationID {
	if x != nil {
		return x.OperationId
	}
	return nil
}

func (x *OperationStatus) GetState() OperationState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return OperationState_OPERATION_UNSUPPORTED
}

func (x *OperationStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *OperationStatus) GetConvertedResources() []*Resource {
	if x != nil {
		return x.ConvertedResources
	}
	return nil
}

func (x *OperationStatus) GetUuid() *UUID {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *OperationStatus) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *OperationStatus) GetResourceProviderId() *ResourceProviderID {
	if x != nil {
		return x.ResourceProviderId
	}
	return nil
}

// *
// Describes the status of a check. Type and the corresponding field, i.e.,
// `command` or `http` must be set. If the result of the check is not available
// (e.g., the check timed out), these fields must contain empty messages, i.e.,
// `exit_code` or `status_code` will be unset.
//
// NOTE: This API is subject to change and the related feature is experimental.
type CheckStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the check this status corresponds to.
	Type *CheckInfo_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.CheckInfo_Type" json:"type,omitempty"`
	// Status of a command check.
	Command *CheckStatusInfo_Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	// Status of an HTTP check.
	Http *CheckStatusInfo_Http `protobuf:"bytes,3,opt,name=http" json:"http,omitempty"`
	// Status of a TCP check.
	Tcp *CheckStatusInfo_Tcp `protobuf:"bytes,4,opt,name=tcp" json:"tcp,omitempty"`
}

func (x *CheckStatusInfo) Reset() {
	*x = CheckStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatusInfo) ProtoMessage() {}

func (x *CheckStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatusInfo.ProtoReflect.Descriptor instead.
func (*CheckStatusInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{52}
}

func (x *CheckStatusInfo) GetType() CheckInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CheckInfo_UNKNOWN
}

func (x *CheckStatusInfo) GetCommand() *CheckStatusInfo_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CheckStatusInfo) GetHttp() *CheckStatusInfo_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *CheckStatusInfo) GetTcp() *CheckStatusInfo_Tcp {
	if x != nil {
		return x.Tcp
	}
	return nil
}

// *
// Describes the current status of a task.
type TaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId     *TaskID            `protobuf:"bytes,1,req,name=task_id,json=taskId" json:"task_id,omitempty"`
	State      *TaskState         `protobuf:"varint,2,req,name=state,enum=mesos.v1.TaskState" json:"state,omitempty"`
	Message    *string            `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"` // Possible message explaining state.
	Source     *TaskStatus_Source `protobuf:"varint,9,opt,name=source,enum=mesos.v1.TaskStatus_Source" json:"source,omitempty"`
	Reason     *TaskStatus_Reason `protobuf:"varint,10,opt,name=reason,enum=mesos.v1.TaskStatus_Reason" json:"reason,omitempty"`
	Data       []byte             `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	AgentId    *AgentID           `protobuf:"bytes,5,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	ExecutorId *ExecutorID        `protobuf:"bytes,7,opt,name=executor_id,json=executorId" json:"executor_id,omitempty"` // TODO(benh): Use in master/agent.
	Timestamp  *float64           `protobuf:"fixed64,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// Statuses that are delivered reliably to the scheduler will
	// include a 'uuid'. The status is considered delivered once
	// it is acknowledged by the scheduler. Schedulers can choose
	// to either explicitly acknowledge statuses or let the scheduler
	// driver implicitly acknowledge (default).
	//
	// TODO(bmahler): This is currently overwritten in the scheduler
	// driver and executor driver, but executors will need to set this
	// to a valid RFC-4122 UUID if using the HTTP API.
	Uuid []byte `protobuf:"bytes,11,opt,name=uuid" json:"uuid,omitempty"`
	// Describes whether the task has been determined to be healthy (true) or
	// unhealthy (false) according to the `health_check` field in `TaskInfo`.
	Healthy *bool `protobuf:"varint,8,opt,name=healthy" json:"healthy,omitempty"`
	// Contains check status for the check specified in the corresponding
	// `TaskInfo`. If no check has been specified, this field must be
	// absent, otherwise it must be present even if the check status is
	// not available yet. If the status update is triggered for a different
	// reason than `REASON_TASK_CHECK_STATUS_UPDATED`, this field will contain
	// the last known value.
	//
	// NOTE: A check-related task status update is triggered if and only if
	// the value or presence of any field in `CheckStatusInfo` changes.
	//
	// NOTE: Check support in built-in executors is experimental.
	CheckStatus *CheckStatusInfo `protobuf:"bytes,15,opt,name=check_status,json=checkStatus" json:"check_status,omitempty"`
	// Labels are free-form key value pairs which are exposed through
	// master and agent endpoints. Labels will not be interpreted or
	// acted upon by Mesos itself. As opposed to the data field, labels
	// will be kept in memory on master and agent processes. Therefore,
	// labels should be used to tag TaskStatus message with light-weight
	// meta-data. Labels should not contain duplicate key-value pairs.
	Labels *Labels `protobuf:"bytes,12,opt,name=labels" json:"labels,omitempty"`
	// Container related information that is resolved dynamically such as
	// network address.
	ContainerStatus *ContainerStatus `protobuf:"bytes,13,opt,name=container_status,json=containerStatus" json:"container_status,omitempty"`
	// The time (according to the master's clock) when the agent where
	// this task was running became unreachable. This is only set on
	// status updates for tasks running on agents that are unreachable
	// (e.g., partitioned away from the master).
	UnreachableTime *TimeInfo `protobuf:"bytes,14,opt,name=unreachable_time,json=unreachableTime" json:"unreachable_time,omitempty"`
	// If the reason field indicates a container resource limitation,
	// this field optionally contains additional information.
	Limitation *TaskResourceLimitation `protobuf:"bytes,16,opt,name=limitation" json:"limitation,omitempty"`
}

func (x *TaskStatus) Reset() {
	*x = TaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatus) ProtoMessage() {}

func (x *TaskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatus.ProtoReflect.Descriptor instead.
func (*TaskStatus) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{53}
}

func (x *TaskStatus) GetTaskId() *TaskID {
	if x != nil {
		return x.TaskId
	}
	return nil
}

func (x *TaskStatus) GetState() TaskState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TaskState_TASK_STAGING
}

func (x *TaskStatus) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *TaskStatus) GetSource() TaskStatus_Source {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return TaskStatus_SOURCE_MASTER
}

func (x *TaskStatus) GetReason() TaskStatus_Reason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return TaskStatus_REASON_COMMAND_EXECUTOR_FAILED
}

func (x *TaskStatus) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TaskStatus) GetAgentId() *AgentID {
	if x != nil {
		return x.AgentId
	}
	return nil
}

func (x *TaskStatus) GetExecutorId() *ExecutorID {
	if x != nil {
		return x.ExecutorId
	}
	return nil
}

func (x *TaskStatus) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *TaskStatus) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *TaskStatus) GetHealthy() bool {
	if x != nil && x.Healthy != nil {
		return *x.Healthy
	}
	return false
}

func (x *TaskStatus) GetCheckStatus() *CheckStatusInfo {
	if x != nil {
		return x.CheckStatus
	}
	return nil
}

func (x *TaskStatus) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *TaskStatus) GetContainerStatus() *ContainerStatus {
	if x != nil {
		return x.ContainerStatus
	}
	return nil
}

func (x *TaskStatus) GetUnreachableTime() *TimeInfo {
	if x != nil {
		return x.UnreachableTime
	}
	return nil
}

func (x *TaskStatus) GetLimitation() *TaskResourceLimitation {
	if x != nil {
		return x.Limitation
	}
	return nil
}

// *
// Describes possible filters that can be applied to unused resources
// (see SchedulerDriver::launchTasks) to influence the allocator.
type Filters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time to consider unused resources refused. Note that all unused
	// resources will be considered refused and use the default value
	// (below) regardless of whether Filters was passed to
	// SchedulerDriver::launchTasks. You MUST pass Filters with this
	// field set to change this behavior (i.e., get another offer which
	// includes unused resources sooner or later than the default).
	//
	// If this field is set to a number of seconds greater than 31536000
	// (365 days), then the resources will be considered refused for 365
	// days. If it is set to a negative number, then the default value
	// will be used.
	RefuseSeconds *float64 `protobuf:"fixed64,1,opt,name=refuse_seconds,json=refuseSeconds,def=5" json:"refuse_seconds,omitempty"`
}

// Default values for Filters fields.
const (
	Default_Filters_RefuseSeconds = float64(5)
)

func (x *Filters) Reset() {
	*x = Filters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filters) ProtoMessage() {}

func (x *Filters) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filters.ProtoReflect.Descriptor instead.
func (*Filters) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{54}
}

func (x *Filters) GetRefuseSeconds() float64 {
	if x != nil && x.RefuseSeconds != nil {
		return *x.RefuseSeconds
	}
	return Default_Filters_RefuseSeconds
}

// *
// Describes a collection of environment variables. This is used with
// CommandInfo in order to set environment variables before running a
// command. The contents of each variable may be specified as a string
// or a Secret; only one of `value` and `secret` must be set.
type Environment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variables []*Environment_Variable `protobuf:"bytes,1,rep,name=variables" json:"variables,omitempty"`
}

func (x *Environment) Reset() {
	*x = Environment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment) ProtoMessage() {}

func (x *Environment) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment.ProtoReflect.Descriptor instead.
func (*Environment) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{55}
}

func (x *Environment) GetVariables() []*Environment_Variable {
	if x != nil {
		return x.Variables
	}
	return nil
}

// *
// A generic (key, value) pair used in various places for parameters.
type Parameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *Parameter) Reset() {
	*x = Parameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameter) ProtoMessage() {}

func (x *Parameter) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameter.ProtoReflect.Descriptor instead.
func (*Parameter) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{56}
}

func (x *Parameter) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Parameter) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// Collection of Parameter.
type Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter []*Parameter `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
}

func (x *Parameters) Reset() {
	*x = Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Parameters) ProtoMessage() {}

func (x *Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Parameters.ProtoReflect.Descriptor instead.
func (*Parameters) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{57}
}

func (x *Parameters) GetParameter() []*Parameter {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// *
// Credential used in various places for authentication and
// authorization.
//
// NOTE: A 'principal' is different from 'FrameworkInfo.user'. The
// former is used for authentication and authorization while the
// latter is used to determine the default user under which the
// framework's executors/tasks are run.
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Principal *string `protobuf:"bytes,1,req,name=principal" json:"principal,omitempty"`
	Secret    *string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{58}
}

func (x *Credential) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

func (x *Credential) GetSecret() string {
	if x != nil && x.Secret != nil {
		return *x.Secret
	}
	return ""
}

// *
// Credentials used for framework authentication, HTTP authentication
// (where the common 'username' and 'password' are captured as
// 'principal' and 'secret' respectively), etc.
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credentials []*Credential `protobuf:"bytes,1,rep,name=credentials" json:"credentials,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{59}
}

func (x *Credentials) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

// *
// Secret used to pass privileged information. It is designed to provide
// pass-by-value or pass-by-reference semantics, where the REFERENCE type can be
// used by custom modules which interact with a secure back-end.
type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Secret_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Secret_Type" json:"type,omitempty"`
	// Only one of `reference` and `value` must be set.
	Reference *Secret_Reference `protobuf:"bytes,2,opt,name=reference" json:"reference,omitempty"`
	Value     *Secret_Value     `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{60}
}

func (x *Secret) GetType() Secret_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Secret_UNKNOWN
}

func (x *Secret) GetReference() *Secret_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Secret) GetValue() *Secret_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// *
// Rate (queries per second, QPS) limit for messages from a framework to master.
// Strictly speaking they are the combined rate from all frameworks of the same
// principal.
type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Leaving QPS unset gives it unlimited rate (i.e., not throttled),
	// which also implies unlimited capacity.
	Qps *float64 `protobuf:"fixed64,1,opt,name=qps" json:"qps,omitempty"`
	// Principal of framework(s) to be throttled. Should match
	// FrameworkInfo.principal and Credential.principal (if using authentication).
	Principal *string `protobuf:"bytes,2,req,name=principal" json:"principal,omitempty"`
	// Max number of outstanding messages from frameworks of this principal
	// allowed by master before the next message is dropped and an error is sent
	// back to the sender. Messages received before the capacity is reached are
	// still going to be processed after the error is sent.
	// If unspecified, this principal is assigned unlimited capacity.
	// NOTE: This value is ignored if 'qps' is not set.
	Capacity *uint64 `protobuf:"varint,3,opt,name=capacity" json:"capacity,omitempty"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{61}
}

func (x *RateLimit) GetQps() float64 {
	if x != nil && x.Qps != nil {
		return *x.Qps
	}
	return 0
}

func (x *RateLimit) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

func (x *RateLimit) GetCapacity() uint64 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

// *
// Collection of RateLimit.
// Frameworks without rate limits defined here are not throttled unless
// 'aggregate_default_qps' is specified.
type RateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Items should have unique principals.
	Limits []*RateLimit `protobuf:"bytes,1,rep,name=limits" json:"limits,omitempty"`
	// All the frameworks not specified in 'limits' get this default rate.
	// This rate is an aggregate rate for all of them, i.e., their combined
	// traffic is throttled together at this rate.
	AggregateDefaultQps *float64 `protobuf:"fixed64,2,opt,name=aggregate_default_qps,json=aggregateDefaultQps" json:"aggregate_default_qps,omitempty"`
	// All the frameworks not specified in 'limits' get this default capacity.
	// This is an aggregate value similar to 'aggregate_default_qps'.
	AggregateDefaultCapacity *uint64 `protobuf:"varint,3,opt,name=aggregate_default_capacity,json=aggregateDefaultCapacity" json:"aggregate_default_capacity,omitempty"`
}

func (x *RateLimits) Reset() {
	*x = RateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimits) ProtoMessage() {}

func (x *RateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimits.ProtoReflect.Descriptor instead.
func (*RateLimits) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{62}
}

func (x *RateLimits) GetLimits() []*RateLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *RateLimits) GetAggregateDefaultQps() float64 {
	if x != nil && x.AggregateDefaultQps != nil {
		return *x.AggregateDefaultQps
	}
	return 0
}

func (x *RateLimits) GetAggregateDefaultCapacity() uint64 {
	if x != nil && x.AggregateDefaultCapacity != nil {
		return *x.AggregateDefaultCapacity
	}
	return 0
}

// *
// Describe an image used by tasks or executors. Note that it's only
// for tasks or executors launched by MesosContainerizer currently.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Image_Type `protobuf:"varint,1,req,name=type,enum=mesos.v1.Image_Type" json:"type,omitempty"`
	// Only one of the following image messages should be set to match
	// the type.
	Appc   *Image_Appc   `protobuf:"bytes,2,opt,name=appc" json:"appc,omitempty"`
	Docker *Image_Docker `protobuf:"bytes,3,opt,name=docker" json:"docker,omitempty"`
	// With this flag set to false, the mesos containerizer will pull
	// the docker/appc image from the registry even if the image is
	// already downloaded on the agent.
	Cached *bool `protobuf:"varint,4,opt,name=cached,def=1" json:"cached,omitempty"`
}

// Default values for Image fields.
const (
	Default_Image_Cached = bool(true)
)

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{63}
}

func (x *Image) GetType() Image_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Image_APPC
}

func (x *Image) GetAppc() *Image_Appc {
	if x != nil {
		return x.Appc
	}
	return nil
}

func (x *Image) GetDocker() *Image_Docker {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *Image) GetCached() bool {
	if x != nil && x.Cached != nil {
		return *x.Cached
	}
	return Default_Image_Cached
}

// *
// Describes how the mount will be propagated for a volume. See the
// following doc for more details about mount propagation:
// https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt
type MountPropagation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *MountPropagation_Mode `protobuf:"varint,1,opt,name=mode,enum=mesos.v1.MountPropagation_Mode" json:"mode,omitempty"`
}

func (x *MountPropagation) Reset() {
	*x = MountPropagation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountPropagation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountPropagation) ProtoMessage() {}

func (x *MountPropagation) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountPropagation.ProtoReflect.Descriptor instead.
func (*MountPropagation) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{64}
}

func (x *MountPropagation) GetMode() MountPropagation_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return MountPropagation_UNKNOWN
}

// *
// Describes a volume mapping either from host to container or vice
// versa. Both paths can either refer to a directory or a file.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(gyliu513): Make this as `optional` after deprecation cycle of 1.0.
	Mode *Volume_Mode `protobuf:"varint,3,req,name=mode,enum=mesos.v1.Volume_Mode" json:"mode,omitempty"`
	// Path pointing to a directory or file in the container. If the path
	// is a relative path, it is relative to the container work directory.
	// If the path is an absolute path and the container does not have its
	// own rootfs, that path must already exist in the agent host rootfs.
	ContainerPath *string `protobuf:"bytes,1,req,name=container_path,json=containerPath" json:"container_path,omitempty"`
	// Absolute path pointing to a directory or file on the host or a
	// path relative to the container work directory.
	HostPath *string `protobuf:"bytes,2,opt,name=host_path,json=hostPath" json:"host_path,omitempty"`
	// The source of the volume is an Image which describes a root
	// filesystem which will be provisioned by Mesos.
	Image  *Image         `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
	Source *Volume_Source `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65}
}

func (x *Volume) GetMode() Volume_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Volume_RW
}

func (x *Volume) GetContainerPath() string {
	if x != nil && x.ContainerPath != nil {
		return *x.ContainerPath
	}
	return ""
}

func (x *Volume) GetHostPath() string {
	if x != nil && x.HostPath != nil {
		return *x.HostPath
	}
	return ""
}

func (x *Volume) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Volume) GetSource() *Volume_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

// *
// Describes a network request from a framework as well as network resolution
// provided by Mesos.
//
// A framework may request the network isolator on the Agent to isolate the
// container in a network namespace and create a virtual network interface.
// The `NetworkInfo` message describes the properties of that virtual
// interface, including the IP addresses and network isolation policy
// (network group membership).
//
// The NetworkInfo message is not interpreted by the Master or Agent and is
// intended to be used by Agent and Master modules implementing network
// isolation. If the modules are missing, the message is simply ignored. In
// future, the task launch will fail if there is no module providing the
// network isolation capabilities (MESOS-3390).
//
// An executor, Agent, or an Agent module may append NetworkInfos inside
// TaskStatus::container_status to provide information such as the container IP
// address and isolation groups.
type NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When included in a ContainerInfo, each of these represent a
	// request for an IP address. Each request can specify an explicit address
	// or the IP protocol to use.
	//
	// When included in a TaskStatus message, these inform the framework
	// scheduler about the IP addresses that are bound to the container
	// interface. When there are no custom network isolator modules installed,
	// this field is filled in automatically with the Agent IP address.
	IpAddresses []*NetworkInfo_IPAddress `protobuf:"bytes,5,rep,name=ip_addresses,json=ipAddresses" json:"ip_addresses,omitempty"`
	// Name of the network which will be used by network isolator to determine
	// the network that the container joins. It's up to the network isolator
	// to decide how to interpret this field.
	Name *string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	// A group is the name given to a set of logically-related interfaces that
	// are allowed to communicate among themselves. Network traffic is allowed
	// between two container interfaces that share at least one network group.
	// For example, one might want to create separate groups for isolating dev,
	// testing, qa and prod deployment environments.
	Groups []string `protobuf:"bytes,3,rep,name=groups" json:"groups,omitempty"`
	// To tag certain metadata to be used by Isolator/IPAM, e.g., rack, etc.
	Labels       *Labels                    `protobuf:"bytes,4,opt,name=labels" json:"labels,omitempty"`
	PortMappings []*NetworkInfo_PortMapping `protobuf:"bytes,7,rep,name=port_mappings,json=portMappings" json:"port_mappings,omitempty"`
}

func (x *NetworkInfo) Reset() {
	*x = NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo) ProtoMessage() {}

func (x *NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo.ProtoReflect.Descriptor instead.
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{66}
}

func (x *NetworkInfo) GetIpAddresses() []*NetworkInfo_IPAddress {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *NetworkInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NetworkInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *NetworkInfo) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *NetworkInfo) GetPortMappings() []*NetworkInfo_PortMapping {
	if x != nil {
		return x.PortMappings
	}
	return nil
}

// *
// Encapsulation of `Capabilities` supported by Linux.
// Reference: http://linux.die.net/man/7/capabilities.
type CapabilityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []CapabilityInfo_Capability `protobuf:"varint,1,rep,name=capabilities,enum=mesos.v1.CapabilityInfo_Capability" json:"capabilities,omitempty"`
}

func (x *CapabilityInfo) Reset() {
	*x = CapabilityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityInfo) ProtoMessage() {}

func (x *CapabilityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityInfo.ProtoReflect.Descriptor instead.
func (*CapabilityInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{67}
}

func (x *CapabilityInfo) GetCapabilities() []CapabilityInfo_Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

// *
// Encapsulation for Seccomp configuration, which is Linux specific.
type SeccompInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A filename of the Seccomp profile. This should be a path
	// relative to the directory containing Seccomp profiles,
	// which is specified on the agent via the `--seccomp_config_dir` flag.
	ProfileName *string `protobuf:"bytes,1,opt,name=profile_name,json=profileName" json:"profile_name,omitempty"`
	// If set to `true`, Seccomp is not applied to the container.
	// If not set or set to `false`, the container is launched with
	// the profile specified in the `profile_name` field.
	//
	// NOTE: `profile_name` must not be specified if `unconfined` set to `true`.
	// `profile_name` must be specified if `unconfined` is not set or
	// is set to `false`.
	Unconfined *bool `protobuf:"varint,2,opt,name=unconfined" json:"unconfined,omitempty"`
}

func (x *SeccompInfo) Reset() {
	*x = SeccompInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeccompInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeccompInfo) ProtoMessage() {}

func (x *SeccompInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeccompInfo.ProtoReflect.Descriptor instead.
func (*SeccompInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{68}
}

func (x *SeccompInfo) GetProfileName() string {
	if x != nil && x.ProfileName != nil {
		return *x.ProfileName
	}
	return ""
}

func (x *SeccompInfo) GetUnconfined() bool {
	if x != nil && x.Unconfined != nil {
		return *x.Unconfined
	}
	return false
}

// *
// Encapsulation for Linux specific configuration.
// E.g, capabilities, limits etc.
type LinuxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Since 1.4.0, deprecated in favor of `effective_capabilities`.
	//
	// Deprecated: Marked as deprecated in mesos.proto.
	CapabilityInfo *CapabilityInfo `protobuf:"bytes,1,opt,name=capability_info,json=capabilityInfo" json:"capability_info,omitempty"`
	// The set of capabilities that are allowed but not initially
	// granted to tasks.
	BoundingCapabilities *CapabilityInfo `protobuf:"bytes,2,opt,name=bounding_capabilities,json=boundingCapabilities" json:"bounding_capabilities,omitempty"`
	// Represents the set of capabilities that the task will
	// be executed with.
	EffectiveCapabilities *CapabilityInfo `protobuf:"bytes,3,opt,name=effective_capabilities,json=effectiveCapabilities" json:"effective_capabilities,omitempty"`
	// If set as 'true', the container shares the pid namespace with
	// its parent. If the container is a top level container, it will
	// share the pid namespace with the agent. If the container is a
	// nested container, it will share the pid namespace with its
	// parent container. This field will be ignored if 'namespaces/pid'
	// isolator is not enabled.
	SharePidNamespace *bool `protobuf:"varint,4,opt,name=share_pid_namespace,json=sharePidNamespace" json:"share_pid_namespace,omitempty"`
	// Represents Seccomp configuration, which is used for syscall filtering.
	// This field is used to override the agent's default Seccomp configuration.
	Seccomp *SeccompInfo `protobuf:"bytes,5,opt,name=seccomp" json:"seccomp,omitempty"`
	// There are two special cases that we need to handle for this field:
	//  1. This field is not set: For backward compatibility we will keep the
	//     previous behavior: Top level container will have its own IPC namespace
	//     and nested container will share the IPC namespace from its parent
	//     container. If the container does not have its own rootfs, it will share
	//     agent's /dev/shm, otherwise it will have its own /dev/shm.
	//  2. The `namespaces/ipc` isolator is not enabled: This field will be ignored
	//     in this case. For backward compatibility, in the `filesystem/linux`
	//     isolator we will keep the previous behavior: Any containers will share
	//     IPC namespace from agent, and if the container does not have its own
	//     rootfs, it will also share agent's /dev/shm, otherwise it will have its
	//     own /dev/shm.
	//
	// TODO(qianzhang): Remove the support for the above two cases after the
	// deprecation cycle (started in 1.9). Eventually we want a single isolator
	// (`namespaces/ipc`) to handle both IPC namespace and /dev/shm, and decouple
	// /dev/shm from container's rootfs (i.e., whether a container will have its
	// own /dev/shm depends on its `ipc_mode` instead of whether the container
	// has its own rootfs).
	IpcMode *LinuxInfo_IpcMode `protobuf:"varint,6,opt,name=ipc_mode,json=ipcMode,enum=mesos.v1.LinuxInfo_IpcMode" json:"ipc_mode,omitempty"`
	// Size of /dev/shm in MB. If not set, the size of the /dev/shm for container
	// will be value of the `--default_container_shm_size` agent flag, if that
	// flag is not set too, the size of the /dev/shm will be half of the host RAM
	// which is the default behavior of Linux. This field will be ignored for the
	// container which shares /dev/shm from its parent and it will be also ignored
	// for any containers if the `namespaces/ipc` isolator is not enabled. Please
	// note that we only support setting this field when the `ipc_mode` field is
	// set to `PRIVATE` otherwise the container launch will be rejected.
	ShmSize *uint32 `protobuf:"varint,7,opt,name=shm_size,json=shmSize" json:"shm_size,omitempty"`
	// If set as 'true', the container will share the cgroups from its parent
	// container, otherwise it will have its own cgroups created. Please note:
	//  1. For tasks in a task group launched via the LAUNCH_GROUP operation,
	//     this field may be set to 'true' or 'false'. Resource limits may only be
	//     set for tasks in a task group when this field is set to 'false'.
	//  2. For tasks launched via the LAUNCH operation, this field may only be set
	//     to 'true', and in this case resource limits may be set on these tasks.
	//  3. For containers launched via the agent's LAUNCH_NESTED_CONTAINER_SESSION
	//     call, this field must be set to 'true'.
	//  4. For executor containers, this field may only be set to 'false'.
	//  5. All tasks under a single executor must share the same value of this
	//     field, if it is set. Note that this means that all tasks within a single
	//     task group must set this field to the same value.
	ShareCgroups *bool `protobuf:"varint,8,opt,name=share_cgroups,json=shareCgroups,def=1" json:"share_cgroups,omitempty"`
}

// Default values for LinuxInfo fields.
const (
	Default_LinuxInfo_ShareCgroups = bool(true)
)

func (x *LinuxInfo) Reset() {
	*x = LinuxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinuxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinuxInfo) ProtoMessage() {}

func (x *LinuxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinuxInfo.ProtoReflect.Descriptor instead.
func (*LinuxInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{69}
}

// Deprecated: Marked as deprecated in mesos.proto.
func (x *LinuxInfo) GetCapabilityInfo() *CapabilityInfo {
	if x != nil {
		return x.CapabilityInfo
	}
	return nil
}

func (x *LinuxInfo) GetBoundingCapabilities() *CapabilityInfo {
	if x != nil {
		return x.BoundingCapabilities
	}
	return nil
}

func (x *LinuxInfo) GetEffectiveCapabilities() *CapabilityInfo {
	if x != nil {
		return x.EffectiveCapabilities
	}
	return nil
}

func (x *LinuxInfo) GetSharePidNamespace() bool {
	if x != nil && x.SharePidNamespace != nil {
		return *x.SharePidNamespace
	}
	return false
}

func (x *LinuxInfo) GetSeccomp() *SeccompInfo {
	if x != nil {
		return x.Seccomp
	}
	return nil
}

func (x *LinuxInfo) GetIpcMode() LinuxInfo_IpcMode {
	if x != nil && x.IpcMode != nil {
		return *x.IpcMode
	}
	return LinuxInfo_UNKNOWN
}

func (x *LinuxInfo) GetShmSize() uint32 {
	if x != nil && x.ShmSize != nil {
		return *x.ShmSize
	}
	return 0
}

func (x *LinuxInfo) GetShareCgroups() bool {
	if x != nil && x.ShareCgroups != nil {
		return *x.ShareCgroups
	}
	return Default_LinuxInfo_ShareCgroups
}

// *
// Encapsulation for POSIX rlimits, see
// http://pubs.opengroup.org/onlinepubs/009695399/functions/getrlimit.html.
// Note that some types might only be defined for Linux.
// We use a custom prefix to avoid conflict with existing system macros
// (e.g., `RLIMIT_CPU` or `NOFILE`).
type RLimitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rlimits []*RLimitInfo_RLimit `protobuf:"bytes,1,rep,name=rlimits" json:"rlimits,omitempty"`
}

func (x *RLimitInfo) Reset() {
	*x = RLimitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RLimitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RLimitInfo) ProtoMessage() {}

func (x *RLimitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RLimitInfo.ProtoReflect.Descriptor instead.
func (*RLimitInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{70}
}

func (x *RLimitInfo) GetRlimits() []*RLimitInfo_RLimit {
	if x != nil {
		return x.Rlimits
	}
	return nil
}

// *
// Describes the information about (pseudo) TTY that can
// be attached to a process running in a container.
type TTYInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowSize *TTYInfo_WindowSize `protobuf:"bytes,1,opt,name=window_size,json=windowSize" json:"window_size,omitempty"`
}

func (x *TTYInfo) Reset() {
	*x = TTYInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTYInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTYInfo) ProtoMessage() {}

func (x *TTYInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTYInfo.ProtoReflect.Descriptor instead.
func (*TTYInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{71}
}

func (x *TTYInfo) GetWindowSize() *TTYInfo_WindowSize {
	if x != nil {
		return x.WindowSize
	}
	return nil
}

// *
// Describes a container configuration and allows extensible
// configurations for different container implementations.
//
// NOTE: `ContainerInfo` may be specified, e.g., by a task, even if no
// container image is provided. In this case neither `MesosInfo` nor
// `DockerInfo` is set, the required `type` must be `MESOS`. This is to
// address a case when a task without an image, e.g., a shell script
// with URIs, wants to use features originally designed for containers,
// for example custom network isolation via `NetworkInfo`.
type ContainerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     *ContainerInfo_Type `protobuf:"varint,1,req,name=type,enum=mesos.v1.ContainerInfo_Type" json:"type,omitempty"`
	Volumes  []*Volume           `protobuf:"bytes,2,rep,name=volumes" json:"volumes,omitempty"`
	Hostname *string             `protobuf:"bytes,4,opt,name=hostname" json:"hostname,omitempty"`
	// At most one of the following *Info messages should be set to match
	// the type, i.e. the "protobuf union" in ContainerInfo should be valid.
	Docker *ContainerInfo_DockerInfo `protobuf:"bytes,3,opt,name=docker" json:"docker,omitempty"`
	Mesos  *ContainerInfo_MesosInfo  `protobuf:"bytes,5,opt,name=mesos" json:"mesos,omitempty"`
	// A list of network requests. A framework can request multiple IP addresses
	// for the container.
	NetworkInfos []*NetworkInfo `protobuf:"bytes,7,rep,name=network_infos,json=networkInfos" json:"network_infos,omitempty"`
	// Linux specific information for the container.
	LinuxInfo *LinuxInfo `protobuf:"bytes,8,opt,name=linux_info,json=linuxInfo" json:"linux_info,omitempty"`
	// (POSIX only) rlimits of the container.
	RlimitInfo *RLimitInfo `protobuf:"bytes,9,opt,name=rlimit_info,json=rlimitInfo" json:"rlimit_info,omitempty"`
	// If specified a tty will be attached to the container entrypoint.
	TtyInfo *TTYInfo `protobuf:"bytes,10,opt,name=tty_info,json=ttyInfo" json:"tty_info,omitempty"`
}

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{72}
}

func (x *ContainerInfo) GetType() ContainerInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ContainerInfo_DOCKER
}

func (x *ContainerInfo) GetVolumes() []*Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *ContainerInfo) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *ContainerInfo) GetDocker() *ContainerInfo_DockerInfo {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *ContainerInfo) GetMesos() *ContainerInfo_MesosInfo {
	if x != nil {
		return x.Mesos
	}
	return nil
}

func (x *ContainerInfo) GetNetworkInfos() []*NetworkInfo {
	if x != nil {
		return x.NetworkInfos
	}
	return nil
}

func (x *ContainerInfo) GetLinuxInfo() *LinuxInfo {
	if x != nil {
		return x.LinuxInfo
	}
	return nil
}

func (x *ContainerInfo) GetRlimitInfo() *RLimitInfo {
	if x != nil {
		return x.RlimitInfo
	}
	return nil
}

func (x *ContainerInfo) GetTtyInfo() *TTYInfo {
	if x != nil {
		return x.TtyInfo
	}
	return nil
}

// *
// Container related information that is resolved during container
// setup. The information is sent back to the framework as part of the
// TaskStatus message.
type ContainerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerId *ContainerID `protobuf:"bytes,4,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	// This field can be reliably used to identify the container IP address.
	NetworkInfos []*NetworkInfo `protobuf:"bytes,1,rep,name=network_infos,json=networkInfos" json:"network_infos,omitempty"`
	// Information about Linux control group (cgroup).
	CgroupInfo *CgroupInfo `protobuf:"bytes,2,opt,name=cgroup_info,json=cgroupInfo" json:"cgroup_info,omitempty"`
	// Information about Executor PID.
	ExecutorPid *uint32 `protobuf:"varint,3,opt,name=executor_pid,json=executorPid" json:"executor_pid,omitempty"`
}

func (x *ContainerStatus) Reset() {
	*x = ContainerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerStatus) ProtoMessage() {}

func (x *ContainerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerStatus.ProtoReflect.Descriptor instead.
func (*ContainerStatus) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{73}
}

func (x *ContainerStatus) GetContainerId() *ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *ContainerStatus) GetNetworkInfos() []*NetworkInfo {
	if x != nil {
		return x.NetworkInfos
	}
	return nil
}

func (x *ContainerStatus) GetCgroupInfo() *CgroupInfo {
	if x != nil {
		return x.CgroupInfo
	}
	return nil
}

func (x *ContainerStatus) GetExecutorPid() uint32 {
	if x != nil && x.ExecutorPid != nil {
		return *x.ExecutorPid
	}
	return 0
}

// *
// Linux control group (cgroup) information.
type CgroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetCls *CgroupInfo_NetCls `protobuf:"bytes,1,opt,name=net_cls,json=netCls" json:"net_cls,omitempty"`
}

func (x *CgroupInfo) Reset() {
	*x = CgroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo) ProtoMessage() {}

func (x *CgroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo.ProtoReflect.Descriptor instead.
func (*CgroupInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74}
}

func (x *CgroupInfo) GetNetCls() *CgroupInfo_NetCls {
	if x != nil {
		return x.NetCls
	}
	return nil
}

// *
// Collection of labels. Labels should not contain duplicate key-value
// pairs.
type Labels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*Label `protobuf:"bytes,1,rep,name=labels" json:"labels,omitempty"`
}

func (x *Labels) Reset() {
	*x = Labels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Labels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Labels) ProtoMessage() {}

func (x *Labels) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Labels.ProtoReflect.Descriptor instead.
func (*Labels) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{75}
}

func (x *Labels) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

// *
// Key, value pair used to store free form user-data.
type Label struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *Label) Reset() {
	*x = Label{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{76}
}

func (x *Label) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Label) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// Named port used for service discovery.
type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port number on which the framework exposes a service.
	Number *uint32 `protobuf:"varint,1,req,name=number" json:"number,omitempty"`
	// Name of the service hosted on this port.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Layer 4-7 protocol on which the framework exposes its services.
	Protocol *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	// This field restricts discovery within a framework (FRAMEWORK),
	// within a Mesos cluster (CLUSTER), or places no restrictions (EXTERNAL).
	// The visibility setting for a Port overrides the general visibility setting
	// in the DiscoveryInfo.
	Visibility *DiscoveryInfo_Visibility `protobuf:"varint,4,opt,name=visibility,enum=mesos.v1.DiscoveryInfo_Visibility" json:"visibility,omitempty"`
	// This can be used to decorate the message with metadata to be
	// interpreted by external applications such as firewalls.
	Labels *Labels `protobuf:"bytes,5,opt,name=labels" json:"labels,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{77}
}

func (x *Port) GetNumber() uint32 {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return 0
}

func (x *Port) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Port) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *Port) GetVisibility() DiscoveryInfo_Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return DiscoveryInfo_FRAMEWORK
}

func (x *Port) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// *
// Collection of ports.
type Ports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports []*Port `protobuf:"bytes,1,rep,name=ports" json:"ports,omitempty"`
}

func (x *Ports) Reset() {
	*x = Ports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ports) ProtoMessage() {}

func (x *Ports) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ports.ProtoReflect.Descriptor instead.
func (*Ports) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{78}
}

func (x *Ports) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

// *
// Service discovery information.
// The visibility field restricts discovery within a framework (FRAMEWORK),
// within a Mesos cluster (CLUSTER), or places no restrictions (EXTERNAL).
// Each port in the ports field also has an optional visibility field.
// If visibility is specified for a port, it overrides the default service-wide
// DiscoveryInfo.visibility for that port.
// The environment, location, and version fields provide first class support for
// common attributes used to differentiate between similar services. The
// environment may receive values such as PROD/QA/DEV, the location field may
// receive values like EAST-US/WEST-US/EUROPE/AMEA, and the version field may
// receive values like v2.0/v0.9. The exact use of these fields is up to each
// service discovery system.
type DiscoveryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Visibility  *DiscoveryInfo_Visibility `protobuf:"varint,1,req,name=visibility,enum=mesos.v1.DiscoveryInfo_Visibility" json:"visibility,omitempty"`
	Name        *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Environment *string                   `protobuf:"bytes,3,opt,name=environment" json:"environment,omitempty"`
	Location    *string                   `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	Version     *string                   `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	Ports       *Ports                    `protobuf:"bytes,6,opt,name=ports" json:"ports,omitempty"`
	Labels      *Labels                   `protobuf:"bytes,7,opt,name=labels" json:"labels,omitempty"`
}

func (x *DiscoveryInfo) Reset() {
	*x = DiscoveryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryInfo) ProtoMessage() {}

func (x *DiscoveryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryInfo.ProtoReflect.Descriptor instead.
func (*DiscoveryInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{79}
}

func (x *DiscoveryInfo) GetVisibility() DiscoveryInfo_Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return DiscoveryInfo_FRAMEWORK
}

func (x *DiscoveryInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DiscoveryInfo) GetEnvironment() string {
	if x != nil && x.Environment != nil {
		return *x.Environment
	}
	return ""
}

func (x *DiscoveryInfo) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *DiscoveryInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *DiscoveryInfo) GetPorts() *Ports {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *DiscoveryInfo) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// *
// Named WeightInfo to indicate resource allocation
// priority between the different roles.
type WeightInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight *float64 `protobuf:"fixed64,1,req,name=weight" json:"weight,omitempty"`
	// Related role name.
	Role *string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (x *WeightInfo) Reset() {
	*x = WeightInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightInfo) ProtoMessage() {}

func (x *WeightInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightInfo.ProtoReflect.Descriptor instead.
func (*WeightInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{80}
}

func (x *WeightInfo) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *WeightInfo) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

// *
// Version information of a component.
type VersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   *string  `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	BuildDate *string  `protobuf:"bytes,2,opt,name=build_date,json=buildDate" json:"build_date,omitempty"`
	BuildTime *float64 `protobuf:"fixed64,3,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
	BuildUser *string  `protobuf:"bytes,4,opt,name=build_user,json=buildUser" json:"build_user,omitempty"`
	GitSha    *string  `protobuf:"bytes,5,opt,name=git_sha,json=gitSha" json:"git_sha,omitempty"`
	GitBranch *string  `protobuf:"bytes,6,opt,name=git_branch,json=gitBranch" json:"git_branch,omitempty"`
	GitTag    *string  `protobuf:"bytes,7,opt,name=git_tag,json=gitTag" json:"git_tag,omitempty"`
}

func (x *VersionInfo) Reset() {
	*x = VersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionInfo) ProtoMessage() {}

func (x *VersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionInfo.ProtoReflect.Descriptor instead.
func (*VersionInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{81}
}

func (x *VersionInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *VersionInfo) GetBuildDate() string {
	if x != nil && x.BuildDate != nil {
		return *x.BuildDate
	}
	return ""
}

func (x *VersionInfo) GetBuildTime() float64 {
	if x != nil && x.BuildTime != nil {
		return *x.BuildTime
	}
	return 0
}

func (x *VersionInfo) GetBuildUser() string {
	if x != nil && x.BuildUser != nil {
		return *x.BuildUser
	}
	return ""
}

func (x *VersionInfo) GetGitSha() string {
	if x != nil && x.GitSha != nil {
		return *x.GitSha
	}
	return ""
}

func (x *VersionInfo) GetGitBranch() string {
	if x != nil && x.GitBranch != nil {
		return *x.GitBranch
	}
	return ""
}

func (x *VersionInfo) GetGitTag() string {
	if x != nil && x.GitTag != nil {
		return *x.GitTag
	}
	return ""
}

// *
// Flag consists of a name and optionally its value.
type Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *Flag) Reset() {
	*x = Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flag) ProtoMessage() {}

func (x *Flag) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flag.ProtoReflect.Descriptor instead.
func (*Flag) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{82}
}

func (x *Flag) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Flag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// *
// Describes a Role. Roles can be used to specify that certain resources are
// reserved for the use of one or more frameworks.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Weight     *float64       `protobuf:"fixed64,2,req,name=weight" json:"weight,omitempty"`
	Frameworks []*FrameworkID `protobuf:"bytes,3,rep,name=frameworks" json:"frameworks,omitempty"`
	// TODO(bmahler): Deprecate `resources` and introduce quota,
	// consumed quota, allocated, offered, and reserved resource
	// quantity fields. This is blocked by MESOS-9497 since the
	// computation of these quantities is currently expensive.
	Resources []*Resource `protobuf:"bytes,4,rep,name=resources" json:"resources,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{83}
}

func (x *Role) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Role) GetWeight() float64 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

func (x *Role) GetFrameworks() []*FrameworkID {
	if x != nil {
		return x.Frameworks
	}
	return nil
}

func (x *Role) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// *
// Metric consists of a name and optionally its value.
type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string  `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{84}
}

func (x *Metric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Metric) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// *
// Describes a File.
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Absolute path to the file.
	Path *string `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	// Number of hard links.
	Nlink *int32 `protobuf:"varint,2,opt,name=nlink" json:"nlink,omitempty"`
	// Total size in bytes.
	Size *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	// Last modification time.
	Mtime *TimeInfo `protobuf:"bytes,4,opt,name=mtime" json:"mtime,omitempty"`
	// Represents a file's mode and permission bits. The bits have the same
	// definition on all systems and is portable.
	Mode *uint32 `protobuf:"varint,5,opt,name=mode" json:"mode,omitempty"`
	// User ID of owner.
	Uid *string `protobuf:"bytes,6,opt,name=uid" json:"uid,omitempty"`
	// Group ID of owner.
	Gid *string `protobuf:"bytes,7,opt,name=gid" json:"gid,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{85}
}

func (x *FileInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *FileInfo) GetNlink() int32 {
	if x != nil && x.Nlink != nil {
		return *x.Nlink
	}
	return 0
}

func (x *FileInfo) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *FileInfo) GetMtime() *TimeInfo {
	if x != nil {
		return x.Mtime
	}
	return nil
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return 0
}

func (x *FileInfo) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *FileInfo) GetGid() string {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return ""
}

// *
// Describes information about a device.
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   *string        `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Number *Device_Number `protobuf:"bytes,2,opt,name=number" json:"number,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{86}
}

func (x *Device) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *Device) GetNumber() *Device_Number {
	if x != nil {
		return x.Number
	}
	return nil
}

// *
// Describes a device whitelist entry that expose from host to container.
type DeviceAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device              `protobuf:"bytes,1,req,name=device" json:"device,omitempty"`
	Access *DeviceAccess_Access `protobuf:"bytes,2,req,name=access" json:"access,omitempty"`
}

func (x *DeviceAccess) Reset() {
	*x = DeviceAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAccess) ProtoMessage() {}

func (x *DeviceAccess) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAccess.ProtoReflect.Descriptor instead.
func (*DeviceAccess) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{87}
}

func (x *DeviceAccess) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceAccess) GetAccess() *DeviceAccess_Access {
	if x != nil {
		return x.Access
	}
	return nil
}

type DeviceWhitelist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedDevices []*DeviceAccess `protobuf:"bytes,1,rep,name=allowed_devices,json=allowedDevices" json:"allowed_devices,omitempty"`
}

func (x *DeviceWhitelist) Reset() {
	*x = DeviceWhitelist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceWhitelist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceWhitelist) ProtoMessage() {}

func (x *DeviceWhitelist) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceWhitelist.ProtoReflect.Descriptor instead.
func (*DeviceWhitelist) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{88}
}

func (x *DeviceWhitelist) GetAllowedDevices() []*DeviceAccess {
	if x != nil {
		return x.AllowedDevices
	}
	return nil
}

type DrainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An upper bound for tasks with a KillPolicy.
	// If a task has a KillPolicy grace period greater than this value, this value
	// will be used instead. This allows the operator to limit the maximum time it
	// will take the agent to drain. If this field is unset, the task's KillPolicy
	// or the executor's default grace period is used.
	//
	// NOTE: Grace periods start when the executor receives the associated kill.
	// If, for example, the agent is unreachable when this call is made,
	// tasks will still receive their full grace period to kill gracefully.
	MaxGracePeriod *DurationInfo `protobuf:"bytes,1,opt,name=max_grace_period,json=maxGracePeriod" json:"max_grace_period,omitempty"`
	// Whether or not this agent will be removed permanently from the cluster when
	// draining is complete. This transition is automatic and does **NOT** require
	// a separate call to `MarkAgentGone`. If this field is unset, then the
	// default value of `false` is used.
	//
	// Compared to `MarkAgentGone`, which is used for unreachable agents,
	// marking agents gone after draining will respect kill policies.
	// To notify frameworks, tasks terminated during draining will return
	// a `TASK_GONE_BY_OPERATOR` status update instead of any other terminal
	// status. Executors will not need to account for this case, because
	// the terminal status update will be intercepted and modified by the agent.
	MarkGone *bool `protobuf:"varint,2,opt,name=mark_gone,json=markGone,def=0" json:"mark_gone,omitempty"`
}

// Default values for DrainConfig fields.
const (
	Default_DrainConfig_MarkGone = bool(false)
)

func (x *DrainConfig) Reset() {
	*x = DrainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainConfig) ProtoMessage() {}

func (x *DrainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainConfig.ProtoReflect.Descriptor instead.
func (*DrainConfig) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{89}
}

func (x *DrainConfig) GetMaxGracePeriod() *DurationInfo {
	if x != nil {
		return x.MaxGracePeriod
	}
	return nil
}

func (x *DrainConfig) GetMarkGone() bool {
	if x != nil && x.MarkGone != nil {
		return *x.MarkGone
	}
	return Default_DrainConfig_MarkGone
}

type DrainInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The drain state of the agent.
	State *DrainState `protobuf:"varint,1,req,name=state,enum=mesos.v1.DrainState" json:"state,omitempty"`
	// The configuration used to drain the agent.
	Config *DrainConfig `protobuf:"bytes,2,req,name=config" json:"config,omitempty"`
}

func (x *DrainInfo) Reset() {
	*x = DrainInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrainInfo) ProtoMessage() {}

func (x *DrainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrainInfo.ProtoReflect.Descriptor instead.
func (*DrainInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{90}
}

func (x *DrainInfo) GetState() DrainState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return DrainState_UNKNOWN
}

func (x *DrainInfo) GetConfig() *DrainConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type FrameworkInfo_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enum fields should be optional, see: MESOS-4997.
	Type *FrameworkInfo_Capability_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.FrameworkInfo_Capability_Type" json:"type,omitempty"`
}

func (x *FrameworkInfo_Capability) Reset() {
	*x = FrameworkInfo_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameworkInfo_Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameworkInfo_Capability) ProtoMessage() {}

func (x *FrameworkInfo_Capability) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameworkInfo_Capability.ProtoReflect.Descriptor instead.
func (*FrameworkInfo_Capability) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{15, 0}
}

func (x *FrameworkInfo_Capability) GetType() FrameworkInfo_Capability_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FrameworkInfo_Capability_UNKNOWN
}

// Describes a command check. If applicable, enters mount and/or network
// namespaces of the task.
type CheckInfo_Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *CommandInfo `protobuf:"bytes,1,req,name=command" json:"command,omitempty"`
}

func (x *CheckInfo_Command) Reset() {
	*x = CheckInfo_Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInfo_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInfo_Command) ProtoMessage() {}

func (x *CheckInfo_Command) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInfo_Command.ProtoReflect.Descriptor instead.
func (*CheckInfo_Command) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{16, 0}
}

func (x *CheckInfo_Command) GetCommand() *CommandInfo {
	if x != nil {
		return x.Command
	}
	return nil
}

// Describes an HTTP check. Sends a GET request to
// http://<host>:port/path. Note that <host> is not configurable and is
// resolved automatically to 127.0.0.1.
type CheckInfo_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port to send the HTTP request.
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	// HTTP request path.
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
}

func (x *CheckInfo_Http) Reset() {
	*x = CheckInfo_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInfo_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInfo_Http) ProtoMessage() {}

func (x *CheckInfo_Http) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInfo_Http.ProtoReflect.Descriptor instead.
func (*CheckInfo_Http) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{16, 1}
}

func (x *CheckInfo_Http) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *CheckInfo_Http) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

// Describes a TCP check, i.e. based on establishing a TCP connection to
// the specified port. Note that <host> is not configurable and is resolved
// automatically to 127.0.0.1.
type CheckInfo_Tcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
}

func (x *CheckInfo_Tcp) Reset() {
	*x = CheckInfo_Tcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInfo_Tcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInfo_Tcp) ProtoMessage() {}

func (x *CheckInfo_Tcp) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInfo_Tcp.ProtoReflect.Descriptor instead.
func (*CheckInfo_Tcp) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{16, 2}
}

func (x *CheckInfo_Tcp) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

// Describes an HTTP health check. Sends a GET request to
// scheme://<host>:port/path. Note that <host> is not configurable and is
// resolved automatically, in most cases to 127.0.0.1. Default executors
// treat return codes between 200 and 399 as success; custom executors
// may employ a different strategy, e.g. leveraging the `statuses` field.
type HealthCheck_HTTPCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol *NetworkInfo_Protocol `protobuf:"varint,5,opt,name=protocol,enum=mesos.v1.NetworkInfo_Protocol,def=1" json:"protocol,omitempty"`
	// Currently "http" and "https" are supported.
	Scheme *string `protobuf:"bytes,3,opt,name=scheme" json:"scheme,omitempty"`
	// Port to send the HTTP request.
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
	// HTTP request path.
	Path *string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	// NOTE: It is up to the custom executor to interpret and act on this
	// field. Setting this field has no effect on the default executors.
	//
	// TODO(haosdent): Deprecate this field when we add better support for
	// success and possibly failure statuses, e.g. ranges of success and
	// failure statuses.
	Statuses []uint32 `protobuf:"varint,4,rep,name=statuses" json:"statuses,omitempty"`
}

// Default values for HealthCheck_HTTPCheckInfo fields.
const (
	Default_HealthCheck_HTTPCheckInfo_Protocol = NetworkInfo_IPv4
)

func (x *HealthCheck_HTTPCheckInfo) Reset() {
	*x = HealthCheck_HTTPCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck_HTTPCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_HTTPCheckInfo) ProtoMessage() {}

func (x *HealthCheck_HTTPCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_HTTPCheckInfo.ProtoReflect.Descriptor instead.
func (*HealthCheck_HTTPCheckInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{17, 0}
}

func (x *HealthCheck_HTTPCheckInfo) GetProtocol() NetworkInfo_Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Default_HealthCheck_HTTPCheckInfo_Protocol
}

func (x *HealthCheck_HTTPCheckInfo) GetScheme() string {
	if x != nil && x.Scheme != nil {
		return *x.Scheme
	}
	return ""
}

func (x *HealthCheck_HTTPCheckInfo) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *HealthCheck_HTTPCheckInfo) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *HealthCheck_HTTPCheckInfo) GetStatuses() []uint32 {
	if x != nil {
		return x.Statuses
	}
	return nil
}

// Describes a TCP health check, i.e. based on establishing
// a TCP connection to the specified port.
type HealthCheck_TCPCheckInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol *NetworkInfo_Protocol `protobuf:"varint,2,opt,name=protocol,enum=mesos.v1.NetworkInfo_Protocol,def=1" json:"protocol,omitempty"`
	// Port expected to be open.
	Port *uint32 `protobuf:"varint,1,req,name=port" json:"port,omitempty"`
}

// Default values for HealthCheck_TCPCheckInfo fields.
const (
	Default_HealthCheck_TCPCheckInfo_Protocol = NetworkInfo_IPv4
)

func (x *HealthCheck_TCPCheckInfo) Reset() {
	*x = HealthCheck_TCPCheckInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheck_TCPCheckInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck_TCPCheckInfo) ProtoMessage() {}

func (x *HealthCheck_TCPCheckInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck_TCPCheckInfo.ProtoReflect.Descriptor instead.
func (*HealthCheck_TCPCheckInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{17, 1}
}

func (x *HealthCheck_TCPCheckInfo) GetProtocol() NetworkInfo_Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Default_HealthCheck_TCPCheckInfo_Protocol
}

func (x *HealthCheck_TCPCheckInfo) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type CommandInfo_URI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Executable *bool   `protobuf:"varint,2,opt,name=executable" json:"executable,omitempty"`
	// In case the fetched file is recognized as an archive, extract
	// its contents into the sandbox. Note that a cached archive is
	// not copied from the cache to the sandbox in case extraction
	// originates from an archive in the cache.
	Extract *bool `protobuf:"varint,3,opt,name=extract,def=1" json:"extract,omitempty"`
	// If this field is "true", the fetcher cache will be used. If not,
	// fetching bypasses the cache and downloads directly into the
	// sandbox directory, no matter whether a suitable cache file is
	// available or not. The former directs the fetcher to download to
	// the file cache, then copy from there to the sandbox. Subsequent
	// fetch attempts with the same URI will omit downloading and copy
	// from the cache as long as the file is resident there. Cache files
	// may get evicted at any time, which then leads to renewed
	// downloading. See also "docs/fetcher.md" and
	// "docs/fetcher-cache-internals.md".
	Cache *bool `protobuf:"varint,4,opt,name=cache" json:"cache,omitempty"`
	// The fetcher's default behavior is to use the URI string's basename to
	// name the local copy. If this field is provided, the local copy will be
	// named with its value instead. If there is a directory component (which
	// must be a relative path), the local copy will be stored in that
	// subdirectory inside the sandbox.
	OutputFile *string `protobuf:"bytes,5,opt,name=output_file,json=outputFile" json:"output_file,omitempty"`
}

// Default values for CommandInfo_URI fields.
const (
	Default_CommandInfo_URI_Extract = bool(true)
)

func (x *CommandInfo_URI) Reset() {
	*x = CommandInfo_URI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandInfo_URI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInfo_URI) ProtoMessage() {}

func (x *CommandInfo_URI) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInfo_URI.ProtoReflect.Descriptor instead.
func (*CommandInfo_URI) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{19, 0}
}

func (x *CommandInfo_URI) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *CommandInfo_URI) GetExecutable() bool {
	if x != nil && x.Executable != nil {
		return *x.Executable
	}
	return false
}

func (x *CommandInfo_URI) GetExtract() bool {
	if x != nil && x.Extract != nil {
		return *x.Extract
	}
	return Default_CommandInfo_URI_Extract
}

func (x *CommandInfo_URI) GetCache() bool {
	if x != nil && x.Cache != nil {
		return *x.Cache
	}
	return false
}

func (x *CommandInfo_URI) GetOutputFile() string {
	if x != nil && x.OutputFile != nil {
		return *x.OutputFile
	}
	return ""
}

type DomainInfo_FaultDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region *DomainInfo_FaultDomain_RegionInfo `protobuf:"bytes,1,req,name=region" json:"region,omitempty"`
	Zone   *DomainInfo_FaultDomain_ZoneInfo   `protobuf:"bytes,2,req,name=zone" json:"zone,omitempty"`
}

func (x *DomainInfo_FaultDomain) Reset() {
	*x = DomainInfo_FaultDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo_FaultDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo_FaultDomain) ProtoMessage() {}

func (x *DomainInfo_FaultDomain) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo_FaultDomain.ProtoReflect.Descriptor instead.
func (*DomainInfo_FaultDomain) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{21, 0}
}

func (x *DomainInfo_FaultDomain) GetRegion() *DomainInfo_FaultDomain_RegionInfo {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *DomainInfo_FaultDomain) GetZone() *DomainInfo_FaultDomain_ZoneInfo {
	if x != nil {
		return x.Zone
	}
	return nil
}

type DomainInfo_FaultDomain_RegionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
}

func (x *DomainInfo_FaultDomain_RegionInfo) Reset() {
	*x = DomainInfo_FaultDomain_RegionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo_FaultDomain_RegionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo_FaultDomain_RegionInfo) ProtoMessage() {}

func (x *DomainInfo_FaultDomain_RegionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo_FaultDomain_RegionInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo_FaultDomain_RegionInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{21, 0, 0}
}

func (x *DomainInfo_FaultDomain_RegionInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type DomainInfo_FaultDomain_ZoneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
}

func (x *DomainInfo_FaultDomain_ZoneInfo) Reset() {
	*x = DomainInfo_FaultDomain_ZoneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DomainInfo_FaultDomain_ZoneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo_FaultDomain_ZoneInfo) ProtoMessage() {}

func (x *DomainInfo_FaultDomain_ZoneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo_FaultDomain_ZoneInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo_FaultDomain_ZoneInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{21, 0, 1}
}

func (x *DomainInfo_FaultDomain_ZoneInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type MasterInfo_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *MasterInfo_Capability_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.MasterInfo_Capability_Type" json:"type,omitempty"`
}

func (x *MasterInfo_Capability) Reset() {
	*x = MasterInfo_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterInfo_Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterInfo_Capability) ProtoMessage() {}

func (x *MasterInfo_Capability) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterInfo_Capability.ProtoReflect.Descriptor instead.
func (*MasterInfo_Capability) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{22, 0}
}

func (x *MasterInfo_Capability) GetType() MasterInfo_Capability_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MasterInfo_Capability_UNKNOWN
}

type AgentInfo_Capability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enum fields should be optional, see: MESOS-4997.
	Type *AgentInfo_Capability_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.AgentInfo_Capability_Type" json:"type,omitempty"`
}

func (x *AgentInfo_Capability) Reset() {
	*x = AgentInfo_Capability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo_Capability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo_Capability) ProtoMessage() {}

func (x *AgentInfo_Capability) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo_Capability.ProtoReflect.Descriptor instead.
func (*AgentInfo_Capability) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{23, 0}
}

func (x *AgentInfo_Capability) GetType() AgentInfo_Capability_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AgentInfo_Capability_UNKNOWN
}

// Storage resource provider related information.
type ResourceProviderInfo_Storage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *CSIPluginInfo `protobuf:"bytes,1,req,name=plugin" json:"plugin,omitempty"`
	// Amount of time to wait after the resource provider finishes reconciling
	// existing volumes and storage pools against the CSI plugin to start the
	// next reconciliation. A non-positive value means that no reconciliation
	// will happen after startup.
	ReconciliationIntervalSeconds *float64 `protobuf:"fixed64,2,opt,name=reconciliation_interval_seconds,json=reconciliationIntervalSeconds" json:"reconciliation_interval_seconds,omitempty"`
}

func (x *ResourceProviderInfo_Storage) Reset() {
	*x = ResourceProviderInfo_Storage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceProviderInfo_Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceProviderInfo_Storage) ProtoMessage() {}

func (x *ResourceProviderInfo_Storage) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceProviderInfo_Storage.ProtoReflect.Descriptor instead.
func (*ResourceProviderInfo_Storage) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ResourceProviderInfo_Storage) GetPlugin() *CSIPluginInfo {
	if x != nil {
		return x.Plugin
	}
	return nil
}

func (x *ResourceProviderInfo_Storage) GetReconciliationIntervalSeconds() float64 {
	if x != nil && x.ReconciliationIntervalSeconds != nil {
		return *x.ReconciliationIntervalSeconds
	}
	return 0
}

type Value_Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scalar values are represented using floating point. To reduce
	// the chance of unpredictable floating point behavior due to
	// roundoff error, Mesos only supports three decimal digits of
	// precision for scalar resource values. That is, floating point
	// values are converted to a fixed point format that supports
	// three decimal digits of precision, and then converted back to
	// floating point on output. Any additional precision in scalar
	// resource values is discarded (via rounding).
	Value *float64 `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
}

func (x *Value_Scalar) Reset() {
	*x = Value_Scalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Scalar) ProtoMessage() {}

func (x *Value_Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Scalar.ProtoReflect.Descriptor instead.
func (*Value_Scalar) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Value_Scalar) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type Value_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin *uint64 `protobuf:"varint,1,req,name=begin" json:"begin,omitempty"`
	End   *uint64 `protobuf:"varint,2,req,name=end" json:"end,omitempty"`
}

func (x *Value_Range) Reset() {
	*x = Value_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Range) ProtoMessage() {}

func (x *Value_Range) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Range.ProtoReflect.Descriptor instead.
func (*Value_Range) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28, 1}
}

func (x *Value_Range) GetBegin() uint64 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *Value_Range) GetEnd() uint64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

type Value_Ranges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range []*Value_Range `protobuf:"bytes,1,rep,name=range" json:"range,omitempty"`
}

func (x *Value_Ranges) Reset() {
	*x = Value_Ranges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Ranges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Ranges) ProtoMessage() {}

func (x *Value_Ranges) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Ranges.ProtoReflect.Descriptor instead.
func (*Value_Ranges) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28, 2}
}

func (x *Value_Ranges) GetRange() []*Value_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type Value_Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []string `protobuf:"bytes,1,rep,name=item" json:"item,omitempty"`
}

func (x *Value_Set) Reset() {
	*x = Value_Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Set) ProtoMessage() {}

func (x *Value_Set) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Set.ProtoReflect.Descriptor instead.
func (*Value_Set) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28, 3}
}

func (x *Value_Set) GetItem() []string {
	if x != nil {
		return x.Item
	}
	return nil
}

type Value_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
}

func (x *Value_Text) Reset() {
	*x = Value_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value_Text) ProtoMessage() {}

func (x *Value_Text) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value_Text.ProtoReflect.Descriptor instead.
func (*Value_Text) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{28, 4}
}

func (x *Value_Text) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// This was initially introduced to support MULTI_ROLE capable
// frameworks. Frameworks that are not MULTI_ROLE capable can
// continue to assume that the offered resources are allocated
// to their role.
type Resource_AllocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, this resource is allocated to a role. Note that in the
	// future, this may be unset and the scheduler may be responsible
	// for allocating to one of its roles.
	Role *string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (x *Resource_AllocationInfo) Reset() {
	*x = Resource_AllocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_AllocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_AllocationInfo) ProtoMessage() {}

func (x *Resource_AllocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_AllocationInfo.ProtoReflect.Descriptor instead.
func (*Resource_AllocationInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 0}
}

func (x *Resource_AllocationInfo) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

type Resource_ReservationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of this reservation.
	//
	// NOTE: This field must not be set for `Resource.reservation`.
	//
	//	See the 'Resource Format' section for more details.
	Type *Resource_ReservationInfo_Type `protobuf:"varint,4,opt,name=type,enum=mesos.v1.Resource_ReservationInfo_Type" json:"type,omitempty"`
	// The role to which this reservation is made for.
	//
	// NOTE: This field must not be set for `Resource.reservation`.
	//
	//	See the 'Resource Format' section for more details.
	Role *string `protobuf:"bytes,3,opt,name=role" json:"role,omitempty"`
	// Indicates the principal, if any, of the framework or operator
	// that reserved this resource. If reserved by a framework, the
	// field should match the `FrameworkInfo.principal`. It is used in
	// conjunction with the `UnreserveResources` ACL to determine
	// whether the entity attempting to unreserve this resource is
	// permitted to do so.
	Principal *string `protobuf:"bytes,1,opt,name=principal" json:"principal,omitempty"`
	// Labels are free-form key value pairs that can be used to
	// associate arbitrary metadata with a reserved resource.  For
	// example, frameworks can use labels to identify the intended
	// purpose for a portion of the resources the framework has
	// reserved at a given agent. Labels should not contain duplicate
	// key-value pairs.
	Labels *Labels `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
}

func (x *Resource_ReservationInfo) Reset() {
	*x = Resource_ReservationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_ReservationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_ReservationInfo) ProtoMessage() {}

func (x *Resource_ReservationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_ReservationInfo.ProtoReflect.Descriptor instead.
func (*Resource_ReservationInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 1}
}

func (x *Resource_ReservationInfo) GetType() Resource_ReservationInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Resource_ReservationInfo_UNKNOWN
}

func (x *Resource_ReservationInfo) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *Resource_ReservationInfo) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

func (x *Resource_ReservationInfo) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Resource_DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Persistence *Resource_DiskInfo_Persistence `protobuf:"bytes,1,opt,name=persistence" json:"persistence,omitempty"`
	// Describes how this disk resource will be mounted in the
	// container. If not set, the disk resource will be used as the
	// sandbox. Otherwise, it will be mounted according to the
	// 'container_path' inside 'volume'. The 'host_path' inside
	// 'volume' is ignored.
	// NOTE: If 'volume' is set but 'persistence' is not set, the
	// volume will be automatically garbage collected after
	// task/executor terminates. Currently, if 'persistence' is set,
	// 'volume' must be set.
	Volume *Volume                   `protobuf:"bytes,2,opt,name=volume" json:"volume,omitempty"`
	Source *Resource_DiskInfo_Source `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
}

func (x *Resource_DiskInfo) Reset() {
	*x = Resource_DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_DiskInfo) ProtoMessage() {}

func (x *Resource_DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_DiskInfo.ProtoReflect.Descriptor instead.
func (*Resource_DiskInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 2}
}

func (x *Resource_DiskInfo) GetPersistence() *Resource_DiskInfo_Persistence {
	if x != nil {
		return x.Persistence
	}
	return nil
}

func (x *Resource_DiskInfo) GetVolume() *Volume {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Resource_DiskInfo) GetSource() *Resource_DiskInfo_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type Resource_RevocableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Resource_RevocableInfo) Reset() {
	*x = Resource_RevocableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_RevocableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_RevocableInfo) ProtoMessage() {}

func (x *Resource_RevocableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_RevocableInfo.ProtoReflect.Descriptor instead.
func (*Resource_RevocableInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 3}
}

// Allow the resource to be shared across tasks.
type Resource_SharedInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Resource_SharedInfo) Reset() {
	*x = Resource_SharedInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_SharedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_SharedInfo) ProtoMessage() {}

func (x *Resource_SharedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_SharedInfo.ProtoReflect.Descriptor instead.
func (*Resource_SharedInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 4}
}

// Describes a persistent disk volume.
//
// A persistent disk volume will not be automatically garbage
// collected if the task/executor/agent terminates, but will be
// re-offered to the framework(s) belonging to the 'role'.
//
// NOTE: Currently, we do not allow persistent disk volumes
// without a reservation (i.e., 'role' cannot be '*').
type Resource_DiskInfo_Persistence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique ID for the persistent disk volume. This ID must be
	// unique per role on each agent. Although it is possible to use
	// the same ID on different agents in the cluster and to reuse
	// IDs after a volume with that ID has been destroyed, both
	// practices are discouraged.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// This field indicates the principal of the operator or
	// framework that created this volume. It is used in conjunction
	// with the "destroy" ACL to determine whether an entity
	// attempting to destroy the volume is permitted to do so.
	//
	// NOTE: This field should match the FrameworkInfo.principal of
	// the framework that created the volume.
	Principal *string `protobuf:"bytes,2,opt,name=principal" json:"principal,omitempty"`
}

func (x *Resource_DiskInfo_Persistence) Reset() {
	*x = Resource_DiskInfo_Persistence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_DiskInfo_Persistence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_DiskInfo_Persistence) ProtoMessage() {}

func (x *Resource_DiskInfo_Persistence) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_DiskInfo_Persistence.ProtoReflect.Descriptor instead.
func (*Resource_DiskInfo_Persistence) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 2, 0}
}

func (x *Resource_DiskInfo_Persistence) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Resource_DiskInfo_Persistence) GetPrincipal() string {
	if x != nil && x.Principal != nil {
		return *x.Principal
	}
	return ""
}

// Describes where a disk originates from.
type Resource_DiskInfo_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *Resource_DiskInfo_Source_Type  `protobuf:"varint,1,req,name=type,enum=mesos.v1.Resource_DiskInfo_Source_Type" json:"type,omitempty"`
	Path  *Resource_DiskInfo_Source_Path  `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Mount *Resource_DiskInfo_Source_Mount `protobuf:"bytes,3,opt,name=mount" json:"mount,omitempty"`
	// The vendor of this source. If present, this field provides the means to
	// uniquely identify the storage backend of this source in the cluster.
	Vendor *string `protobuf:"bytes,7,opt,name=vendor" json:"vendor,omitempty"` // EXPERIMENTAL.
	// The identifier of this source. This field maps onto CSI volume IDs and
	// is not expected to be set by frameworks. If both `vendor` and `id` are
	// present, these two fields together provide the means to uniquely
	// identify this source in the cluster.
	Id *string `protobuf:"bytes,4,opt,name=id" json:"id,omitempty"` // EXPERIMENTAL.
	// Additional metadata for this source. This field maps onto CSI volume
	// context. Frameworks should neither alter this field, nor expect this
	// field to remain unchanged.
	Metadata *Labels `protobuf:"bytes,5,opt,name=metadata" json:"metadata,omitempty"` // EXPERIMENTAL.
	// This field serves as an indirection to a set of storage
	// vendor specific disk parameters which describe the properties
	// of the disk. The operator will setup mappings between a
	// profile name to a set of vendor specific disk parameters. And
	// the framework will do disk selection based on profile names,
	// instead of vendor specific disk parameters.
	//
	// Also see the DiskProfileAdaptor module.
	Profile *string `protobuf:"bytes,6,opt,name=profile" json:"profile,omitempty"` // EXPERIMENTAL.
}

func (x *Resource_DiskInfo_Source) Reset() {
	*x = Resource_DiskInfo_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_DiskInfo_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_DiskInfo_Source) ProtoMessage() {}

func (x *Resource_DiskInfo_Source) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_DiskInfo_Source.ProtoReflect.Descriptor instead.
func (*Resource_DiskInfo_Source) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 2, 1}
}

func (x *Resource_DiskInfo_Source) GetType() Resource_DiskInfo_Source_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Resource_DiskInfo_Source_UNKNOWN
}

func (x *Resource_DiskInfo_Source) GetPath() *Resource_DiskInfo_Source_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Resource_DiskInfo_Source) GetMount() *Resource_DiskInfo_Source_Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *Resource_DiskInfo_Source) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *Resource_DiskInfo_Source) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Resource_DiskInfo_Source) GetMetadata() *Labels {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Resource_DiskInfo_Source) GetProfile() string {
	if x != nil && x.Profile != nil {
		return *x.Profile
	}
	return ""
}

// A folder that can be located on a separate disk device. This
// can be shared and carved up as necessary between frameworks.
type Resource_DiskInfo_Source_Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the folder (e.g., /mnt/raid/disk0). If the path is a
	// relative path, it is relative to the agent work directory.
	Root *string `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (x *Resource_DiskInfo_Source_Path) Reset() {
	*x = Resource_DiskInfo_Source_Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_DiskInfo_Source_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_DiskInfo_Source_Path) ProtoMessage() {}

func (x *Resource_DiskInfo_Source_Path) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_DiskInfo_Source_Path.ProtoReflect.Descriptor instead.
func (*Resource_DiskInfo_Source_Path) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 2, 1, 0}
}

func (x *Resource_DiskInfo_Source_Path) GetRoot() string {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return ""
}

// A mounted file-system set up by the Agent administrator. This
// can only be used exclusively: a framework cannot accept a
// partial amount of this disk.
type Resource_DiskInfo_Source_Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to mount point (e.g., /mnt/raid/disk0). If the path is a
	// relative path, it is relative to the agent work directory.
	Root *string `protobuf:"bytes,1,opt,name=root" json:"root,omitempty"`
}

func (x *Resource_DiskInfo_Source_Mount) Reset() {
	*x = Resource_DiskInfo_Source_Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource_DiskInfo_Source_Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource_DiskInfo_Source_Mount) ProtoMessage() {}

func (x *Resource_DiskInfo_Source_Mount) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource_DiskInfo_Source_Mount.ProtoReflect.Descriptor instead.
func (*Resource_DiskInfo_Source_Mount) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{30, 2, 1, 1}
}

func (x *Resource_DiskInfo_Source_Mount) GetRoot() string {
	if x != nil && x.Root != nil {
		return *x.Root
	}
	return ""
}

type ResourceStatistics_RatePercentiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min     *uint64 `protobuf:"varint,1,opt,name=min" json:"min,omitempty"`
	Max     *uint64 `protobuf:"varint,2,opt,name=max" json:"max,omitempty"`
	P50     *uint64 `protobuf:"varint,3,opt,name=p50" json:"p50,omitempty"`
	P90     *uint64 `protobuf:"varint,4,opt,name=p90" json:"p90,omitempty"`
	P95     *uint64 `protobuf:"varint,5,opt,name=p95" json:"p95,omitempty"`
	P99     *uint64 `protobuf:"varint,6,opt,name=p99" json:"p99,omitempty"`
	P999    *uint64 `protobuf:"varint,7,opt,name=p999" json:"p999,omitempty"`
	P9999   *uint64 `protobuf:"varint,8,opt,name=p9999" json:"p9999,omitempty"`
	Samples *uint64 `protobuf:"varint,9,opt,name=samples" json:"samples,omitempty"`
}

func (x *ResourceStatistics_RatePercentiles) Reset() {
	*x = ResourceStatistics_RatePercentiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatistics_RatePercentiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatistics_RatePercentiles) ProtoMessage() {}

func (x *ResourceStatistics_RatePercentiles) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatistics_RatePercentiles.ProtoReflect.Descriptor instead.
func (*ResourceStatistics_RatePercentiles) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{38, 0}
}

func (x *ResourceStatistics_RatePercentiles) GetMin() uint64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetMax() uint64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetP50() uint64 {
	if x != nil && x.P50 != nil {
		return *x.P50
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetP90() uint64 {
	if x != nil && x.P90 != nil {
		return *x.P90
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetP95() uint64 {
	if x != nil && x.P95 != nil {
		return *x.P95
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetP99() uint64 {
	if x != nil && x.P99 != nil {
		return *x.P99
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetP999() uint64 {
	if x != nil && x.P999 != nil {
		return *x.P999
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetP9999() uint64 {
	if x != nil && x.P9999 != nil {
		return *x.P9999
	}
	return 0
}

func (x *ResourceStatistics_RatePercentiles) GetSamples() uint64 {
	if x != nil && x.Samples != nil {
		return *x.Samples
	}
	return 0
}

// Network rate statistics measured in bytes per second
// or packets per second.
//
// Rates are sampled every {sampling_interval_secs}. A
// time series is created out of the samples taken over
// a moving sampling window of {sampling_window_secs}.
// Percentiles for each time series are exposed through
// RatePercentiles.
//
// Linux documentation for more information:
// https://docs.kernel.org/networking/statistics.html#c.rtnl_link_stats64
type ResourceStatistics_RateStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bytes received per second.
	RxRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,1,opt,name=rx_rate,json=rxRate" json:"rx_rate,omitempty"`
	// Packets received per second.
	RxPacketRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,2,opt,name=rx_packet_rate,json=rxPacketRate" json:"rx_packet_rate,omitempty"`
	// Received packets dropped per second.
	RxDropRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,3,opt,name=rx_drop_rate,json=rxDropRate" json:"rx_drop_rate,omitempty"`
	// Receiving packet errors per second.
	RxErrorRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,4,opt,name=rx_error_rate,json=rxErrorRate" json:"rx_error_rate,omitempty"`
	// Bytes sent per second.
	TxRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,5,opt,name=tx_rate,json=txRate" json:"tx_rate,omitempty"`
	// Packets sent per second.
	TxPacketRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,6,opt,name=tx_packet_rate,json=txPacketRate" json:"tx_packet_rate,omitempty"`
	// Send packets dropped per second.
	TxDropRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,7,opt,name=tx_drop_rate,json=txDropRate" json:"tx_drop_rate,omitempty"`
	// Sending packet errors per second.
	TxErrorRate *ResourceStatistics_RatePercentiles `protobuf:"bytes,8,opt,name=tx_error_rate,json=txErrorRate" json:"tx_error_rate,omitempty"`
	// Duration of the sliding time series window.
	SamplingWindowSecs *float64 `protobuf:"fixed64,9,opt,name=sampling_window_secs,json=samplingWindowSecs" json:"sampling_window_secs,omitempty"`
	// The delay between rate samples.
	SamplingIntervalSecs *float64 `protobuf:"fixed64,10,opt,name=sampling_interval_secs,json=samplingIntervalSecs" json:"sampling_interval_secs,omitempty"`
}

func (x *ResourceStatistics_RateStatistics) Reset() {
	*x = ResourceStatistics_RateStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceStatistics_RateStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStatistics_RateStatistics) ProtoMessage() {}

func (x *ResourceStatistics_RateStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStatistics_RateStatistics.ProtoReflect.Descriptor instead.
func (*ResourceStatistics_RateStatistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{38, 1}
}

func (x *ResourceStatistics_RateStatistics) GetRxRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.RxRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetRxPacketRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.RxPacketRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetRxDropRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.RxDropRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetRxErrorRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.RxErrorRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetTxRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.TxRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetTxPacketRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.TxPacketRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetTxDropRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.TxDropRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetTxErrorRate() *ResourceStatistics_RatePercentiles {
	if x != nil {
		return x.TxErrorRate
	}
	return nil
}

func (x *ResourceStatistics_RateStatistics) GetSamplingWindowSecs() float64 {
	if x != nil && x.SamplingWindowSecs != nil {
		return *x.SamplingWindowSecs
	}
	return 0
}

func (x *ResourceStatistics_RateStatistics) GetSamplingIntervalSecs() float64 {
	if x != nil && x.SamplingIntervalSecs != nil {
		return *x.SamplingIntervalSecs
	}
	return 0
}

type ResourceUsage_Executor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutorInfo *ExecutorInfo `protobuf:"bytes,1,req,name=executor_info,json=executorInfo" json:"executor_info,omitempty"`
	// This includes resources used by the executor itself
	// as well as its active tasks.
	Allocated []*Resource `protobuf:"bytes,2,rep,name=allocated" json:"allocated,omitempty"`
	// Current resource usage. If absent, the containerizer
	// cannot provide resource usage.
	Statistics *ResourceStatistics `protobuf:"bytes,3,opt,name=statistics" json:"statistics,omitempty"`
	// The container id for the executor specified in the executor_info field.
	ContainerId *ContainerID `protobuf:"bytes,4,req,name=container_id,json=containerId" json:"container_id,omitempty"`
	// Non-terminal tasks.
	Tasks []*ResourceUsage_Executor_Task `protobuf:"bytes,5,rep,name=tasks" json:"tasks,omitempty"`
}

func (x *ResourceUsage_Executor) Reset() {
	*x = ResourceUsage_Executor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsage_Executor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage_Executor) ProtoMessage() {}

func (x *ResourceUsage_Executor) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage_Executor.ProtoReflect.Descriptor instead.
func (*ResourceUsage_Executor) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{39, 0}
}

func (x *ResourceUsage_Executor) GetExecutorInfo() *ExecutorInfo {
	if x != nil {
		return x.ExecutorInfo
	}
	return nil
}

func (x *ResourceUsage_Executor) GetAllocated() []*Resource {
	if x != nil {
		return x.Allocated
	}
	return nil
}

func (x *ResourceUsage_Executor) GetStatistics() *ResourceStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ResourceUsage_Executor) GetContainerId() *ContainerID {
	if x != nil {
		return x.ContainerId
	}
	return nil
}

func (x *ResourceUsage_Executor) GetTasks() []*ResourceUsage_Executor_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type ResourceUsage_Executor_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string     `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Id        *TaskID     `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	Resources []*Resource `protobuf:"bytes,3,rep,name=resources" json:"resources,omitempty"`
	Labels    *Labels     `protobuf:"bytes,4,opt,name=labels" json:"labels,omitempty"`
}

func (x *ResourceUsage_Executor_Task) Reset() {
	*x = ResourceUsage_Executor_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceUsage_Executor_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceUsage_Executor_Task) ProtoMessage() {}

func (x *ResourceUsage_Executor_Task) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceUsage_Executor_Task.ProtoReflect.Descriptor instead.
func (*ResourceUsage_Executor_Task) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{39, 0, 0}
}

func (x *ResourceUsage_Executor_Task) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ResourceUsage_Executor_Task) GetId() *TaskID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ResourceUsage_Executor_Task) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ResourceUsage_Executor_Task) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

type OfferFilters_ResourceQuantities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Quantities are pairs of identifiers of scalar resources and
	// an associated value, e.g., `{"disk": Scalar {"value": 30}}`.
	Quantities map[string]*Value_Scalar `protobuf:"bytes,1,rep,name=quantities" json:"quantities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *OfferFilters_ResourceQuantities) Reset() {
	*x = OfferFilters_ResourceQuantities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferFilters_ResourceQuantities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferFilters_ResourceQuantities) ProtoMessage() {}

func (x *OfferFilters_ResourceQuantities) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferFilters_ResourceQuantities.ProtoReflect.Descriptor instead.
func (*OfferFilters_ResourceQuantities) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{41, 0}
}

func (x *OfferFilters_ResourceQuantities) GetQuantities() map[string]*Value_Scalar {
	if x != nil {
		return x.Quantities
	}
	return nil
}

type OfferFilters_MinAllocatableResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of resources is considered allocatable if contained in any of
	// the following quantities. If no quantities are specified any resource
	// is considered allocatable.
	Quantities []*OfferFilters_ResourceQuantities `protobuf:"bytes,1,rep,name=quantities" json:"quantities,omitempty"`
}

func (x *OfferFilters_MinAllocatableResources) Reset() {
	*x = OfferFilters_MinAllocatableResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferFilters_MinAllocatableResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferFilters_MinAllocatableResources) ProtoMessage() {}

func (x *OfferFilters_MinAllocatableResources) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferFilters_MinAllocatableResources.ProtoReflect.Descriptor instead.
func (*OfferFilters_MinAllocatableResources) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{41, 1}
}

func (x *OfferFilters_MinAllocatableResources) GetQuantities() []*OfferFilters_ResourceQuantities {
	if x != nil {
		return x.Quantities
	}
	return nil
}

// Defines an operation that can be performed against offers.
type Offer_Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Offer_Operation_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Offer_Operation_Type" json:"type,omitempty"`
	// The `id` field allows frameworks to indicate that they wish to receive
	// feedback about an operation via the UPDATE_OPERATION_STATUS event in the
	// v1 scheduler API.
	Id           *OperationID                  `protobuf:"bytes,12,opt,name=id" json:"id,omitempty"` // EXPERIMENTAL.
	Launch       *Offer_Operation_Launch       `protobuf:"bytes,2,opt,name=launch" json:"launch,omitempty"`
	LaunchGroup  *Offer_Operation_LaunchGroup  `protobuf:"bytes,7,opt,name=launch_group,json=launchGroup" json:"launch_group,omitempty"`
	Reserve      *Offer_Operation_Reserve      `protobuf:"bytes,3,opt,name=reserve" json:"reserve,omitempty"`
	Unreserve    *Offer_Operation_Unreserve    `protobuf:"bytes,4,opt,name=unreserve" json:"unreserve,omitempty"`
	Create       *Offer_Operation_Create       `protobuf:"bytes,5,opt,name=create" json:"create,omitempty"`
	Destroy      *Offer_Operation_Destroy      `protobuf:"bytes,6,opt,name=destroy" json:"destroy,omitempty"`
	GrowVolume   *Offer_Operation_GrowVolume   `protobuf:"bytes,13,opt,name=grow_volume,json=growVolume" json:"grow_volume,omitempty"`       // EXPERIMENTAL.
	ShrinkVolume *Offer_Operation_ShrinkVolume `protobuf:"bytes,14,opt,name=shrink_volume,json=shrinkVolume" json:"shrink_volume,omitempty"` // EXPERIMENTAL.
	CreateDisk   *Offer_Operation_CreateDisk   `protobuf:"bytes,15,opt,name=create_disk,json=createDisk" json:"create_disk,omitempty"`       // EXPERIMENTAL.
	DestroyDisk  *Offer_Operation_DestroyDisk  `protobuf:"bytes,16,opt,name=destroy_disk,json=destroyDisk" json:"destroy_disk,omitempty"`    // EXPERIMENTAL.
}

func (x *Offer_Operation) Reset() {
	*x = Offer_Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation) ProtoMessage() {}

func (x *Offer_Operation) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation.ProtoReflect.Descriptor instead.
func (*Offer_Operation) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0}
}

func (x *Offer_Operation) GetType() Offer_Operation_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Offer_Operation_UNKNOWN
}

func (x *Offer_Operation) GetId() *OperationID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Offer_Operation) GetLaunch() *Offer_Operation_Launch {
	if x != nil {
		return x.Launch
	}
	return nil
}

func (x *Offer_Operation) GetLaunchGroup() *Offer_Operation_LaunchGroup {
	if x != nil {
		return x.LaunchGroup
	}
	return nil
}

func (x *Offer_Operation) GetReserve() *Offer_Operation_Reserve {
	if x != nil {
		return x.Reserve
	}
	return nil
}

func (x *Offer_Operation) GetUnreserve() *Offer_Operation_Unreserve {
	if x != nil {
		return x.Unreserve
	}
	return nil
}

func (x *Offer_Operation) GetCreate() *Offer_Operation_Create {
	if x != nil {
		return x.Create
	}
	return nil
}

func (x *Offer_Operation) GetDestroy() *Offer_Operation_Destroy {
	if x != nil {
		return x.Destroy
	}
	return nil
}

func (x *Offer_Operation) GetGrowVolume() *Offer_Operation_GrowVolume {
	if x != nil {
		return x.GrowVolume
	}
	return nil
}

func (x *Offer_Operation) GetShrinkVolume() *Offer_Operation_ShrinkVolume {
	if x != nil {
		return x.ShrinkVolume
	}
	return nil
}

func (x *Offer_Operation) GetCreateDisk() *Offer_Operation_CreateDisk {
	if x != nil {
		return x.CreateDisk
	}
	return nil
}

func (x *Offer_Operation) GetDestroyDisk() *Offer_Operation_DestroyDisk {
	if x != nil {
		return x.DestroyDisk
	}
	return nil
}

// TODO(vinod): Deprecate this in favor of `LaunchGroup` below.
type Offer_Operation_Launch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskInfos []*TaskInfo `protobuf:"bytes,1,rep,name=task_infos,json=taskInfos" json:"task_infos,omitempty"`
}

func (x *Offer_Operation_Launch) Reset() {
	*x = Offer_Operation_Launch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_Launch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_Launch) ProtoMessage() {}

func (x *Offer_Operation_Launch) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_Launch.ProtoReflect.Descriptor instead.
func (*Offer_Operation_Launch) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 0}
}

func (x *Offer_Operation_Launch) GetTaskInfos() []*TaskInfo {
	if x != nil {
		return x.TaskInfos
	}
	return nil
}

// Unlike `Launch` above, all the tasks in a `task_group` are
// atomically delivered to an executor.
//
// `NetworkInfo` set on executor will be shared by all tasks in
// the task group.
//
// TODO(vinod): Any volumes set on executor could be used by a
// task by explicitly setting `Volume.source` in its resources.
type Offer_Operation_LaunchGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Executor  *ExecutorInfo  `protobuf:"bytes,1,req,name=executor" json:"executor,omitempty"`
	TaskGroup *TaskGroupInfo `protobuf:"bytes,2,req,name=task_group,json=taskGroup" json:"task_group,omitempty"`
}

func (x *Offer_Operation_LaunchGroup) Reset() {
	*x = Offer_Operation_LaunchGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_LaunchGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_LaunchGroup) ProtoMessage() {}

func (x *Offer_Operation_LaunchGroup) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_LaunchGroup.ProtoReflect.Descriptor instead.
func (*Offer_Operation_LaunchGroup) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 1}
}

func (x *Offer_Operation_LaunchGroup) GetExecutor() *ExecutorInfo {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *Offer_Operation_LaunchGroup) GetTaskGroup() *TaskGroupInfo {
	if x != nil {
		return x.TaskGroup
	}
	return nil
}

type Offer_Operation_Reserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    []*Resource `protobuf:"bytes,2,rep,name=source" json:"source,omitempty"`
	Resources []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
}

func (x *Offer_Operation_Reserve) Reset() {
	*x = Offer_Operation_Reserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_Reserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_Reserve) ProtoMessage() {}

func (x *Offer_Operation_Reserve) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_Reserve.ProtoReflect.Descriptor instead.
func (*Offer_Operation_Reserve) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 2}
}

func (x *Offer_Operation_Reserve) GetSource() []*Resource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Offer_Operation_Reserve) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Offer_Operation_Unreserve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*Resource `protobuf:"bytes,1,rep,name=resources" json:"resources,omitempty"`
}

func (x *Offer_Operation_Unreserve) Reset() {
	*x = Offer_Operation_Unreserve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_Unreserve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_Unreserve) ProtoMessage() {}

func (x *Offer_Operation_Unreserve) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_Unreserve.ProtoReflect.Descriptor instead.
func (*Offer_Operation_Unreserve) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 3}
}

func (x *Offer_Operation_Unreserve) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Offer_Operation_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*Resource `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (x *Offer_Operation_Create) Reset() {
	*x = Offer_Operation_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_Create) ProtoMessage() {}

func (x *Offer_Operation_Create) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_Create.ProtoReflect.Descriptor instead.
func (*Offer_Operation_Create) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 4}
}

func (x *Offer_Operation_Create) GetVolumes() []*Resource {
	if x != nil {
		return x.Volumes
	}
	return nil
}

type Offer_Operation_Destroy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volumes []*Resource `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (x *Offer_Operation_Destroy) Reset() {
	*x = Offer_Operation_Destroy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_Destroy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_Destroy) ProtoMessage() {}

func (x *Offer_Operation_Destroy) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_Destroy.ProtoReflect.Descriptor instead.
func (*Offer_Operation_Destroy) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 5}
}

func (x *Offer_Operation_Destroy) GetVolumes() []*Resource {
	if x != nil {
		return x.Volumes
	}
	return nil
}

// Grow a volume by an additional disk resource.
// NOTE: This is currently experimental and only for persistent volumes
// created on ROOT/PATH disk.
type Offer_Operation_GrowVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume   *Resource `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	Addition *Resource `protobuf:"bytes,2,req,name=addition" json:"addition,omitempty"`
}

func (x *Offer_Operation_GrowVolume) Reset() {
	*x = Offer_Operation_GrowVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_GrowVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_GrowVolume) ProtoMessage() {}

func (x *Offer_Operation_GrowVolume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_GrowVolume.ProtoReflect.Descriptor instead.
func (*Offer_Operation_GrowVolume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 6}
}

func (x *Offer_Operation_GrowVolume) GetVolume() *Resource {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Offer_Operation_GrowVolume) GetAddition() *Resource {
	if x != nil {
		return x.Addition
	}
	return nil
}

// Shrink a volume by the size specified in the `subtract` field.
// NOTE: This is currently experimental and only for persistent volumes
// created on ROOT/PATH disk.
type Offer_Operation_ShrinkVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Volume *Resource `protobuf:"bytes,1,req,name=volume" json:"volume,omitempty"`
	// See comments in `Value.Scalar` for maximum precision supported.
	Subtract *Value_Scalar `protobuf:"bytes,2,req,name=subtract" json:"subtract,omitempty"`
}

func (x *Offer_Operation_ShrinkVolume) Reset() {
	*x = Offer_Operation_ShrinkVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_ShrinkVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_ShrinkVolume) ProtoMessage() {}

func (x *Offer_Operation_ShrinkVolume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_ShrinkVolume.ProtoReflect.Descriptor instead.
func (*Offer_Operation_ShrinkVolume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 7}
}

func (x *Offer_Operation_ShrinkVolume) GetVolume() *Resource {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *Offer_Operation_ShrinkVolume) GetSubtract() *Value_Scalar {
	if x != nil {
		return x.Subtract
	}
	return nil
}

// Create a `MOUNT` or `BLOCK` disk resource backed by a CSI volume from a
// `RAW` disk resource.
//
// In the typical case where the `RAW` disk resource has a profile and no
// source ID, a new CSI volume will be provisioned by Mesos to back the
// returned `MOUNT` or `BLOCK` disk resource. However, the `RAW` disk
// resource can instead have no profile but a source ID, indicating that
// it is already backed by a CSI volume in one of the following scenarios:
//
// (1) The CSI volume is preprovisioned out-of-band.
//
// (2) The CSI volume is provisioned by Mesos, but Mesos has lost the
//
//	corresponding `MOUNT` or `BLOCK` resource metadata. This could
//	happen if there has been a change in the agent ID or resource
//	provider ID where the volume belongs.
//
// In the above cases, Mesos won't provision a new CSI volume, but instead
// will simply return a `MOUNT` or `BLOCK` disk resource backed by the same
// CSI volume, with the profile specified in this call.
//
// NOTE: For the time being, this API is subject to change and the related
// feature is experimental.
type Offer_Operation_CreateDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Resource `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
	// NOTE: Only `MOUNT` or `BLOCK` is allowed in this field.
	TargetType *Resource_DiskInfo_Source_Type `protobuf:"varint,2,req,name=target_type,json=targetType,enum=mesos.v1.Resource_DiskInfo_Source_Type" json:"target_type,omitempty"`
	// Apply the specified profile to the created disk. This field must be set
	// if `source` does not have a profile, and must not be set if it has one.
	//
	// NOTE: The operation will fail If the specified profile is unknown to
	// Mesos, i.e., not reported by the disk profile adaptor.
	TargetProfile *string `protobuf:"bytes,3,opt,name=target_profile,json=targetProfile" json:"target_profile,omitempty"`
}

func (x *Offer_Operation_CreateDisk) Reset() {
	*x = Offer_Operation_CreateDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_CreateDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_CreateDisk) ProtoMessage() {}

func (x *Offer_Operation_CreateDisk) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_CreateDisk.ProtoReflect.Descriptor instead.
func (*Offer_Operation_CreateDisk) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 8}
}

func (x *Offer_Operation_CreateDisk) GetSource() *Resource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Offer_Operation_CreateDisk) GetTargetType() Resource_DiskInfo_Source_Type {
	if x != nil && x.TargetType != nil {
		return *x.TargetType
	}
	return Resource_DiskInfo_Source_UNKNOWN
}

func (x *Offer_Operation_CreateDisk) GetTargetProfile() string {
	if x != nil && x.TargetProfile != nil {
		return *x.TargetProfile
	}
	return ""
}

// Destroy a disk resource backed by a CSI volume.
//
// In the typical case where the CSI plugin of the volume supports volume
// deprovisioning and the disk resource is a `MOUNT` or `BLOCK` disk with a
// profile known to Mesos, the volume will be deprovisioned and a `RAW` disk
// resource with the same profile but no source ID will be returned.
// However, the following scenarios could lead to different outcomes:
//
// (1) If the CSI plugin supports volume deprovisioning but the profile of
//
//	the disk resource is unknown to the disk profile adaptor, or the disk
//	resource is a `RAW` disk with no profile but a source ID (see above
//	for possible scenarios), the volume will be deprovisioned but no
//	resource will be returned.
//
// (2) If the CSI plugin does not support volume deprovisioning, the volume
//
//	won't be deprovisioned and a `RAW` disk resource with no profile but
//	the same source ID will be returned.
//
// NOTE: For the time being, this API is subject to change and the related
// feature is experimental.
type Offer_Operation_DestroyDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: Only a `MOUNT`, `BLOCK` or `RAW` disk is allowed in this field.
	Source *Resource `protobuf:"bytes,1,req,name=source" json:"source,omitempty"`
}

func (x *Offer_Operation_DestroyDisk) Reset() {
	*x = Offer_Operation_DestroyDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer_Operation_DestroyDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer_Operation_DestroyDisk) ProtoMessage() {}

func (x *Offer_Operation_DestroyDisk) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer_Operation_DestroyDisk.ProtoReflect.Descriptor instead.
func (*Offer_Operation_DestroyDisk) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{43, 0, 9}
}

func (x *Offer_Operation_DestroyDisk) GetSource() *Resource {
	if x != nil {
		return x.Source
	}
	return nil
}

type CheckStatusInfo_Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exit code of a command check. It is the result of calling
	// `WEXITSTATUS()` on `waitpid()` termination information on
	// Posix and calling `GetExitCodeProcess()` on Windows.
	ExitCode *int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
}

func (x *CheckStatusInfo_Command) Reset() {
	*x = CheckStatusInfo_Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatusInfo_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatusInfo_Command) ProtoMessage() {}

func (x *CheckStatusInfo_Command) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatusInfo_Command.ProtoReflect.Descriptor instead.
func (*CheckStatusInfo_Command) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{52, 0}
}

func (x *CheckStatusInfo_Command) GetExitCode() int32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

type CheckStatusInfo_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HTTP status code of an HTTP check.
	StatusCode *uint32 `protobuf:"varint,1,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
}

func (x *CheckStatusInfo_Http) Reset() {
	*x = CheckStatusInfo_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatusInfo_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatusInfo_Http) ProtoMessage() {}

func (x *CheckStatusInfo_Http) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatusInfo_Http.ProtoReflect.Descriptor instead.
func (*CheckStatusInfo_Http) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{52, 1}
}

func (x *CheckStatusInfo_Http) GetStatusCode() uint32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

type CheckStatusInfo_Tcp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether a TCP connection succeeded.
	Succeeded *bool `protobuf:"varint,1,opt,name=succeeded" json:"succeeded,omitempty"`
}

func (x *CheckStatusInfo_Tcp) Reset() {
	*x = CheckStatusInfo_Tcp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckStatusInfo_Tcp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckStatusInfo_Tcp) ProtoMessage() {}

func (x *CheckStatusInfo_Tcp) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckStatusInfo_Tcp.ProtoReflect.Descriptor instead.
func (*CheckStatusInfo_Tcp) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{52, 2}
}

func (x *CheckStatusInfo_Tcp) GetSucceeded() bool {
	if x != nil && x.Succeeded != nil {
		return *x.Succeeded
	}
	return false
}

type Environment_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// In Mesos 1.2, the `Environment.variables.value` message was made
	// optional. The default type for `Environment.variables.type` is now VALUE,
	// which requires `value` to be set, maintaining backward compatibility.
	//
	// TODO(greggomann): The default can be removed in Mesos 2.1 (MESOS-7134).
	Type *Environment_Variable_Type `protobuf:"varint,3,opt,name=type,enum=mesos.v1.Environment_Variable_Type,def=1" json:"type,omitempty"`
	// Only one of `value` and `secret` must be set.
	Value  *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Secret *Secret `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
}

// Default values for Environment_Variable fields.
const (
	Default_Environment_Variable_Type = Environment_Variable_VALUE
)

func (x *Environment_Variable) Reset() {
	*x = Environment_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Environment_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Environment_Variable) ProtoMessage() {}

func (x *Environment_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Environment_Variable.ProtoReflect.Descriptor instead.
func (*Environment_Variable) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{55, 0}
}

func (x *Environment_Variable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Environment_Variable) GetType() Environment_Variable_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Default_Environment_Variable_Type
}

func (x *Environment_Variable) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Environment_Variable) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

// Can be used by modules to refer to a secret stored in a secure back-end.
// The `key` field is provided to permit reference to a single value within a
// secret containing arbitrary key-value pairs.
//
// For example, given a back-end secret store with a secret named
// "my-secret" containing the following key-value pairs:
//
//	{
//	  "username": "my-user",
//	  "password": "my-password
//	}
//
// the username could be referred to in a `Secret` by specifying
// "my-secret" for the `name` and "username" for the `key`.
type Secret_Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Key  *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (x *Secret_Reference) Reset() {
	*x = Secret_Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret_Reference) ProtoMessage() {}

func (x *Secret_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret_Reference.ProtoReflect.Descriptor instead.
func (*Secret_Reference) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{60, 0}
}

func (x *Secret_Reference) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Secret_Reference) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

// Used to pass the value of a secret.
type Secret_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,req,name=data" json:"data,omitempty"`
}

func (x *Secret_Value) Reset() {
	*x = Secret_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret_Value) ProtoMessage() {}

func (x *Secret_Value) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret_Value.ProtoReflect.Descriptor instead.
func (*Secret_Value) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{60, 1}
}

func (x *Secret_Value) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Protobuf for specifying an Appc container image. See:
// https://github.com/appc/spec/blob/master/spec/aci.md
type Image_Appc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the image.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// An image ID is a string of the format "hash-value", where
	// "hash" is the hash algorithm used and "value" is the hex
	// encoded string of the digest. Currently the only permitted
	// hash algorithm is sha512.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// Optional labels. Suggested labels: "version", "os", and "arch".
	Labels *Labels `protobuf:"bytes,3,opt,name=labels" json:"labels,omitempty"`
}

func (x *Image_Appc) Reset() {
	*x = Image_Appc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image_Appc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image_Appc) ProtoMessage() {}

func (x *Image_Appc) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image_Appc.ProtoReflect.Descriptor instead.
func (*Image_Appc) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{63, 0}
}

func (x *Image_Appc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Image_Appc) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Image_Appc) GetLabels() *Labels {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Image_Docker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the image. Expected format:
	//
	//	[REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG|@TYPE:DIGEST]
	//
	// See: https://docs.docker.com/reference/commandline/pull/
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Credential to authenticate with docker registry.
	// NOTE: This is not encrypted, therefore framework and operators
	// should enable SSL when passing this information.
	//
	// This field has never been used in Mesos before and is
	// deprecated since Mesos 1.3. Please use `config` below
	// (see MESOS-7088 for details).
	//
	// Deprecated: Marked as deprecated in mesos.proto.
	Credential *Credential `protobuf:"bytes,2,opt,name=credential" json:"credential,omitempty"` // Since 1.3.
	// Docker config containing credentials to authenticate with
	// docker registry. The secret is expected to be a docker
	// config file in JSON format with UTF-8 character encoding.
	Config *Secret `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (x *Image_Docker) Reset() {
	*x = Image_Docker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image_Docker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image_Docker) ProtoMessage() {}

func (x *Image_Docker) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image_Docker.ProtoReflect.Descriptor instead.
func (*Image_Docker) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{63, 1}
}

func (x *Image_Docker) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in mesos.proto.
func (x *Image_Docker) GetCredential() *Credential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Image_Docker) GetConfig() *Secret {
	if x != nil {
		return x.Config
	}
	return nil
}

// Describes where a volume originates from.
type Volume_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enum fields should be optional, see: MESOS-4997.
	Type *Volume_Source_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Volume_Source_Type" json:"type,omitempty"`
	// The source of the volume created by docker volume driver.
	DockerVolume *Volume_Source_DockerVolume `protobuf:"bytes,2,opt,name=docker_volume,json=dockerVolume" json:"docker_volume,omitempty"`
	HostPath     *Volume_Source_HostPath     `protobuf:"bytes,5,opt,name=host_path,json=hostPath" json:"host_path,omitempty"`
	SandboxPath  *Volume_Source_SandboxPath  `protobuf:"bytes,3,opt,name=sandbox_path,json=sandboxPath" json:"sandbox_path,omitempty"`
	// The volume/secret isolator uses the secret-fetcher module (third-party or
	// internal) downloads the secret and makes it available at container_path.
	Secret    *Secret                  `protobuf:"bytes,4,opt,name=secret" json:"secret,omitempty"`
	CsiVolume *Volume_Source_CSIVolume `protobuf:"bytes,6,opt,name=csi_volume,json=csiVolume" json:"csi_volume,omitempty"`
}

func (x *Volume_Source) Reset() {
	*x = Volume_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source) ProtoMessage() {}

func (x *Volume_Source) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source.ProtoReflect.Descriptor instead.
func (*Volume_Source) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0}
}

func (x *Volume_Source) GetType() Volume_Source_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Volume_Source_UNKNOWN
}

func (x *Volume_Source) GetDockerVolume() *Volume_Source_DockerVolume {
	if x != nil {
		return x.DockerVolume
	}
	return nil
}

func (x *Volume_Source) GetHostPath() *Volume_Source_HostPath {
	if x != nil {
		return x.HostPath
	}
	return nil
}

func (x *Volume_Source) GetSandboxPath() *Volume_Source_SandboxPath {
	if x != nil {
		return x.SandboxPath
	}
	return nil
}

func (x *Volume_Source) GetSecret() *Secret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *Volume_Source) GetCsiVolume() *Volume_Source_CSIVolume {
	if x != nil {
		return x.CsiVolume
	}
	return nil
}

type Volume_Source_DockerVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Driver of the volume, it can be flocker, convoy, raxrey etc.
	Driver *string `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	// Name of the volume.
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// Volume driver specific options.
	DriverOptions *Parameters `protobuf:"bytes,3,opt,name=driver_options,json=driverOptions" json:"driver_options,omitempty"`
}

func (x *Volume_Source_DockerVolume) Reset() {
	*x = Volume_Source_DockerVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_DockerVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_DockerVolume) ProtoMessage() {}

func (x *Volume_Source_DockerVolume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_DockerVolume.ProtoReflect.Descriptor instead.
func (*Volume_Source_DockerVolume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 0}
}

func (x *Volume_Source_DockerVolume) GetDriver() string {
	if x != nil && x.Driver != nil {
		return *x.Driver
	}
	return ""
}

func (x *Volume_Source_DockerVolume) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Volume_Source_DockerVolume) GetDriverOptions() *Parameters {
	if x != nil {
		return x.DriverOptions
	}
	return nil
}

// Absolute path pointing to a directory or file on the host.
type Volume_Source_HostPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path             *string           `protobuf:"bytes,1,req,name=path" json:"path,omitempty"`
	MountPropagation *MountPropagation `protobuf:"bytes,2,opt,name=mount_propagation,json=mountPropagation" json:"mount_propagation,omitempty"`
}

func (x *Volume_Source_HostPath) Reset() {
	*x = Volume_Source_HostPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_HostPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_HostPath) ProtoMessage() {}

func (x *Volume_Source_HostPath) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_HostPath.ProtoReflect.Descriptor instead.
func (*Volume_Source_HostPath) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 1}
}

func (x *Volume_Source_HostPath) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *Volume_Source_HostPath) GetMountPropagation() *MountPropagation {
	if x != nil {
		return x.MountPropagation
	}
	return nil
}

// Describe a path from a container's sandbox. The container can
// be the current container (SELF), or its parent container
// (PARENT). PARENT allows all child containers to share a volume
// from their parent container's sandbox. It'll be an error if
// the current container is a top level container.
type Volume_Source_SandboxPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Volume_Source_SandboxPath_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.Volume_Source_SandboxPath_Type" json:"type,omitempty"`
	// A path relative to the corresponding container's sandbox.
	// Note that upwards traversal (i.e. ../../abc) is not allowed.
	Path *string `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
}

func (x *Volume_Source_SandboxPath) Reset() {
	*x = Volume_Source_SandboxPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_SandboxPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_SandboxPath) ProtoMessage() {}

func (x *Volume_Source_SandboxPath) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_SandboxPath.ProtoReflect.Descriptor instead.
func (*Volume_Source_SandboxPath) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 2}
}

func (x *Volume_Source_SandboxPath) GetType() Volume_Source_SandboxPath_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Volume_Source_SandboxPath_UNKNOWN
}

func (x *Volume_Source_SandboxPath) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

// A volume which will be handled by the `volume/csi` isolator.
type Volume_Source_CSIVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the CSI plugin.
	PluginName         *string                                     `protobuf:"bytes,1,req,name=plugin_name,json=pluginName" json:"plugin_name,omitempty"`
	StaticProvisioning *Volume_Source_CSIVolume_StaticProvisioning `protobuf:"bytes,2,opt,name=static_provisioning,json=staticProvisioning" json:"static_provisioning,omitempty"`
}

func (x *Volume_Source_CSIVolume) Reset() {
	*x = Volume_Source_CSIVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_CSIVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_CSIVolume) ProtoMessage() {}

func (x *Volume_Source_CSIVolume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_CSIVolume.ProtoReflect.Descriptor instead.
func (*Volume_Source_CSIVolume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3}
}

func (x *Volume_Source_CSIVolume) GetPluginName() string {
	if x != nil && x.PluginName != nil {
		return *x.PluginName
	}
	return ""
}

func (x *Volume_Source_CSIVolume) GetStaticProvisioning() *Volume_Source_CSIVolume_StaticProvisioning {
	if x != nil {
		return x.StaticProvisioning
	}
	return nil
}

// Specifies a capability of a volume.
// https://github.com/container-storage-interface/spec/blob/v1.3.0/csi.proto#L379:L438
type Volume_Source_CSIVolume_VolumeCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies what API the volume will be accessed using. One of the
	// following fields MUST be specified.
	//
	// Types that are assignable to AccessType:
	//
	//	*Volume_Source_CSIVolume_VolumeCapability_Block
	//	*Volume_Source_CSIVolume_VolumeCapability_Mount
	AccessType isVolume_Source_CSIVolume_VolumeCapability_AccessType `protobuf_oneof:"access_type"`
	AccessMode *Volume_Source_CSIVolume_VolumeCapability_AccessMode  `protobuf:"bytes,3,req,name=access_mode,json=accessMode" json:"access_mode,omitempty"`
}

func (x *Volume_Source_CSIVolume_VolumeCapability) Reset() {
	*x = Volume_Source_CSIVolume_VolumeCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_CSIVolume_VolumeCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_CSIVolume_VolumeCapability) ProtoMessage() {}

func (x *Volume_Source_CSIVolume_VolumeCapability) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_CSIVolume_VolumeCapability.ProtoReflect.Descriptor instead.
func (*Volume_Source_CSIVolume_VolumeCapability) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3, 0}
}

func (m *Volume_Source_CSIVolume_VolumeCapability) GetAccessType() isVolume_Source_CSIVolume_VolumeCapability_AccessType {
	if m != nil {
		return m.AccessType
	}
	return nil
}

func (x *Volume_Source_CSIVolume_VolumeCapability) GetBlock() *Volume_Source_CSIVolume_VolumeCapability_BlockVolume {
	if x, ok := x.GetAccessType().(*Volume_Source_CSIVolume_VolumeCapability_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Volume_Source_CSIVolume_VolumeCapability) GetMount() *Volume_Source_CSIVolume_VolumeCapability_MountVolume {
	if x, ok := x.GetAccessType().(*Volume_Source_CSIVolume_VolumeCapability_Mount); ok {
		return x.Mount
	}
	return nil
}

func (x *Volume_Source_CSIVolume_VolumeCapability) GetAccessMode() *Volume_Source_CSIVolume_VolumeCapability_AccessMode {
	if x != nil {
		return x.AccessMode
	}
	return nil
}

type isVolume_Source_CSIVolume_VolumeCapability_AccessType interface {
	isVolume_Source_CSIVolume_VolumeCapability_AccessType()
}

type Volume_Source_CSIVolume_VolumeCapability_Block struct {
	Block *Volume_Source_CSIVolume_VolumeCapability_BlockVolume `protobuf:"bytes,1,opt,name=block,oneof"`
}

type Volume_Source_CSIVolume_VolumeCapability_Mount struct {
	Mount *Volume_Source_CSIVolume_VolumeCapability_MountVolume `protobuf:"bytes,2,opt,name=mount,oneof"`
}

func (*Volume_Source_CSIVolume_VolumeCapability_Block) isVolume_Source_CSIVolume_VolumeCapability_AccessType() {
}

func (*Volume_Source_CSIVolume_VolumeCapability_Mount) isVolume_Source_CSIVolume_VolumeCapability_AccessType() {
}

// Specifies the parameters used to stage/publish a pre-provisioned volume
// on an agent host. The fields are merged from `NodeStageVolumeRequest`
// and `NodePublishVolumeRequest` protobuf messages defined in CSI spec
// except two fields `staging_target_path` and `target_path` which will be
// internally determined by Mesos when staging/publishing the volume.
type Volume_Source_CSIVolume_StaticProvisioning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeId         *string                                   `protobuf:"bytes,1,req,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	VolumeCapability *Volume_Source_CSIVolume_VolumeCapability `protobuf:"bytes,2,req,name=volume_capability,json=volumeCapability" json:"volume_capability,omitempty"`
	// The secrets needed for staging/publishing the volume, e.g.:
	//
	//	{
	//	  "username": {"type": REFERENCE, "reference": {"name": "U_SECRET"}},
	//	  "password": {"type": REFERENCE, "reference": {"name": "P_SECRET"}}
	//	}
	NodeStageSecrets   map[string]*Secret `protobuf:"bytes,3,rep,name=node_stage_secrets,json=nodeStageSecrets" json:"node_stage_secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodePublishSecrets map[string]*Secret `protobuf:"bytes,4,rep,name=node_publish_secrets,json=nodePublishSecrets" json:"node_publish_secrets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	VolumeContext      map[string]string  `protobuf:"bytes,5,rep,name=volume_context,json=volumeContext" json:"volume_context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) Reset() {
	*x = Volume_Source_CSIVolume_StaticProvisioning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_CSIVolume_StaticProvisioning) ProtoMessage() {}

func (x *Volume_Source_CSIVolume_StaticProvisioning) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_CSIVolume_StaticProvisioning.ProtoReflect.Descriptor instead.
func (*Volume_Source_CSIVolume_StaticProvisioning) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3, 1}
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) GetVolumeId() string {
	if x != nil && x.VolumeId != nil {
		return *x.VolumeId
	}
	return ""
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) GetVolumeCapability() *Volume_Source_CSIVolume_VolumeCapability {
	if x != nil {
		return x.VolumeCapability
	}
	return nil
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) GetNodeStageSecrets() map[string]*Secret {
	if x != nil {
		return x.NodeStageSecrets
	}
	return nil
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) GetNodePublishSecrets() map[string]*Secret {
	if x != nil {
		return x.NodePublishSecrets
	}
	return nil
}

func (x *Volume_Source_CSIVolume_StaticProvisioning) GetVolumeContext() map[string]string {
	if x != nil {
		return x.VolumeContext
	}
	return nil
}

// Indicates that the volume will be accessed via the block device API.
type Volume_Source_CSIVolume_VolumeCapability_BlockVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Volume_Source_CSIVolume_VolumeCapability_BlockVolume) Reset() {
	*x = Volume_Source_CSIVolume_VolumeCapability_BlockVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_CSIVolume_VolumeCapability_BlockVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_CSIVolume_VolumeCapability_BlockVolume) ProtoMessage() {}

func (x *Volume_Source_CSIVolume_VolumeCapability_BlockVolume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_CSIVolume_VolumeCapability_BlockVolume.ProtoReflect.Descriptor instead.
func (*Volume_Source_CSIVolume_VolumeCapability_BlockVolume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3, 0, 0}
}

// Indicates that the volume will be accessed via the filesystem API.
type Volume_Source_CSIVolume_VolumeCapability_MountVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The filesystem type. An empty string is equal to an unspecified
	// field value.
	FsType *string `protobuf:"bytes,1,opt,name=fs_type,json=fsType" json:"fs_type,omitempty"`
	// The mount options that can be used for the volume. This field is
	// OPTIONAL. `mount_flags` MAY contain sensitive information.
	// Therefore, Mesos and the Plugin MUST NOT leak this information
	// to untrusted entities. The total size of this repeated field
	// SHALL NOT exceed 4 KiB.
	MountFlags []string `protobuf:"bytes,2,rep,name=mount_flags,json=mountFlags" json:"mount_flags,omitempty"`
}

func (x *Volume_Source_CSIVolume_VolumeCapability_MountVolume) Reset() {
	*x = Volume_Source_CSIVolume_VolumeCapability_MountVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_CSIVolume_VolumeCapability_MountVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_CSIVolume_VolumeCapability_MountVolume) ProtoMessage() {}

func (x *Volume_Source_CSIVolume_VolumeCapability_MountVolume) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_CSIVolume_VolumeCapability_MountVolume.ProtoReflect.Descriptor instead.
func (*Volume_Source_CSIVolume_VolumeCapability_MountVolume) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3, 0, 1}
}

func (x *Volume_Source_CSIVolume_VolumeCapability_MountVolume) GetFsType() string {
	if x != nil && x.FsType != nil {
		return *x.FsType
	}
	return ""
}

func (x *Volume_Source_CSIVolume_VolumeCapability_MountVolume) GetMountFlags() []string {
	if x != nil {
		return x.MountFlags
	}
	return nil
}

// Specifies how a volume can be accessed.
type Volume_Source_CSIVolume_VolumeCapability_AccessMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode *Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode `protobuf:"varint,1,req,name=mode,enum=mesos.v1.Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode" json:"mode,omitempty"`
}

func (x *Volume_Source_CSIVolume_VolumeCapability_AccessMode) Reset() {
	*x = Volume_Source_CSIVolume_VolumeCapability_AccessMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume_Source_CSIVolume_VolumeCapability_AccessMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume_Source_CSIVolume_VolumeCapability_AccessMode) ProtoMessage() {}

func (x *Volume_Source_CSIVolume_VolumeCapability_AccessMode) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume_Source_CSIVolume_VolumeCapability_AccessMode.ProtoReflect.Descriptor instead.
func (*Volume_Source_CSIVolume_VolumeCapability_AccessMode) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{65, 0, 3, 0, 2}
}

func (x *Volume_Source_CSIVolume_VolumeCapability_AccessMode) GetMode() Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode {
	if x != nil && x.Mode != nil {
		return *x.Mode
	}
	return Volume_Source_CSIVolume_VolumeCapability_AccessMode_UNKNOWN
}

// Specifies a request for an IP address, or reports the assigned container
// IP address.
//
// Users can request an automatically assigned IP (for example, via an
// IPAM service) or a specific IP by adding a NetworkInfo to the
// ContainerInfo for a task.  On a request, specifying neither `protocol`
// nor `ip_address` means that any available address may be assigned.
type NetworkInfo_IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify IP address requirement. Set protocol to the desired value to
	// request the network isolator on the Agent to assign an IP address to the
	// container being launched. If a specific IP address is specified in
	// ip_address, this field should not be set.
	Protocol *NetworkInfo_Protocol `protobuf:"varint,1,opt,name=protocol,enum=mesos.v1.NetworkInfo_Protocol,def=1" json:"protocol,omitempty"`
	// Statically assigned IP provided by the Framework. This IP will be
	// assigned to the container by the network isolator module on the Agent.
	// This field should not be used with the protocol field above.
	//
	// If an explicit address is requested but is unavailable, the network
	// isolator should fail the task.
	IpAddress *string `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress" json:"ip_address,omitempty"`
}

// Default values for NetworkInfo_IPAddress fields.
const (
	Default_NetworkInfo_IPAddress_Protocol = NetworkInfo_IPv4
)

func (x *NetworkInfo_IPAddress) Reset() {
	*x = NetworkInfo_IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo_IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo_IPAddress) ProtoMessage() {}

func (x *NetworkInfo_IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo_IPAddress.ProtoReflect.Descriptor instead.
func (*NetworkInfo_IPAddress) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{66, 0}
}

func (x *NetworkInfo_IPAddress) GetProtocol() NetworkInfo_Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Default_NetworkInfo_IPAddress_Protocol
}

func (x *NetworkInfo_IPAddress) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

// Specifies a port mapping request for the task on this network.
type NetworkInfo_PortMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPort      *uint32 `protobuf:"varint,1,req,name=host_port,json=hostPort" json:"host_port,omitempty"`
	ContainerPort *uint32 `protobuf:"varint,2,req,name=container_port,json=containerPort" json:"container_port,omitempty"`
	// Protocol to expose as (ie: tcp, udp).
	Protocol *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *NetworkInfo_PortMapping) Reset() {
	*x = NetworkInfo_PortMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInfo_PortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInfo_PortMapping) ProtoMessage() {}

func (x *NetworkInfo_PortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInfo_PortMapping.ProtoReflect.Descriptor instead.
func (*NetworkInfo_PortMapping) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{66, 1}
}

func (x *NetworkInfo_PortMapping) GetHostPort() uint32 {
	if x != nil && x.HostPort != nil {
		return *x.HostPort
	}
	return 0
}

func (x *NetworkInfo_PortMapping) GetContainerPort() uint32 {
	if x != nil && x.ContainerPort != nil {
		return *x.ContainerPort
	}
	return 0
}

func (x *NetworkInfo_PortMapping) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

type RLimitInfo_RLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *RLimitInfo_RLimit_Type `protobuf:"varint,1,opt,name=type,enum=mesos.v1.RLimitInfo_RLimit_Type" json:"type,omitempty"`
	// Either both are set or both are not set.
	// If both are not set, it represents unlimited.
	// If both are set, we require `soft` <= `hard`.
	Hard *uint64 `protobuf:"varint,2,opt,name=hard" json:"hard,omitempty"`
	Soft *uint64 `protobuf:"varint,3,opt,name=soft" json:"soft,omitempty"`
}

func (x *RLimitInfo_RLimit) Reset() {
	*x = RLimitInfo_RLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RLimitInfo_RLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RLimitInfo_RLimit) ProtoMessage() {}

func (x *RLimitInfo_RLimit) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RLimitInfo_RLimit.ProtoReflect.Descriptor instead.
func (*RLimitInfo_RLimit) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{70, 0}
}

func (x *RLimitInfo_RLimit) GetType() RLimitInfo_RLimit_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RLimitInfo_RLimit_UNKNOWN
}

func (x *RLimitInfo_RLimit) GetHard() uint64 {
	if x != nil && x.Hard != nil {
		return *x.Hard
	}
	return 0
}

func (x *RLimitInfo_RLimit) GetSoft() uint64 {
	if x != nil && x.Soft != nil {
		return *x.Soft
	}
	return 0
}

type TTYInfo_WindowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows    *uint32 `protobuf:"varint,1,req,name=rows" json:"rows,omitempty"`
	Columns *uint32 `protobuf:"varint,2,req,name=columns" json:"columns,omitempty"`
}

func (x *TTYInfo_WindowSize) Reset() {
	*x = TTYInfo_WindowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TTYInfo_WindowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TTYInfo_WindowSize) ProtoMessage() {}

func (x *TTYInfo_WindowSize) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TTYInfo_WindowSize.ProtoReflect.Descriptor instead.
func (*TTYInfo_WindowSize) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{71, 0}
}

func (x *TTYInfo_WindowSize) GetRows() uint32 {
	if x != nil && x.Rows != nil {
		return *x.Rows
	}
	return 0
}

func (x *TTYInfo_WindowSize) GetColumns() uint32 {
	if x != nil && x.Columns != nil {
		return *x.Columns
	}
	return 0
}

type ContainerInfo_DockerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The docker image that is going to be passed to the registry.
	Image        *string                                 `protobuf:"bytes,1,req,name=image" json:"image,omitempty"`
	Network      *ContainerInfo_DockerInfo_Network       `protobuf:"varint,2,opt,name=network,enum=mesos.v1.ContainerInfo_DockerInfo_Network,def=1" json:"network,omitempty"`
	PortMappings []*ContainerInfo_DockerInfo_PortMapping `protobuf:"bytes,3,rep,name=port_mappings,json=portMappings" json:"port_mappings,omitempty"`
	Privileged   *bool                                   `protobuf:"varint,4,opt,name=privileged,def=0" json:"privileged,omitempty"`
	// Allowing arbitrary parameters to be passed to docker CLI.
	// Note that anything passed to this field is not guaranteed
	// to be supported moving forward, as we might move away from
	// the docker CLI.
	Parameters []*Parameter `protobuf:"bytes,5,rep,name=parameters" json:"parameters,omitempty"`
	// With this flag set to true, the docker containerizer will
	// pull the docker image from the registry even if the image
	// is already downloaded on the agent.
	ForcePullImage *bool `protobuf:"varint,6,opt,name=force_pull_image,json=forcePullImage" json:"force_pull_image,omitempty"`
	// The name of volume driver plugin.
	//
	// Deprecated: Marked as deprecated in mesos.proto.
	VolumeDriver *string `protobuf:"bytes,7,opt,name=volume_driver,json=volumeDriver" json:"volume_driver,omitempty"` // Since 1.0
}

// Default values for ContainerInfo_DockerInfo fields.
const (
	Default_ContainerInfo_DockerInfo_Network    = ContainerInfo_DockerInfo_HOST
	Default_ContainerInfo_DockerInfo_Privileged = bool(false)
)

func (x *ContainerInfo_DockerInfo) Reset() {
	*x = ContainerInfo_DockerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_DockerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_DockerInfo) ProtoMessage() {}

func (x *ContainerInfo_DockerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_DockerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo_DockerInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{72, 0}
}

func (x *ContainerInfo_DockerInfo) GetImage() string {
	if x != nil && x.Image != nil {
		return *x.Image
	}
	return ""
}

func (x *ContainerInfo_DockerInfo) GetNetwork() ContainerInfo_DockerInfo_Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return Default_ContainerInfo_DockerInfo_Network
}

func (x *ContainerInfo_DockerInfo) GetPortMappings() []*ContainerInfo_DockerInfo_PortMapping {
	if x != nil {
		return x.PortMappings
	}
	return nil
}

func (x *ContainerInfo_DockerInfo) GetPrivileged() bool {
	if x != nil && x.Privileged != nil {
		return *x.Privileged
	}
	return Default_ContainerInfo_DockerInfo_Privileged
}

func (x *ContainerInfo_DockerInfo) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ContainerInfo_DockerInfo) GetForcePullImage() bool {
	if x != nil && x.ForcePullImage != nil {
		return *x.ForcePullImage
	}
	return false
}

// Deprecated: Marked as deprecated in mesos.proto.
func (x *ContainerInfo_DockerInfo) GetVolumeDriver() string {
	if x != nil && x.VolumeDriver != nil {
		return *x.VolumeDriver
	}
	return ""
}

type ContainerInfo_MesosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *Image `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (x *ContainerInfo_MesosInfo) Reset() {
	*x = ContainerInfo_MesosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_MesosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_MesosInfo) ProtoMessage() {}

func (x *ContainerInfo_MesosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_MesosInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo_MesosInfo) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{72, 1}
}

func (x *ContainerInfo_MesosInfo) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type ContainerInfo_DockerInfo_PortMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPort      *uint32 `protobuf:"varint,1,req,name=host_port,json=hostPort" json:"host_port,omitempty"`
	ContainerPort *uint32 `protobuf:"varint,2,req,name=container_port,json=containerPort" json:"container_port,omitempty"`
	// Protocol to expose as (ie: tcp, udp).
	Protocol *string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (x *ContainerInfo_DockerInfo_PortMapping) Reset() {
	*x = ContainerInfo_DockerInfo_PortMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerInfo_DockerInfo_PortMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo_DockerInfo_PortMapping) ProtoMessage() {}

func (x *ContainerInfo_DockerInfo_PortMapping) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo_DockerInfo_PortMapping.ProtoReflect.Descriptor instead.
func (*ContainerInfo_DockerInfo_PortMapping) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{72, 0, 0}
}

func (x *ContainerInfo_DockerInfo_PortMapping) GetHostPort() uint32 {
	if x != nil && x.HostPort != nil {
		return *x.HostPort
	}
	return 0
}

func (x *ContainerInfo_DockerInfo_PortMapping) GetContainerPort() uint32 {
	if x != nil && x.ContainerPort != nil {
		return *x.ContainerPort
	}
	return 0
}

func (x *ContainerInfo_DockerInfo_PortMapping) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

// Configuration of a blkio cgroup subsystem.
type CgroupInfo_Blkio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CgroupInfo_Blkio) Reset() {
	*x = CgroupInfo_Blkio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio) ProtoMessage() {}

func (x *CgroupInfo_Blkio) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0}
}

// Configuration of a net_cls cgroup subsystem.
type CgroupInfo_NetCls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The 32-bit classid consists of two parts, a 16 bit major handle
	// and a 16-bit minor handle. The major and minor handle are
	// represented using the format 0xAAAABBBB, where 0xAAAA is the
	// 16-bit major handle and 0xBBBB is the 16-bit minor handle.
	Classid *uint32 `protobuf:"varint,1,opt,name=classid" json:"classid,omitempty"`
}

func (x *CgroupInfo_NetCls) Reset() {
	*x = CgroupInfo_NetCls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_NetCls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_NetCls) ProtoMessage() {}

func (x *CgroupInfo_NetCls) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_NetCls.ProtoReflect.Descriptor instead.
func (*CgroupInfo_NetCls) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 1}
}

func (x *CgroupInfo_NetCls) GetClassid() uint32 {
	if x != nil && x.Classid != nil {
		return *x.Classid
	}
	return 0
}

// Describes a stat value without the device descriptor part.
type CgroupInfo_Blkio_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op    *CgroupInfo_Blkio_Operation `protobuf:"varint,1,opt,name=op,enum=mesos.v1.CgroupInfo_Blkio_Operation" json:"op,omitempty"` // Required.
	Value *uint64                     `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`                                    // Required.
}

func (x *CgroupInfo_Blkio_Value) Reset() {
	*x = CgroupInfo_Blkio_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio_Value) ProtoMessage() {}

func (x *CgroupInfo_Blkio_Value) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio_Value.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio_Value) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 0}
}

func (x *CgroupInfo_Blkio_Value) GetOp() CgroupInfo_Blkio_Operation {
	if x != nil && x.Op != nil {
		return *x.Op
	}
	return CgroupInfo_Blkio_UNKNOWN
}

func (x *CgroupInfo_Blkio_Value) GetValue() uint64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

type CgroupInfo_Blkio_CFQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CgroupInfo_Blkio_CFQ) Reset() {
	*x = CgroupInfo_Blkio_CFQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio_CFQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio_CFQ) ProtoMessage() {}

func (x *CgroupInfo_Blkio_CFQ) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio_CFQ.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio_CFQ) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 1}
}

type CgroupInfo_Blkio_Throttling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CgroupInfo_Blkio_Throttling) Reset() {
	*x = CgroupInfo_Blkio_Throttling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio_Throttling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio_Throttling) ProtoMessage() {}

func (x *CgroupInfo_Blkio_Throttling) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio_Throttling.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio_Throttling) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 2}
}

type CgroupInfo_Blkio_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cfq          []*CgroupInfo_Blkio_CFQ_Statistics        `protobuf:"bytes,1,rep,name=cfq" json:"cfq,omitempty"`
	CfqRecursive []*CgroupInfo_Blkio_CFQ_Statistics        `protobuf:"bytes,2,rep,name=cfq_recursive,json=cfqRecursive" json:"cfq_recursive,omitempty"`
	Throttling   []*CgroupInfo_Blkio_Throttling_Statistics `protobuf:"bytes,3,rep,name=throttling" json:"throttling,omitempty"`
}

func (x *CgroupInfo_Blkio_Statistics) Reset() {
	*x = CgroupInfo_Blkio_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio_Statistics) ProtoMessage() {}

func (x *CgroupInfo_Blkio_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio_Statistics.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio_Statistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 3}
}

func (x *CgroupInfo_Blkio_Statistics) GetCfq() []*CgroupInfo_Blkio_CFQ_Statistics {
	if x != nil {
		return x.Cfq
	}
	return nil
}

func (x *CgroupInfo_Blkio_Statistics) GetCfqRecursive() []*CgroupInfo_Blkio_CFQ_Statistics {
	if x != nil {
		return x.CfqRecursive
	}
	return nil
}

func (x *CgroupInfo_Blkio_Statistics) GetThrottling() []*CgroupInfo_Blkio_Throttling_Statistics {
	if x != nil {
		return x.Throttling
	}
	return nil
}

type CgroupInfo_Blkio_CFQ_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stats are grouped by block devices. If `device` is not
	// set, it represents `Total`.
	Device *Device_Number `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// blkio.sectors
	Sectors *uint64 `protobuf:"varint,2,opt,name=sectors" json:"sectors,omitempty"`
	// blkio.time
	Time *uint64 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	// blkio.io_serviced
	IoServiced []*CgroupInfo_Blkio_Value `protobuf:"bytes,4,rep,name=io_serviced,json=ioServiced" json:"io_serviced,omitempty"`
	// blkio.io_service_bytes
	IoServiceBytes []*CgroupInfo_Blkio_Value `protobuf:"bytes,5,rep,name=io_service_bytes,json=ioServiceBytes" json:"io_service_bytes,omitempty"`
	// blkio.io_service_time
	IoServiceTime []*CgroupInfo_Blkio_Value `protobuf:"bytes,6,rep,name=io_service_time,json=ioServiceTime" json:"io_service_time,omitempty"`
	// blkio.io_wait_time
	IoWaitTime []*CgroupInfo_Blkio_Value `protobuf:"bytes,7,rep,name=io_wait_time,json=ioWaitTime" json:"io_wait_time,omitempty"`
	// blkio.io_merged
	IoMerged []*CgroupInfo_Blkio_Value `protobuf:"bytes,8,rep,name=io_merged,json=ioMerged" json:"io_merged,omitempty"`
	// blkio.io_queued
	IoQueued []*CgroupInfo_Blkio_Value `protobuf:"bytes,9,rep,name=io_queued,json=ioQueued" json:"io_queued,omitempty"`
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) Reset() {
	*x = CgroupInfo_Blkio_CFQ_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio_CFQ_Statistics) ProtoMessage() {}

func (x *CgroupInfo_Blkio_CFQ_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio_CFQ_Statistics.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio_CFQ_Statistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 1, 0}
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetDevice() *Device_Number {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetSectors() uint64 {
	if x != nil && x.Sectors != nil {
		return *x.Sectors
	}
	return 0
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetIoServiced() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoServiced
	}
	return nil
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetIoServiceBytes() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoServiceBytes
	}
	return nil
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetIoServiceTime() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoServiceTime
	}
	return nil
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetIoWaitTime() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoWaitTime
	}
	return nil
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetIoMerged() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoMerged
	}
	return nil
}

func (x *CgroupInfo_Blkio_CFQ_Statistics) GetIoQueued() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoQueued
	}
	return nil
}

type CgroupInfo_Blkio_Throttling_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stats are grouped by block devices. If `device` is not
	// set, it represents `Total`.
	Device *Device_Number `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// blkio.throttle.io_serviced
	IoServiced []*CgroupInfo_Blkio_Value `protobuf:"bytes,2,rep,name=io_serviced,json=ioServiced" json:"io_serviced,omitempty"`
	// blkio.throttle.io_service_bytes
	IoServiceBytes []*CgroupInfo_Blkio_Value `protobuf:"bytes,3,rep,name=io_service_bytes,json=ioServiceBytes" json:"io_service_bytes,omitempty"`
}

func (x *CgroupInfo_Blkio_Throttling_Statistics) Reset() {
	*x = CgroupInfo_Blkio_Throttling_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CgroupInfo_Blkio_Throttling_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CgroupInfo_Blkio_Throttling_Statistics) ProtoMessage() {}

func (x *CgroupInfo_Blkio_Throttling_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CgroupInfo_Blkio_Throttling_Statistics.ProtoReflect.Descriptor instead.
func (*CgroupInfo_Blkio_Throttling_Statistics) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{74, 0, 2, 0}
}

func (x *CgroupInfo_Blkio_Throttling_Statistics) GetDevice() *Device_Number {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *CgroupInfo_Blkio_Throttling_Statistics) GetIoServiced() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoServiced
	}
	return nil
}

func (x *CgroupInfo_Blkio_Throttling_Statistics) GetIoServiceBytes() []*CgroupInfo_Blkio_Value {
	if x != nil {
		return x.IoServiceBytes
	}
	return nil
}

type Device_Number struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorNumber *uint64 `protobuf:"varint,1,req,name=major_number,json=majorNumber" json:"major_number,omitempty"`
	MinorNumber *uint64 `protobuf:"varint,2,req,name=minor_number,json=minorNumber" json:"minor_number,omitempty"`
}

func (x *Device_Number) Reset() {
	*x = Device_Number{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device_Number) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Number) ProtoMessage() {}

func (x *Device_Number) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Number.ProtoReflect.Descriptor instead.
func (*Device_Number) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{86, 0}
}

func (x *Device_Number) GetMajorNumber() uint64 {
	if x != nil && x.MajorNumber != nil {
		return *x.MajorNumber
	}
	return 0
}

func (x *Device_Number) GetMinorNumber() uint64 {
	if x != nil && x.MinorNumber != nil {
		return *x.MinorNumber
	}
	return 0
}

type DeviceAccess_Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Read  *bool `protobuf:"varint,1,opt,name=read" json:"read,omitempty"`
	Write *bool `protobuf:"varint,2,opt,name=write" json:"write,omitempty"`
	Mknod *bool `protobuf:"varint,3,opt,name=mknod" json:"mknod,omitempty"`
}

func (x *DeviceAccess_Access) Reset() {
	*x = DeviceAccess_Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mesos_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAccess_Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAccess_Access) ProtoMessage() {}

func (x *DeviceAccess_Access) ProtoReflect() protoreflect.Message {
	mi := &file_mesos_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAccess_Access.ProtoReflect.Descriptor instead.
func (*DeviceAccess_Access) Descriptor() ([]byte, []int) {
	return file_mesos_proto_rawDescGZIP(), []int{87, 0}
}

func (x *DeviceAccess_Access) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

func (x *DeviceAccess_Access) GetWrite() bool {
	if x != nil && x.Write != nil {
		return *x.Write
	}
	return false
}

func (x *DeviceAccess_Access) GetMknod() bool {
	if x != nil && x.Mknod != nil {
		return *x.Mknod
	}
	return false
}

var File_mesos_proto protoreflect.FileDescriptor

var file_mesos_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x22, 0x23, 0x0a, 0x0b, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a, 0x07,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x0a,
	0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e,
	0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22,
	0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x52, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x61, 0x6e, 0x6f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x0e, 0x55, 0x6e,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x09, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x75, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x26, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52,
	0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x22, 0xe5, 0x06, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30,
	0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x25, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x01, 0x2a, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x75, 0x69, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x65, 0x62, 0x75, 0x69, 0x55, 0x72, 0x6c,
	0x12, 0x46, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x8c, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc0,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x56, 0x4f, 0x43, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x5f, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x53, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52,
	0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x57, 0x41, 0x52, 0x45, 0x10,
	0x08, 0x1a, 0x57, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a, 0x04, 0x0a, 0x09, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x29, 0x0a, 0x03, 0x74,
	0x63, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x63,
	0x70, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x31,
	0x35, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x3a, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x2e, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x19, 0x0a, 0x03, 0x54, 0x63, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x41,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x03, 0x22, 0x99, 0x06, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02,
	0x31, 0x35, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x0f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2b, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x02, 0x32, 0x30, 0x52, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x33, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x02, 0x31, 0x30, 0x52, 0x12, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x12, 0x34, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x54, 0x43, 0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x74, 0x63, 0x70, 0x1a, 0xad, 0x01, 0x0a, 0x0d, 0x48, 0x54, 0x54,
	0x50, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x04, 0x49, 0x50,
	0x76, 0x34, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0x64, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x04, 0x49, 0x50, 0x76, 0x34,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x33,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43,
	0x50, 0x10, 0x03, 0x22, 0x47, 0x0a, 0x0a, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x39, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xee, 0x02, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04,
	0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x55, 0x52, 0x49, 0x52, 0x04, 0x75, 0x72, 0x69, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x65,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x92, 0x01, 0x0a, 0x03, 0x55, 0x52, 0x49,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xe9, 0x04,
	0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x44, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x15, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x2c, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x22, 0xa7, 0x02, 0x0a, 0x0a, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0c, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x52, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0xd3, 0x01,
	0x0a, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x43, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x1a, 0x20, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xc0, 0x03, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0d,
	0x3a, 0x04, 0x35, 0x30, 0x35, 0x30, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x43, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x52,
	0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x5f, 0x56, 0x32, 0x10, 0x03, 0x22, 0x90, 0x04, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x04,
	0x35, 0x30, 0x35, 0x31, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x1a, 0x94, 0x02, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x45, 0x52,
	0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0x08, 0x22, 0xba, 0x02, 0x0a, 0x16, 0x43, 0x53,
	0x49, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x53, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x11, 0x43, 0x53, 0x49, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x63,
	0x73, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x53, 0x49, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0a, 0x63, 0x73, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x43, 0x53, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x53, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x53, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55,
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x82, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x53, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x12, 0x46, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xd6, 0x03, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x12, 0x2e, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53,
	0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x1a, 0x1e, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x2f, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x1a, 0x35, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x19, 0x0a, 0x03, 0x53, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x1a, 0x1c, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x43,
	0x41, 0x4c, 0x41, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x03, 0x22, 0xfa, 0x01, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x53, 0x65, 0x74, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xf2, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x06,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x03,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x03,
	0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x3a, 0x01, 0x2a, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x1a, 0x24, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0xd8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x10,
	0x02, 0x1a, 0xa4, 0x05, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0x3b, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x1a, 0xa9, 0x03, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x1a, 0x1a, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x1a, 0x1b, 0x0a,
	0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x3c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x04, 0x1a, 0x0f, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0c, 0x0a, 0x0a, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8e, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x71, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x71, 0x6c, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65,
	0x62, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x62,
	0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x74, 0x65, 0x70, 0x70, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x61, 0x74, 0x65, 0x70, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x22, 0x84, 0x05, 0x0a, 0x0c, 0x49, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x54, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49,
	0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x48,
	0x64, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x49, 0x6e, 0x48, 0x64, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x49, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x44, 0x69, 0x73, 0x63, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x4e, 0x6f, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x65, 0x61,
	0x73, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61,
	0x73, 0x6d, 0x52, 0x65, 0x71, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52,
	0x65, 0x61, 0x73, 0x6d, 0x52, 0x65, 0x71, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x61,
	0x73, 0x6d, 0x4f, 0x4b, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x61,
	0x73, 0x6d, 0x4f, 0x4b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x61, 0x73, 0x6d, 0x46, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x52, 0x65, 0x61, 0x73, 0x6d,
	0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x61, 0x67, 0x4f, 0x4b, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x72, 0x61, 0x67, 0x4f, 0x4b, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x46, 0x72, 0x61, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x72, 0x61, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x46, 0x72, 0x61, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x22,
	0xbe, 0x07, 0x0a, 0x0e, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e,
	0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e,
	0x44, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x49, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x78, 0x63, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x50, 0x61, 0x72, 0x6d, 0x50, 0x72,
	0x6f, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x6e, 0x50, 0x61, 0x72,
	0x6d, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x53, 0x72, 0x63, 0x51,
	0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e,
	0x53, 0x72, 0x63, 0x51, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x49, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x6e, 0x45, 0x63, 0x68, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49,
	0x6e, 0x45, 0x63, 0x68, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x45, 0x63, 0x68, 0x6f,
	0x52, 0x65, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x45, 0x63,
	0x68, 0x6f, 0x52, 0x65, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x49, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x41, 0x64, 0x64, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x49, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x4f, 0x75, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4f, 0x75, 0x74,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x4f, 0x75, 0x74, 0x44, 0x65, 0x73, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45,
	0x78, 0x63, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x6d, 0x50,
	0x72, 0x6f, 0x62, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x50,
	0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x53,
	0x72, 0x63, 0x51, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x4f, 0x75, 0x74, 0x53, 0x72, 0x63, 0x51, 0x75, 0x65, 0x6e, 0x63, 0x68, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x70, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x70, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65,
	0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x4d, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x4f, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70, 0x73,
	0x22, 0xd1, 0x03, 0x0a, 0x0d, 0x54, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x74, 0x6f, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x74, 0x6f, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x74, 0x6f, 0x4d, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x52, 0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x52, 0x74, 0x6f, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x4f, 0x70, 0x65, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x73,
	0x74, 0x61, 0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x45, 0x73, 0x74, 0x61, 0x62, 0x52, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x75, 0x72, 0x72, 0x45, 0x73, 0x74, 0x61, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x43, 0x75, 0x72, 0x72, 0x45, 0x73, 0x74, 0x61, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e,
	0x53, 0x65, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x49, 0x6e, 0x53, 0x65,
	0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x53, 0x65, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x53, 0x65, 0x67, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x49, 0x6e, 0x45, 0x72, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x52, 0x73, 0x74,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x52, 0x73, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0d, 0x55, 0x64, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x6f, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4f, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x63, 0x76, 0x62, 0x75, 0x66, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x63, 0x76, 0x62, 0x75, 0x66,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6e, 0x64, 0x62, 0x75, 0x66,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x6e,
	0x64, 0x62, 0x75, 0x66, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x49, 0x6e, 0x43, 0x73, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x22, 0xe8, 0x01, 0x0a, 0x0e, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x63, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x74,
	0x63, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x64, 0x70, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x64, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x08, 0x75, 0x64, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x0e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xe5, 0x1c, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x63, 0x70, 0x75, 0x73, 0x55, 0x73, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x70, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x70, 0x75, 0x73,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x63, 0x70, 0x75, 0x73, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x6e, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x73, 0x4e, 0x72, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x6e, 0x72,
	0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x70, 0x75, 0x73, 0x4e, 0x72, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x70, 0x75, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65,
	0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x6d, 0x73, 0x77, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x73, 0x77,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x5f, 0x6b, 0x6d, 0x65,
	0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x34, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x4b, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x5f, 0x6b, 0x6d,
	0x65, 0x6d, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x65, 0x6d, 0x4b, 0x6d, 0x65,
	0x6d, 0x54, 0x63, 0x70, 0x55, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x53, 0x6f, 0x66, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6e, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x6e, 0x6f, 0x6e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x65,
	0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d,
	0x65, 0x6d, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x52, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x6d, 0x65, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x53,
	0x77, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x5f,
	0x75, 0x6e, 0x65, 0x76, 0x69, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x65, 0x6d, 0x55, 0x6e, 0x65, 0x76,
	0x69, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x6d, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6d, 0x65, 0x6d, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x4d,
	0x65, 0x64, 0x69, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6d, 0x65, 0x6d,
	0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b,
	0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x10,
	0x62, 0x6c, 0x6b, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b,
	0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x62,
	0x6c, 0x6b, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2c,
	0x0a, 0x04, 0x70, 0x65, 0x72, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x04, 0x70, 0x65, 0x72, 0x66, 0x12, 0x24, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x52, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f,
	0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x54, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x54,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e,
	0x65, 0x74, 0x54, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65,
	0x74, 0x5f, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x54, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x74,
	0x54, 0x78, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x6e,
	0x65, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x65,
	0x74, 0x54, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x29, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65,
	0x74, 0x54, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x11,
	0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x5f, 0x72,
	0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x42,
	0x75, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x5b, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x45, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x5f, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x45, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x19,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x65, 0x63, 0x73, 0x5f, 0x70, 0x35, 0x30, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x15, 0x6e, 0x65, 0x74, 0x54, 0x63, 0x70, 0x52, 0x74, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x73, 0x50, 0x35, 0x30, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x73, 0x5f,
	0x70, 0x39, 0x30, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x54, 0x63,
	0x70, 0x52, 0x74, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x73, 0x50, 0x39, 0x30,
	0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x74, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x73, 0x5f, 0x70, 0x39, 0x35, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x54, 0x63, 0x70, 0x52, 0x74, 0x74, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x73, 0x50, 0x39, 0x35, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65,
	0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x65, 0x63, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6e,
	0x65, 0x74, 0x54, 0x63, 0x70, 0x52, 0x74, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63,
	0x73, 0x50, 0x39, 0x39, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6e, 0x65, 0x74, 0x54, 0x63, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x40, 0x0a, 0x1d, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6e, 0x65, 0x74, 0x54, 0x63, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x57, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x1e, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x1b, 0x6e, 0x65, 0x74, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x13,
	0x6e, 0x65, 0x74, 0x5f, 0x73, 0x6e, 0x6d, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4e, 0x4d, 0x50, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x53, 0x6e, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0xc1, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x35, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70, 0x35, 0x30,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x70,
	0x39, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x70, 0x39, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x39, 0x39, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x70, 0x39, 0x39, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x39, 0x39, 0x39, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x39, 0x39, 0x39, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x39,
	0x39, 0x39, 0x39, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x39, 0x39, 0x39, 0x39,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x1a, 0xf2, 0x05, 0x0a, 0x0e, 0x52,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x45, 0x0a,
	0x07, 0x72, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x72, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x72, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x78, 0x5f, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0a, 0x72, 0x78,
	0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x72,
	0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x74, 0x78, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0c, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0a, 0x74, 0x78, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x78, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x0b, 0x74, 0x78, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x22,
	0xc5, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0xc9, 0x03, 0x0a, 0x08,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3b, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x98, 0x01, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xdc, 0x10, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x66,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x79, 0x63,
	0x6c, 0x65, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x75, 0x73, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x70, 0x75, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6f,
	0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x70, 0x75,
	0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x65, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x31, 0x5f, 0x64, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x6c, 0x31, 0x44, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x6c, 0x31, 0x5f, 0x64, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c,
	0x31, 0x44, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x31, 0x5f, 0x64, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x31, 0x44,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x6c,
	0x31, 0x5f, 0x64, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x31, 0x44,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6c, 0x31, 0x5f, 0x64, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x6c, 0x31, 0x44, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x31, 0x5f, 0x64, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x31, 0x44, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6c, 0x31, 0x5f, 0x69, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x31, 0x49, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x31, 0x5f, 0x69, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x31, 0x49, 0x63, 0x61, 0x63, 0x68, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x31, 0x5f, 0x69,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6c, 0x31, 0x49, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x31,
	0x5f, 0x69, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c,
	0x31, 0x49, 0x63, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6c, 0x63, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x6c, 0x63, 0x4c, 0x6f, 0x61,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6c, 0x63, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x6c, 0x63,
	0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6c,
	0x63, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x6c, 0x6c, 0x63, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6c, 0x63,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6c, 0x63, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6c, 0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x6c, 0x63,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6c,
	0x63, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x6c, 0x63, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x74,
	0x6c, 0x62, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x64, 0x74, 0x6c, 0x62, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x74, 0x6c,
	0x62, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x74, 0x6c, 0x62, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x74, 0x6c, 0x62, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x74, 0x6c, 0x62, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x74, 0x6c, 0x62, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x64, 0x74, 0x6c, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x74, 0x6c, 0x62, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x74, 0x6c, 0x62, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x74, 0x6c,
	0x62, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x64, 0x74, 0x6c, 0x62, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x74, 0x6c, 0x62, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x69, 0x74, 0x6c, 0x62, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x74,
	0x6c, 0x62, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x69, 0x74, 0x6c, 0x62, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x74, 0x63, 0x68,
	0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x4d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x1a, 0xc6, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x17,
	0x4d, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x69, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xf6, 0x12,
	0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44,
	0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x4a, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xc8, 0x0e, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x48,
	0x0a, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x09, 0x75,
	0x6e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12,
	0x45, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x72, 0x6f, 0x77, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x77,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0d, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x44, 0x69, 0x73, 0x6b, 0x1a, 0x3b, 0x0a, 0x06, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x31,
	0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x1a, 0x79, 0x0a, 0x0b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x67, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x09, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x1a, 0x36, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x07,
	0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x77, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x6e, 0x0a, 0x0c, 0x53, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0xa9, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2a,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x55, 0x4e,
	0x43, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0b,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48, 0x52, 0x49, 0x4e, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x4b, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x5f,
	0x44, 0x49, 0x53, 0x4b, 0x10, 0x0e, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x52, 0x4c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0e, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xa9, 0x06, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x1a, 0x51, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x8a,
	0x07, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x44, 0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0b, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x16, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x44,
	0x52, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xfc, 0x02, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd7, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x2f, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x63, 0x70, 0x52, 0x03, 0x74, 0x63, 0x70, 0x1a, 0x26, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x1a, 0x27, 0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x23, 0x0a, 0x03, 0x54, 0x63, 0x70,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xa8,
	0x0f, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x3c, 0x0a, 0x0c,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x10, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x22,
	0x87, 0x09, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x58, 0x45,
	0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x13, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x14, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x45, 0x45, 0x4d, 0x50, 0x54, 0x45, 0x44, 0x10,
	0x11, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x16, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x21, 0x12, 0x28, 0x0a,
	0x24, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x17, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x52, 0x45, 0x47,
	0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x18, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x47, 0x43,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x57, 0x4f, 0x52, 0x4b, 0x49, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x53, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4f,
	0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x49,
	0x54, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09,
	0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x12, 0x12, 0x1d,
	0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x52,
	0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44,
	0x10, 0x0b, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0d, 0x12, 0x24, 0x0a,
	0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43,
	0x48, 0x10, 0x1e, 0x12, 0x24, 0x0a, 0x20, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x1c, 0x12, 0x2b, 0x0a, 0x27, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x1d, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x1a, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x0f,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x10, 0x22, 0x33, 0x0a, 0x07, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x35, 0x52,
	0x0d, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x98,
	0x02, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x1a, 0xca, 0x01, 0x0a,
	0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x2a, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3f,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22,
	0x42, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x22, 0x45, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x06, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x31, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x1a, 0x1b, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x71, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x63,
	0x69, 0x70, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x22, 0xab, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x71, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x70, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xa0,
	0x03, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x61, 0x70, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x2e, 0x41, 0x70, 0x70, 0x63, 0x52, 0x04, 0x61, 0x70, 0x70, 0x63, 0x12, 0x2e, 0x0a, 0x06,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x72, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x06,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x1a, 0x54, 0x0a, 0x04, 0x41, 0x70,
	0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x1a, 0x80, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x50, 0x50, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x02, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x3d, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xd2, 0x14, 0x0a, 0x06, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xe8, 0x12, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0b,
	0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x63, 0x73, 0x69, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x09, 0x63, 0x73,
	0x69, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x1a, 0x77, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x67, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x47, 0x0a, 0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8a, 0x01, 0x0a, 0x0b, 0x53, 0x61,
	0x6e, 0x64, 0x62, 0x6f, 0x78, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x29, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x99, 0x0c, 0x0a, 0x09, 0x43, 0x53, 0x49, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x49, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0x92, 0x05, 0x0a,
	0x10, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x56, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x56, 0x0a, 0x05, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5e, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x1a, 0x0d, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x1a, 0x47, 0x0a, 0x0b, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x66, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x1a, 0x86, 0x02, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x9f, 0x01, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52,
	0x10, 0x05, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xee, 0x05, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x78, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x49, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x7e, 0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6e, 0x6f,
	0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x12, 0x6e, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x43, 0x53, 0x49, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x1a, 0x55, 0x0a, 0x15, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x17, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x63, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x43, 0x4b, 0x45,
	0x52, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x4e,
	0x44, 0x42, 0x4f, 0x58, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x53, 0x49, 0x5f, 0x56,
	0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x05, 0x22, 0x16, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x52, 0x57, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x52, 0x4f, 0x10, 0x02, 0x22,
	0xec, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x42, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x6c, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x3a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x6d, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x1e,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50,
	0x76, 0x34, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x10, 0x02, 0x22, 0x90,
	0x06, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xb4, 0x05, 0x0a, 0x0a, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x48, 0x4f, 0x57, 0x4e, 0x10,
	0xe8, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x41, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49,
	0x44, 0x45, 0x10, 0xe9, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0xea, 0x07, 0x12, 0x0b, 0x0a, 0x06, 0x46,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0xeb, 0x07, 0x12, 0x0b, 0x0a, 0x06, 0x46, 0x53, 0x45, 0x54,
	0x49, 0x44, 0x10, 0xec, 0x07, 0x12, 0x09, 0x0a, 0x04, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0xed, 0x07,
	0x12, 0x0b, 0x0a, 0x06, 0x53, 0x45, 0x54, 0x47, 0x49, 0x44, 0x10, 0xee, 0x07, 0x12, 0x0b, 0x0a,
	0x06, 0x53, 0x45, 0x54, 0x55, 0x49, 0x44, 0x10, 0xef, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x45,
	0x54, 0x50, 0x43, 0x41, 0x50, 0x10, 0xf0, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x55,
	0x58, 0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf1, 0x07, 0x12, 0x15,
	0x0a, 0x10, 0x4e, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0xf2, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x5f, 0x42, 0x52, 0x4f,
	0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0xf3, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x4e, 0x45, 0x54,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xf4, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x45, 0x54,
	0x5f, 0x52, 0x41, 0x57, 0x10, 0xf5, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x50, 0x43, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0xf6, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x49, 0x50, 0x43, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x10, 0xf7, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x10, 0xf8, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x59, 0x53, 0x5f, 0x52,
	0x41, 0x57, 0x49, 0x4f, 0x10, 0xf9, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f, 0x43,
	0x48, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0xfa, 0x07, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x59, 0x53, 0x5f,
	0x50, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0xfb, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x59, 0x53,
	0x5f, 0x50, 0x41, 0x43, 0x43, 0x54, 0x10, 0xfc, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x59, 0x53,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0xfd, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x59, 0x53,
	0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0xfe, 0x07, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x5f,
	0x4e, 0x49, 0x43, 0x45, 0x10, 0xff, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x80, 0x08, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x59,
	0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x81, 0x08, 0x12, 0x13, 0x0a, 0x0e, 0x53, 0x59, 0x53,
	0x5f, 0x54, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x82, 0x08, 0x12, 0x0a,
	0x0a, 0x05, 0x4d, 0x4b, 0x4e, 0x4f, 0x44, 0x10, 0x83, 0x08, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x10, 0x84, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x85, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x55, 0x44, 0x49,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x86, 0x08, 0x12, 0x0c, 0x0a, 0x07,
	0x53, 0x45, 0x54, 0x46, 0x43, 0x41, 0x50, 0x10, 0x87, 0x08, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x41,
	0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x88, 0x08, 0x12, 0x0e, 0x0a,
	0x09, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x89, 0x08, 0x12, 0x0b, 0x0a,
	0x06, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x8a, 0x08, 0x12, 0x0f, 0x0a, 0x0a, 0x57, 0x41,
	0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x8b, 0x08, 0x12, 0x12, 0x0a, 0x0d, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x8c, 0x08, 0x12,
	0x0f, 0x0a, 0x0a, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x8d, 0x08,
	0x12, 0x0c, 0x0a, 0x07, 0x50, 0x45, 0x52, 0x46, 0x4d, 0x4f, 0x4e, 0x10, 0x8e, 0x08, 0x12, 0x08,
	0x0a, 0x03, 0x42, 0x50, 0x46, 0x10, 0x8f, 0x08, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x90,
	0x08, 0x22, 0x50, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x22, 0x88, 0x04, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x15, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x14, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x69, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x63,
	0x6f, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x63, 0x6f, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x08, 0x69, 0x70, 0x63,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x49, 0x70, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x69, 0x70, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x68, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x35, 0x0a, 0x07, 0x49, 0x70, 0x63, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x22, 0xc5,
	0x03, 0x0a, 0x0a, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x07, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x72, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x1a, 0xff, 0x02, 0x0a, 0x06, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x68, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x66,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x22, 0x96, 0x02,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x41, 0x53, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x46, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x07, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x4d, 0x53, 0x47, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10,
	0x08, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x10, 0x09,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x4e, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x10,
	0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x52, 0x53, 0x53, 0x10, 0x0c, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x50, 0x52, 0x49, 0x4f, 0x10, 0x0d,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x52, 0x54, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x53, 0x49, 0x47, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4c, 0x4d, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x43, 0x4b, 0x10, 0x10, 0x22, 0x84, 0x01, 0x0a, 0x07, 0x54, 0x54, 0x59, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x54, 0x59, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a,
	0x65, 0x1a, 0x3a, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xbf, 0x08,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x05, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x12, 0x3a,
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35,
	0x0a, 0x0b, 0x72, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x74, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x54, 0x59, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x74, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x96, 0x04, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x3a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x1a, 0x6d, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x33, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x32, 0x0a, 0x09,
	0x4d, 0x65, 0x73, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x22, 0x1d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x45, 0x53, 0x4f, 0x53, 0x10, 0x02, 0x22,
	0xe1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72,
	0x50, 0x69, 0x64, 0x22, 0xfe, 0x09, 0x0a, 0x0a, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x34, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x43, 0x6c, 0x73,
	0x52, 0x06, 0x6e, 0x65, 0x74, 0x43, 0x6c, 0x73, 0x1a, 0x95, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6b,
	0x69, 0x6f, 0x1a, 0x53, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c,
	0x6b, 0x69, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x8e, 0x04, 0x0a, 0x03, 0x43, 0x46, 0x51, 0x1a,
	0x86, 0x04, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64,
	0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0f,
	0x69, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x6f, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6f,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x69, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6f, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x69, 0x6f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x1a, 0xdb, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0xcc, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6f,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0xeb, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x03, 0x63, 0x66, 0x71, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x43,
	0x46, 0x51, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x03, 0x63,
	0x66, 0x71, 0x12, 0x4e, 0x0a, 0x0d, 0x63, 0x66, 0x71, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x42, 0x6c, 0x6b, 0x69, 0x6f, 0x2e, 0x43, 0x46, 0x51, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x63, 0x66, 0x71, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x6c, 0x6b,
	0x69, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x06,
	0x1a, 0x22, 0x0a, 0x06, 0x4e, 0x65, 0x74, 0x43, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x27,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x2f, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x2d, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xc8, 0x02, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x28, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10,
	0x02, 0x22, 0x38, 0x0a, 0x0a, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x0b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x53, 0x68, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x69, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x69, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69,
	0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74,
	0x54, 0x61, 0x67, 0x22, 0x30, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x44, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x4e, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x48, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6b,
	0x6e, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x6b, 0x6e, 0x6f, 0x64,
	0x22, 0x52, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x73, 0x0a, 0x0b, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x67, 0x6f,
	0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x08, 0x6d, 0x61, 0x72, 0x6b, 0x47, 0x6f, 0x6e, 0x65, 0x22, 0x66, 0x0a, 0x09, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2a, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x55,
	0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x52, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x52, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0x8c, 0x02, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x4f, 0x4e, 0x45, 0x10,
	0x0b, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x47, 0x4f, 0x4e, 0x45, 0x5f, 0x42,
	0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0d, 0x2a, 0x88,
	0x02, 0x0a, 0x0e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41,
	0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x4e, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x2a, 0x34, 0x0a, 0x0a, 0x44, 0x72, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x42,
	0x49, 0x0a, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x06, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x56, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x2d, 0x55, 0x47, 0x2f, 0x6d, 0x65, 0x73, 0x6f, 0x73, 0x2d, 0x6d, 0x33, 0x73, 0x2f,
	0x6d, 0x65, 0x73, 0x6f, 0x73, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_mesos_proto_rawDescOnce sync.Once
	file_mesos_proto_rawDescData = file_mesos_proto_rawDesc
)

func file_mesos_proto_rawDescGZIP() []byte {
	file_mesos_proto_rawDescOnce.Do(func() {
		file_mesos_proto_rawDescData = protoimpl.X.CompressGZIP(file_mesos_proto_rawDescData)
	})
	return file_mesos_proto_rawDescData
}

var file_mesos_proto_enumTypes = make([]protoimpl.EnumInfo, 34)
var file_mesos_proto_msgTypes = make([]protoimpl.MessageInfo, 177)
var file_mesos_proto_goTypes = []interface{}{
	(Status)(0),                         // 0: mesos.v1.Status
	(TaskState)(0),                      // 1: mesos.v1.TaskState
	(OperationState)(0),                 // 2: mesos.v1.OperationState
	(DrainState)(0),                     // 3: mesos.v1.DrainState
	(MachineInfo_Mode)(0),               // 4: mesos.v1.MachineInfo.Mode
	(FrameworkInfo_Capability_Type)(0),  // 5: mesos.v1.FrameworkInfo.Capability.Type
	(CheckInfo_Type)(0),                 // 6: mesos.v1.CheckInfo.Type
	(HealthCheck_Type)(0),               // 7: mesos.v1.HealthCheck.Type
	(ExecutorInfo_Type)(0),              // 8: mesos.v1.ExecutorInfo.Type
	(MasterInfo_Capability_Type)(0),     // 9: mesos.v1.MasterInfo.Capability.Type
	(AgentInfo_Capability_Type)(0),      // 10: mesos.v1.AgentInfo.Capability.Type
	(CSIPluginContainerInfo_Service)(0), // 11: mesos.v1.CSIPluginContainerInfo.Service
	(Value_Type)(0),                     // 12: mesos.v1.Value.Type
	(Resource_ReservationInfo_Type)(0),  // 13: mesos.v1.Resource.ReservationInfo.Type
	(Resource_DiskInfo_Source_Type)(0),  // 14: mesos.v1.Resource.DiskInfo.Source.Type
	(Offer_Operation_Type)(0),           // 15: mesos.v1.Offer.Operation.Type
	(TaskStatus_Source)(0),              // 16: mesos.v1.TaskStatus.Source
	(TaskStatus_Reason)(0),              // 17: mesos.v1.TaskStatus.Reason
	(Environment_Variable_Type)(0),      // 18: mesos.v1.Environment.Variable.Type
	(Secret_Type)(0),                    // 19: mesos.v1.Secret.Type
	(Image_Type)(0),                     // 20: mesos.v1.Image.Type
	(MountPropagation_Mode)(0),          // 21: mesos.v1.MountPropagation.Mode
	(Volume_Mode)(0),                    // 22: mesos.v1.Volume.Mode
	(Volume_Source_Type)(0),             // 23: mesos.v1.Volume.Source.Type
	(Volume_Source_SandboxPath_Type)(0), // 24: mesos.v1.Volume.Source.SandboxPath.Type
	(Volume_Source_CSIVolume_VolumeCapability_AccessMode_Mode)(0), // 25: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.AccessMode.Mode
	(NetworkInfo_Protocol)(0),                                     // 26: mesos.v1.NetworkInfo.Protocol
	(CapabilityInfo_Capability)(0),                                // 27: mesos.v1.CapabilityInfo.Capability
	(LinuxInfo_IpcMode)(0),                                        // 28: mesos.v1.LinuxInfo.IpcMode
	(RLimitInfo_RLimit_Type)(0),                                   // 29: mesos.v1.RLimitInfo.RLimit.Type
	(ContainerInfo_Type)(0),                                       // 30: mesos.v1.ContainerInfo.Type
	(ContainerInfo_DockerInfo_Network)(0),                         // 31: mesos.v1.ContainerInfo.DockerInfo.Network
	(CgroupInfo_Blkio_Operation)(0),                               // 32: mesos.v1.CgroupInfo.Blkio.Operation
	(DiscoveryInfo_Visibility)(0),                                 // 33: mesos.v1.DiscoveryInfo.Visibility
	(*FrameworkID)(nil),                                           // 34: mesos.v1.FrameworkID
	(*OfferID)(nil),                                               // 35: mesos.v1.OfferID
	(*AgentID)(nil),                                               // 36: mesos.v1.AgentID
	(*TaskID)(nil),                                                // 37: mesos.v1.TaskID
	(*ExecutorID)(nil),                                            // 38: mesos.v1.ExecutorID
	(*ContainerID)(nil),                                           // 39: mesos.v1.ContainerID
	(*ResourceProviderID)(nil),                                    // 40: mesos.v1.ResourceProviderID
	(*OperationID)(nil),                                           // 41: mesos.v1.OperationID
	(*TimeInfo)(nil),                                              // 42: mesos.v1.TimeInfo
	(*DurationInfo)(nil),                                          // 43: mesos.v1.DurationInfo
	(*Address)(nil),                                               // 44: mesos.v1.Address
	(*URL)(nil),                                                   // 45: mesos.v1.URL
	(*Unavailability)(nil),                                        // 46: mesos.v1.Unavailability
	(*MachineID)(nil),                                             // 47: mesos.v1.MachineID
	(*MachineInfo)(nil),                                           // 48: mesos.v1.MachineInfo
	(*FrameworkInfo)(nil),                                         // 49: mesos.v1.FrameworkInfo
	(*CheckInfo)(nil),                                             // 50: mesos.v1.CheckInfo
	(*HealthCheck)(nil),                                           // 51: mesos.v1.HealthCheck
	(*KillPolicy)(nil),                                            // 52: mesos.v1.KillPolicy
	(*CommandInfo)(nil),                                           // 53: mesos.v1.CommandInfo
	(*ExecutorInfo)(nil),                                          // 54: mesos.v1.ExecutorInfo
	(*DomainInfo)(nil),                                            // 55: mesos.v1.DomainInfo
	(*MasterInfo)(nil),                                            // 56: mesos.v1.MasterInfo
	(*AgentInfo)(nil),                                             // 57: mesos.v1.AgentInfo
	(*CSIPluginContainerInfo)(nil),                                // 58: mesos.v1.CSIPluginContainerInfo
	(*CSIPluginEndpoint)(nil),                                     // 59: mesos.v1.CSIPluginEndpoint
	(*CSIPluginInfo)(nil),                                         // 60: mesos.v1.CSIPluginInfo
	(*ResourceProviderInfo)(nil),                                  // 61: mesos.v1.ResourceProviderInfo
	(*Value)(nil),                                                 // 62: mesos.v1.Value
	(*Attribute)(nil),                                             // 63: mesos.v1.Attribute
	(*Resource)(nil),                                              // 64: mesos.v1.Resource
	(*TrafficControlStatistics)(nil),                              // 65: mesos.v1.TrafficControlStatistics
	(*IpStatistics)(nil),                                          // 66: mesos.v1.IpStatistics
	(*IcmpStatistics)(nil),                                        // 67: mesos.v1.IcmpStatistics
	(*TcpStatistics)(nil),                                         // 68: mesos.v1.TcpStatistics
	(*UdpStatistics)(nil),                                         // 69: mesos.v1.UdpStatistics
	(*SNMPStatistics)(nil),                                        // 70: mesos.v1.SNMPStatistics
	(*DiskStatistics)(nil),                                        // 71: mesos.v1.DiskStatistics
	(*ResourceStatistics)(nil),                                    // 72: mesos.v1.ResourceStatistics
	(*ResourceUsage)(nil),                                         // 73: mesos.v1.ResourceUsage
	(*PerfStatistics)(nil),                                        // 74: mesos.v1.PerfStatistics
	(*OfferFilters)(nil),                                          // 75: mesos.v1.OfferFilters
	(*Request)(nil),                                               // 76: mesos.v1.Request
	(*Offer)(nil),                                                 // 77: mesos.v1.Offer
	(*InverseOffer)(nil),                                          // 78: mesos.v1.InverseOffer
	(*TaskInfo)(nil),                                              // 79: mesos.v1.TaskInfo
	(*TaskGroupInfo)(nil),                                         // 80: mesos.v1.TaskGroupInfo
	(*Task)(nil),                                                  // 81: mesos.v1.Task
	(*TaskResourceLimitation)(nil),                                // 82: mesos.v1.TaskResourceLimitation
	(*UUID)(nil),                                                  // 83: mesos.v1.UUID
	(*Operation)(nil),                                             // 84: mesos.v1.Operation
	(*OperationStatus)(nil),                                       // 85: mesos.v1.OperationStatus
	(*CheckStatusInfo)(nil),                                       // 86: mesos.v1.CheckStatusInfo
	(*TaskStatus)(nil),                                            // 87: mesos.v1.TaskStatus
	(*Filters)(nil),                                               // 88: mesos.v1.Filters
	(*Environment)(nil),                                           // 89: mesos.v1.Environment
	(*Parameter)(nil),                                             // 90: mesos.v1.Parameter
	(*Parameters)(nil),                                            // 91: mesos.v1.Parameters
	(*Credential)(nil),                                            // 92: mesos.v1.Credential
	(*Credentials)(nil),                                           // 93: mesos.v1.Credentials
	(*Secret)(nil),                                                // 94: mesos.v1.Secret
	(*RateLimit)(nil),                                             // 95: mesos.v1.RateLimit
	(*RateLimits)(nil),                                            // 96: mesos.v1.RateLimits
	(*Image)(nil),                                                 // 97: mesos.v1.Image
	(*MountPropagation)(nil),                                      // 98: mesos.v1.MountPropagation
	(*Volume)(nil),                                                // 99: mesos.v1.Volume
	(*NetworkInfo)(nil),                                           // 100: mesos.v1.NetworkInfo
	(*CapabilityInfo)(nil),                                        // 101: mesos.v1.CapabilityInfo
	(*SeccompInfo)(nil),                                           // 102: mesos.v1.SeccompInfo
	(*LinuxInfo)(nil),                                             // 103: mesos.v1.LinuxInfo
	(*RLimitInfo)(nil),                                            // 104: mesos.v1.RLimitInfo
	(*TTYInfo)(nil),                                               // 105: mesos.v1.TTYInfo
	(*ContainerInfo)(nil),                                         // 106: mesos.v1.ContainerInfo
	(*ContainerStatus)(nil),                                       // 107: mesos.v1.ContainerStatus
	(*CgroupInfo)(nil),                                            // 108: mesos.v1.CgroupInfo
	(*Labels)(nil),                                                // 109: mesos.v1.Labels
	(*Label)(nil),                                                 // 110: mesos.v1.Label
	(*Port)(nil),                                                  // 111: mesos.v1.Port
	(*Ports)(nil),                                                 // 112: mesos.v1.Ports
	(*DiscoveryInfo)(nil),                                         // 113: mesos.v1.DiscoveryInfo
	(*WeightInfo)(nil),                                            // 114: mesos.v1.WeightInfo
	(*VersionInfo)(nil),                                           // 115: mesos.v1.VersionInfo
	(*Flag)(nil),                                                  // 116: mesos.v1.Flag
	(*Role)(nil),                                                  // 117: mesos.v1.Role
	(*Metric)(nil),                                                // 118: mesos.v1.Metric
	(*FileInfo)(nil),                                              // 119: mesos.v1.FileInfo
	(*Device)(nil),                                                // 120: mesos.v1.Device
	(*DeviceAccess)(nil),                                          // 121: mesos.v1.DeviceAccess
	(*DeviceWhitelist)(nil),                                       // 122: mesos.v1.DeviceWhitelist
	(*DrainConfig)(nil),                                           // 123: mesos.v1.DrainConfig
	(*DrainInfo)(nil),                                             // 124: mesos.v1.DrainInfo
	(*FrameworkInfo_Capability)(nil),                              // 125: mesos.v1.FrameworkInfo.Capability
	nil,                                                           // 126: mesos.v1.FrameworkInfo.OfferFiltersEntry
	(*CheckInfo_Command)(nil),                                     // 127: mesos.v1.CheckInfo.Command
	(*CheckInfo_Http)(nil),                                        // 128: mesos.v1.CheckInfo.Http
	(*CheckInfo_Tcp)(nil),                                         // 129: mesos.v1.CheckInfo.Tcp
	(*HealthCheck_HTTPCheckInfo)(nil),                             // 130: mesos.v1.HealthCheck.HTTPCheckInfo
	(*HealthCheck_TCPCheckInfo)(nil),                              // 131: mesos.v1.HealthCheck.TCPCheckInfo
	(*CommandInfo_URI)(nil),                                       // 132: mesos.v1.CommandInfo.URI
	(*DomainInfo_FaultDomain)(nil),                                // 133: mesos.v1.DomainInfo.FaultDomain
	(*DomainInfo_FaultDomain_RegionInfo)(nil),                     // 134: mesos.v1.DomainInfo.FaultDomain.RegionInfo
	(*DomainInfo_FaultDomain_ZoneInfo)(nil),                       // 135: mesos.v1.DomainInfo.FaultDomain.ZoneInfo
	(*MasterInfo_Capability)(nil),                                 // 136: mesos.v1.MasterInfo.Capability
	(*AgentInfo_Capability)(nil),                                  // 137: mesos.v1.AgentInfo.Capability
	(*ResourceProviderInfo_Storage)(nil),                          // 138: mesos.v1.ResourceProviderInfo.Storage
	(*Value_Scalar)(nil),                                          // 139: mesos.v1.Value.Scalar
	(*Value_Range)(nil),                                           // 140: mesos.v1.Value.Range
	(*Value_Ranges)(nil),                                          // 141: mesos.v1.Value.Ranges
	(*Value_Set)(nil),                                             // 142: mesos.v1.Value.Set
	(*Value_Text)(nil),                                            // 143: mesos.v1.Value.Text
	(*Resource_AllocationInfo)(nil),                               // 144: mesos.v1.Resource.AllocationInfo
	(*Resource_ReservationInfo)(nil),                              // 145: mesos.v1.Resource.ReservationInfo
	(*Resource_DiskInfo)(nil),                                     // 146: mesos.v1.Resource.DiskInfo
	(*Resource_RevocableInfo)(nil),                                // 147: mesos.v1.Resource.RevocableInfo
	(*Resource_SharedInfo)(nil),                                   // 148: mesos.v1.Resource.SharedInfo
	(*Resource_DiskInfo_Persistence)(nil),                         // 149: mesos.v1.Resource.DiskInfo.Persistence
	(*Resource_DiskInfo_Source)(nil),                              // 150: mesos.v1.Resource.DiskInfo.Source
	(*Resource_DiskInfo_Source_Path)(nil),                         // 151: mesos.v1.Resource.DiskInfo.Source.Path
	(*Resource_DiskInfo_Source_Mount)(nil),                        // 152: mesos.v1.Resource.DiskInfo.Source.Mount
	(*ResourceStatistics_RatePercentiles)(nil),                    // 153: mesos.v1.ResourceStatistics.RatePercentiles
	(*ResourceStatistics_RateStatistics)(nil),                     // 154: mesos.v1.ResourceStatistics.RateStatistics
	(*ResourceUsage_Executor)(nil),                                // 155: mesos.v1.ResourceUsage.Executor
	(*ResourceUsage_Executor_Task)(nil),                           // 156: mesos.v1.ResourceUsage.Executor.Task
	(*OfferFilters_ResourceQuantities)(nil),                       // 157: mesos.v1.OfferFilters.ResourceQuantities
	(*OfferFilters_MinAllocatableResources)(nil),                  // 158: mesos.v1.OfferFilters.MinAllocatableResources
	nil,                                                // 159: mesos.v1.OfferFilters.ResourceQuantities.QuantitiesEntry
	(*Offer_Operation)(nil),                            // 160: mesos.v1.Offer.Operation
	(*Offer_Operation_Launch)(nil),                     // 161: mesos.v1.Offer.Operation.Launch
	(*Offer_Operation_LaunchGroup)(nil),                // 162: mesos.v1.Offer.Operation.LaunchGroup
	(*Offer_Operation_Reserve)(nil),                    // 163: mesos.v1.Offer.Operation.Reserve
	(*Offer_Operation_Unreserve)(nil),                  // 164: mesos.v1.Offer.Operation.Unreserve
	(*Offer_Operation_Create)(nil),                     // 165: mesos.v1.Offer.Operation.Create
	(*Offer_Operation_Destroy)(nil),                    // 166: mesos.v1.Offer.Operation.Destroy
	(*Offer_Operation_GrowVolume)(nil),                 // 167: mesos.v1.Offer.Operation.GrowVolume
	(*Offer_Operation_ShrinkVolume)(nil),               // 168: mesos.v1.Offer.Operation.ShrinkVolume
	(*Offer_Operation_CreateDisk)(nil),                 // 169: mesos.v1.Offer.Operation.CreateDisk
	(*Offer_Operation_DestroyDisk)(nil),                // 170: mesos.v1.Offer.Operation.DestroyDisk
	nil,                                                // 171: mesos.v1.TaskInfo.LimitsEntry
	nil,                                                // 172: mesos.v1.Task.LimitsEntry
	(*CheckStatusInfo_Command)(nil),                    // 173: mesos.v1.CheckStatusInfo.Command
	(*CheckStatusInfo_Http)(nil),                       // 174: mesos.v1.CheckStatusInfo.Http
	(*CheckStatusInfo_Tcp)(nil),                        // 175: mesos.v1.CheckStatusInfo.Tcp
	(*Environment_Variable)(nil),                       // 176: mesos.v1.Environment.Variable
	(*Secret_Reference)(nil),                           // 177: mesos.v1.Secret.Reference
	(*Secret_Value)(nil),                               // 178: mesos.v1.Secret.Value
	(*Image_Appc)(nil),                                 // 179: mesos.v1.Image.Appc
	(*Image_Docker)(nil),                               // 180: mesos.v1.Image.Docker
	(*Volume_Source)(nil),                              // 181: mesos.v1.Volume.Source
	(*Volume_Source_DockerVolume)(nil),                 // 182: mesos.v1.Volume.Source.DockerVolume
	(*Volume_Source_HostPath)(nil),                     // 183: mesos.v1.Volume.Source.HostPath
	(*Volume_Source_SandboxPath)(nil),                  // 184: mesos.v1.Volume.Source.SandboxPath
	(*Volume_Source_CSIVolume)(nil),                    // 185: mesos.v1.Volume.Source.CSIVolume
	(*Volume_Source_CSIVolume_VolumeCapability)(nil),   // 186: mesos.v1.Volume.Source.CSIVolume.VolumeCapability
	(*Volume_Source_CSIVolume_StaticProvisioning)(nil), // 187: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning
	(*Volume_Source_CSIVolume_VolumeCapability_BlockVolume)(nil), // 188: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.BlockVolume
	(*Volume_Source_CSIVolume_VolumeCapability_MountVolume)(nil), // 189: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.MountVolume
	(*Volume_Source_CSIVolume_VolumeCapability_AccessMode)(nil),  // 190: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.AccessMode
	nil,                              // 191: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.NodeStageSecretsEntry
	nil,                              // 192: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.NodePublishSecretsEntry
	nil,                              // 193: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.VolumeContextEntry
	(*NetworkInfo_IPAddress)(nil),    // 194: mesos.v1.NetworkInfo.IPAddress
	(*NetworkInfo_PortMapping)(nil),  // 195: mesos.v1.NetworkInfo.PortMapping
	(*RLimitInfo_RLimit)(nil),        // 196: mesos.v1.RLimitInfo.RLimit
	(*TTYInfo_WindowSize)(nil),       // 197: mesos.v1.TTYInfo.WindowSize
	(*ContainerInfo_DockerInfo)(nil), // 198: mesos.v1.ContainerInfo.DockerInfo
	(*ContainerInfo_MesosInfo)(nil),  // 199: mesos.v1.ContainerInfo.MesosInfo
	(*ContainerInfo_DockerInfo_PortMapping)(nil),   // 200: mesos.v1.ContainerInfo.DockerInfo.PortMapping
	(*CgroupInfo_Blkio)(nil),                       // 201: mesos.v1.CgroupInfo.Blkio
	(*CgroupInfo_NetCls)(nil),                      // 202: mesos.v1.CgroupInfo.NetCls
	(*CgroupInfo_Blkio_Value)(nil),                 // 203: mesos.v1.CgroupInfo.Blkio.Value
	(*CgroupInfo_Blkio_CFQ)(nil),                   // 204: mesos.v1.CgroupInfo.Blkio.CFQ
	(*CgroupInfo_Blkio_Throttling)(nil),            // 205: mesos.v1.CgroupInfo.Blkio.Throttling
	(*CgroupInfo_Blkio_Statistics)(nil),            // 206: mesos.v1.CgroupInfo.Blkio.Statistics
	(*CgroupInfo_Blkio_CFQ_Statistics)(nil),        // 207: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics
	(*CgroupInfo_Blkio_Throttling_Statistics)(nil), // 208: mesos.v1.CgroupInfo.Blkio.Throttling.Statistics
	(*Device_Number)(nil),                          // 209: mesos.v1.Device.Number
	(*DeviceAccess_Access)(nil),                    // 210: mesos.v1.DeviceAccess.Access
}
var file_mesos_proto_depIdxs = []int32{
	39,  // 0: mesos.v1.ContainerID.parent:type_name -> mesos.v1.ContainerID
	44,  // 1: mesos.v1.URL.address:type_name -> mesos.v1.Address
	90,  // 2: mesos.v1.URL.query:type_name -> mesos.v1.Parameter
	42,  // 3: mesos.v1.Unavailability.start:type_name -> mesos.v1.TimeInfo
	43,  // 4: mesos.v1.Unavailability.duration:type_name -> mesos.v1.DurationInfo
	47,  // 5: mesos.v1.MachineInfo.id:type_name -> mesos.v1.MachineID
	4,   // 6: mesos.v1.MachineInfo.mode:type_name -> mesos.v1.MachineInfo.Mode
	46,  // 7: mesos.v1.MachineInfo.unavailability:type_name -> mesos.v1.Unavailability
	34,  // 8: mesos.v1.FrameworkInfo.id:type_name -> mesos.v1.FrameworkID
	125, // 9: mesos.v1.FrameworkInfo.capabilities:type_name -> mesos.v1.FrameworkInfo.Capability
	109, // 10: mesos.v1.FrameworkInfo.labels:type_name -> mesos.v1.Labels
	126, // 11: mesos.v1.FrameworkInfo.offer_filters:type_name -> mesos.v1.FrameworkInfo.OfferFiltersEntry
	6,   // 12: mesos.v1.CheckInfo.type:type_name -> mesos.v1.CheckInfo.Type
	127, // 13: mesos.v1.CheckInfo.command:type_name -> mesos.v1.CheckInfo.Command
	128, // 14: mesos.v1.CheckInfo.http:type_name -> mesos.v1.CheckInfo.Http
	129, // 15: mesos.v1.CheckInfo.tcp:type_name -> mesos.v1.CheckInfo.Tcp
	7,   // 16: mesos.v1.HealthCheck.type:type_name -> mesos.v1.HealthCheck.Type
	53,  // 17: mesos.v1.HealthCheck.command:type_name -> mesos.v1.CommandInfo
	130, // 18: mesos.v1.HealthCheck.http:type_name -> mesos.v1.HealthCheck.HTTPCheckInfo
	131, // 19: mesos.v1.HealthCheck.tcp:type_name -> mesos.v1.HealthCheck.TCPCheckInfo
	43,  // 20: mesos.v1.KillPolicy.grace_period:type_name -> mesos.v1.DurationInfo
	132, // 21: mesos.v1.CommandInfo.uris:type_name -> mesos.v1.CommandInfo.URI
	89,  // 22: mesos.v1.CommandInfo.environment:type_name -> mesos.v1.Environment
	8,   // 23: mesos.v1.ExecutorInfo.type:type_name -> mesos.v1.ExecutorInfo.Type
	38,  // 24: mesos.v1.ExecutorInfo.executor_id:type_name -> mesos.v1.ExecutorID
	34,  // 25: mesos.v1.ExecutorInfo.framework_id:type_name -> mesos.v1.FrameworkID
	53,  // 26: mesos.v1.ExecutorInfo.command:type_name -> mesos.v1.CommandInfo
	106, // 27: mesos.v1.ExecutorInfo.container:type_name -> mesos.v1.ContainerInfo
	64,  // 28: mesos.v1.ExecutorInfo.resources:type_name -> mesos.v1.Resource
	113, // 29: mesos.v1.ExecutorInfo.discovery:type_name -> mesos.v1.DiscoveryInfo
	43,  // 30: mesos.v1.ExecutorInfo.shutdown_grace_period:type_name -> mesos.v1.DurationInfo
	109, // 31: mesos.v1.ExecutorInfo.labels:type_name -> mesos.v1.Labels
	133, // 32: mesos.v1.DomainInfo.fault_domain:type_name -> mesos.v1.DomainInfo.FaultDomain
	44,  // 33: mesos.v1.MasterInfo.address:type_name -> mesos.v1.Address
	55,  // 34: mesos.v1.MasterInfo.domain:type_name -> mesos.v1.DomainInfo
	136, // 35: mesos.v1.MasterInfo.capabilities:type_name -> mesos.v1.MasterInfo.Capability
	64,  // 36: mesos.v1.AgentInfo.resources:type_name -> mesos.v1.Resource
	63,  // 37: mesos.v1.AgentInfo.attributes:type_name -> mesos.v1.Attribute
	36,  // 38: mesos.v1.AgentInfo.id:type_name -> mesos.v1.AgentID
	55,  // 39: mesos.v1.AgentInfo.domain:type_name -> mesos.v1.DomainInfo
	11,  // 40: mesos.v1.CSIPluginContainerInfo.services:type_name -> mesos.v1.CSIPluginContainerInfo.Service
	53,  // 41: mesos.v1.CSIPluginContainerInfo.command:type_name -> mesos.v1.CommandInfo
	64,  // 42: mesos.v1.CSIPluginContainerInfo.resources:type_name -> mesos.v1.Resource
	106, // 43: mesos.v1.CSIPluginContainerInfo.container:type_name -> mesos.v1.ContainerInfo
	11,  // 44: mesos.v1.CSIPluginEndpoint.csi_service:type_name -> mesos.v1.CSIPluginContainerInfo.Service
	58,  // 45: mesos.v1.CSIPluginInfo.containers:type_name -> mesos.v1.CSIPluginContainerInfo
	59,  // 46: mesos.v1.CSIPluginInfo.endpoints:type_name -> mesos.v1.CSIPluginEndpoint
	40,  // 47: mesos.v1.ResourceProviderInfo.id:type_name -> mesos.v1.ResourceProviderID
	63,  // 48: mesos.v1.ResourceProviderInfo.attributes:type_name -> mesos.v1.Attribute
	145, // 49: mesos.v1.ResourceProviderInfo.default_reservations:type_name -> mesos.v1.Resource.ReservationInfo
	138, // 50: mesos.v1.ResourceProviderInfo.storage:type_name -> mesos.v1.ResourceProviderInfo.Storage
	12,  // 51: mesos.v1.Value.type:type_name -> mesos.v1.Value.Type
	139, // 52: mesos.v1.Value.scalar:type_name -> mesos.v1.Value.Scalar
	141, // 53: mesos.v1.Value.ranges:type_name -> mesos.v1.Value.Ranges
	142, // 54: mesos.v1.Value.set:type_name -> mesos.v1.Value.Set
	143, // 55: mesos.v1.Value.text:type_name -> mesos.v1.Value.Text
	12,  // 56: mesos.v1.Attribute.type:type_name -> mesos.v1.Value.Type
	139, // 57: mesos.v1.Attribute.scalar:type_name -> mesos.v1.Value.Scalar
	141, // 58: mesos.v1.Attribute.ranges:type_name -> mesos.v1.Value.Ranges
	142, // 59: mesos.v1.Attribute.set:type_name -> mesos.v1.Value.Set
	143, // 60: mesos.v1.Attribute.text:type_name -> mesos.v1.Value.Text
	40,  // 61: mesos.v1.Resource.provider_id:type_name -> mesos.v1.ResourceProviderID
	12,  // 62: mesos.v1.Resource.type:type_name -> mesos.v1.Value.Type
	139, // 63: mesos.v1.Resource.scalar:type_name -> mesos.v1.Value.Scalar
	141, // 64: mesos.v1.Resource.ranges:type_name -> mesos.v1.Value.Ranges
	142, // 65: mesos.v1.Resource.set:type_name -> mesos.v1.Value.Set
	144, // 66: mesos.v1.Resource.allocation_info:type_name -> mesos.v1.Resource.AllocationInfo
	145, // 67: mesos.v1.Resource.reservation:type_name -> mesos.v1.Resource.ReservationInfo
	145, // 68: mesos.v1.Resource.reservations:type_name -> mesos.v1.Resource.ReservationInfo
	146, // 69: mesos.v1.Resource.disk:type_name -> mesos.v1.Resource.DiskInfo
	147, // 70: mesos.v1.Resource.revocable:type_name -> mesos.v1.Resource.RevocableInfo
	148, // 71: mesos.v1.Resource.shared:type_name -> mesos.v1.Resource.SharedInfo
	66,  // 72: mesos.v1.SNMPStatistics.ip_stats:type_name -> mesos.v1.IpStatistics
	67,  // 73: mesos.v1.SNMPStatistics.icmp_stats:type_name -> mesos.v1.IcmpStatistics
	68,  // 74: mesos.v1.SNMPStatistics.tcp_stats:type_name -> mesos.v1.TcpStatistics
	69,  // 75: mesos.v1.SNMPStatistics.udp_stats:type_name -> mesos.v1.UdpStatistics
	150, // 76: mesos.v1.DiskStatistics.source:type_name -> mesos.v1.Resource.DiskInfo.Source
	149, // 77: mesos.v1.DiskStatistics.persistence:type_name -> mesos.v1.Resource.DiskInfo.Persistence
	71,  // 78: mesos.v1.ResourceStatistics.disk_statistics:type_name -> mesos.v1.DiskStatistics
	206, // 79: mesos.v1.ResourceStatistics.blkio_statistics:type_name -> mesos.v1.CgroupInfo.Blkio.Statistics
	74,  // 80: mesos.v1.ResourceStatistics.perf:type_name -> mesos.v1.PerfStatistics
	154, // 81: mesos.v1.ResourceStatistics.net_rate_statistics:type_name -> mesos.v1.ResourceStatistics.RateStatistics
	140, // 82: mesos.v1.ResourceStatistics.net_ephemeral_ports:type_name -> mesos.v1.Value.Range
	65,  // 83: mesos.v1.ResourceStatistics.net_traffic_control_statistics:type_name -> mesos.v1.TrafficControlStatistics
	70,  // 84: mesos.v1.ResourceStatistics.net_snmp_statistics:type_name -> mesos.v1.SNMPStatistics
	155, // 85: mesos.v1.ResourceUsage.executors:type_name -> mesos.v1.ResourceUsage.Executor
	64,  // 86: mesos.v1.ResourceUsage.total:type_name -> mesos.v1.Resource
	158, // 87: mesos.v1.OfferFilters.min_allocatable_resources:type_name -> mesos.v1.OfferFilters.MinAllocatableResources
	36,  // 88: mesos.v1.Request.agent_id:type_name -> mesos.v1.AgentID
	64,  // 89: mesos.v1.Request.resources:type_name -> mesos.v1.Resource
	35,  // 90: mesos.v1.Offer.id:type_name -> mesos.v1.OfferID
	34,  // 91: mesos.v1.Offer.framework_id:type_name -> mesos.v1.FrameworkID
	36,  // 92: mesos.v1.Offer.agent_id:type_name -> mesos.v1.AgentID
	45,  // 93: mesos.v1.Offer.url:type_name -> mesos.v1.URL
	55,  // 94: mesos.v1.Offer.domain:type_name -> mesos.v1.DomainInfo
	64,  // 95: mesos.v1.Offer.resources:type_name -> mesos.v1.Resource
	63,  // 96: mesos.v1.Offer.attributes:type_name -> mesos.v1.Attribute
	38,  // 97: mesos.v1.Offer.executor_ids:type_name -> mesos.v1.ExecutorID
	46,  // 98: mesos.v1.Offer.unavailability:type_name -> mesos.v1.Unavailability
	144, // 99: mesos.v1.Offer.allocation_info:type_name -> mesos.v1.Resource.AllocationInfo
	35,  // 100: mesos.v1.InverseOffer.id:type_name -> mesos.v1.OfferID
	45,  // 101: mesos.v1.InverseOffer.url:type_name -> mesos.v1.URL
	34,  // 102: mesos.v1.InverseOffer.framework_id:type_name -> mesos.v1.FrameworkID
	36,  // 103: mesos.v1.InverseOffer.agent_id:type_name -> mesos.v1.AgentID
	46,  // 104: mesos.v1.InverseOffer.unavailability:type_name -> mesos.v1.Unavailability
	64,  // 105: mesos.v1.InverseOffer.resources:type_name -> mesos.v1.Resource
	37,  // 106: mesos.v1.TaskInfo.task_id:type_name -> mesos.v1.TaskID
	36,  // 107: mesos.v1.TaskInfo.agent_id:type_name -> mesos.v1.AgentID
	64,  // 108: mesos.v1.TaskInfo.resources:type_name -> mesos.v1.Resource
	54,  // 109: mesos.v1.TaskInfo.executor:type_name -> mesos.v1.ExecutorInfo
	53,  // 110: mesos.v1.TaskInfo.command:type_name -> mesos.v1.CommandInfo
	106, // 111: mesos.v1.TaskInfo.container:type_name -> mesos.v1.ContainerInfo
	51,  // 112: mesos.v1.TaskInfo.health_check:type_name -> mesos.v1.HealthCheck
	50,  // 113: mesos.v1.TaskInfo.check:type_name -> mesos.v1.CheckInfo
	52,  // 114: mesos.v1.TaskInfo.kill_policy:type_name -> mesos.v1.KillPolicy
	109, // 115: mesos.v1.TaskInfo.labels:type_name -> mesos.v1.Labels
	113, // 116: mesos.v1.TaskInfo.discovery:type_name -> mesos.v1.DiscoveryInfo
	43,  // 117: mesos.v1.TaskInfo.max_completion_time:type_name -> mesos.v1.DurationInfo
	171, // 118: mesos.v1.TaskInfo.limits:type_name -> mesos.v1.TaskInfo.LimitsEntry
	79,  // 119: mesos.v1.TaskGroupInfo.tasks:type_name -> mesos.v1.TaskInfo
	37,  // 120: mesos.v1.Task.task_id:type_name -> mesos.v1.TaskID
	34,  // 121: mesos.v1.Task.framework_id:type_name -> mesos.v1.FrameworkID
	38,  // 122: mesos.v1.Task.executor_id:type_name -> mesos.v1.ExecutorID
	36,  // 123: mesos.v1.Task.agent_id:type_name -> mesos.v1.AgentID
	1,   // 124: mesos.v1.Task.state:type_name -> mesos.v1.TaskState
	64,  // 125: mesos.v1.Task.resources:type_name -> mesos.v1.Resource
	87,  // 126: mesos.v1.Task.statuses:type_name -> mesos.v1.TaskStatus
	1,   // 127: mesos.v1.Task.status_update_state:type_name -> mesos.v1.TaskState
	109, // 128: mesos.v1.Task.labels:type_name -> mesos.v1.Labels
	113, // 129: mesos.v1.Task.discovery:type_name -> mesos.v1.DiscoveryInfo
	106, // 130: mesos.v1.Task.container:type_name -> mesos.v1.ContainerInfo
	51,  // 131: mesos.v1.Task.health_check:type_name -> mesos.v1.HealthCheck
	52,  // 132: mesos.v1.Task.kill_policy:type_name -> mesos.v1.KillPolicy
	172, // 133: mesos.v1.Task.limits:type_name -> mesos.v1.Task.LimitsEntry
	64,  // 134: mesos.v1.TaskResourceLimitation.resources:type_name -> mesos.v1.Resource
	34,  // 135: mesos.v1.Operation.framework_id:type_name -> mesos.v1.FrameworkID
	36,  // 136: mesos.v1.Operation.agent_id:type_name -> mesos.v1.AgentID
	160, // 137: mesos.v1.Operation.info:type_name -> mesos.v1.Offer.Operation
	85,  // 138: mesos.v1.Operation.latest_status:type_name -> mesos.v1.OperationStatus
	85,  // 139: mesos.v1.Operation.statuses:type_name -> mesos.v1.OperationStatus
	83,  // 140: mesos.v1.Operation.uuid:type_name -> mesos.v1.UUID
	41,  // 141: mesos.v1.OperationStatus.operation_id:type_name -> mesos.v1.OperationID
	2,   // 142: mesos.v1.OperationStatus.state:type_name -> mesos.v1.OperationState
	64,  // 143: mesos.v1.OperationStatus.converted_resources:type_name -> mesos.v1.Resource
	83,  // 144: mesos.v1.OperationStatus.uuid:type_name -> mesos.v1.UUID
	36,  // 145: mesos.v1.OperationStatus.agent_id:type_name -> mesos.v1.AgentID
	40,  // 146: mesos.v1.OperationStatus.resource_provider_id:type_name -> mesos.v1.ResourceProviderID
	6,   // 147: mesos.v1.CheckStatusInfo.type:type_name -> mesos.v1.CheckInfo.Type
	173, // 148: mesos.v1.CheckStatusInfo.command:type_name -> mesos.v1.CheckStatusInfo.Command
	174, // 149: mesos.v1.CheckStatusInfo.http:type_name -> mesos.v1.CheckStatusInfo.Http
	175, // 150: mesos.v1.CheckStatusInfo.tcp:type_name -> mesos.v1.CheckStatusInfo.Tcp
	37,  // 151: mesos.v1.TaskStatus.task_id:type_name -> mesos.v1.TaskID
	1,   // 152: mesos.v1.TaskStatus.state:type_name -> mesos.v1.TaskState
	16,  // 153: mesos.v1.TaskStatus.source:type_name -> mesos.v1.TaskStatus.Source
	17,  // 154: mesos.v1.TaskStatus.reason:type_name -> mesos.v1.TaskStatus.Reason
	36,  // 155: mesos.v1.TaskStatus.agent_id:type_name -> mesos.v1.AgentID
	38,  // 156: mesos.v1.TaskStatus.executor_id:type_name -> mesos.v1.ExecutorID
	86,  // 157: mesos.v1.TaskStatus.check_status:type_name -> mesos.v1.CheckStatusInfo
	109, // 158: mesos.v1.TaskStatus.labels:type_name -> mesos.v1.Labels
	107, // 159: mesos.v1.TaskStatus.container_status:type_name -> mesos.v1.ContainerStatus
	42,  // 160: mesos.v1.TaskStatus.unreachable_time:type_name -> mesos.v1.TimeInfo
	82,  // 161: mesos.v1.TaskStatus.limitation:type_name -> mesos.v1.TaskResourceLimitation
	176, // 162: mesos.v1.Environment.variables:type_name -> mesos.v1.Environment.Variable
	90,  // 163: mesos.v1.Parameters.parameter:type_name -> mesos.v1.Parameter
	92,  // 164: mesos.v1.Credentials.credentials:type_name -> mesos.v1.Credential
	19,  // 165: mesos.v1.Secret.type:type_name -> mesos.v1.Secret.Type
	177, // 166: mesos.v1.Secret.reference:type_name -> mesos.v1.Secret.Reference
	178, // 167: mesos.v1.Secret.value:type_name -> mesos.v1.Secret.Value
	95,  // 168: mesos.v1.RateLimits.limits:type_name -> mesos.v1.RateLimit
	20,  // 169: mesos.v1.Image.type:type_name -> mesos.v1.Image.Type
	179, // 170: mesos.v1.Image.appc:type_name -> mesos.v1.Image.Appc
	180, // 171: mesos.v1.Image.docker:type_name -> mesos.v1.Image.Docker
	21,  // 172: mesos.v1.MountPropagation.mode:type_name -> mesos.v1.MountPropagation.Mode
	22,  // 173: mesos.v1.Volume.mode:type_name -> mesos.v1.Volume.Mode
	97,  // 174: mesos.v1.Volume.image:type_name -> mesos.v1.Image
	181, // 175: mesos.v1.Volume.source:type_name -> mesos.v1.Volume.Source
	194, // 176: mesos.v1.NetworkInfo.ip_addresses:type_name -> mesos.v1.NetworkInfo.IPAddress
	109, // 177: mesos.v1.NetworkInfo.labels:type_name -> mesos.v1.Labels
	195, // 178: mesos.v1.NetworkInfo.port_mappings:type_name -> mesos.v1.NetworkInfo.PortMapping
	27,  // 179: mesos.v1.CapabilityInfo.capabilities:type_name -> mesos.v1.CapabilityInfo.Capability
	101, // 180: mesos.v1.LinuxInfo.capability_info:type_name -> mesos.v1.CapabilityInfo
	101, // 181: mesos.v1.LinuxInfo.bounding_capabilities:type_name -> mesos.v1.CapabilityInfo
	101, // 182: mesos.v1.LinuxInfo.effective_capabilities:type_name -> mesos.v1.CapabilityInfo
	102, // 183: mesos.v1.LinuxInfo.seccomp:type_name -> mesos.v1.SeccompInfo
	28,  // 184: mesos.v1.LinuxInfo.ipc_mode:type_name -> mesos.v1.LinuxInfo.IpcMode
	196, // 185: mesos.v1.RLimitInfo.rlimits:type_name -> mesos.v1.RLimitInfo.RLimit
	197, // 186: mesos.v1.TTYInfo.window_size:type_name -> mesos.v1.TTYInfo.WindowSize
	30,  // 187: mesos.v1.ContainerInfo.type:type_name -> mesos.v1.ContainerInfo.Type
	99,  // 188: mesos.v1.ContainerInfo.volumes:type_name -> mesos.v1.Volume
	198, // 189: mesos.v1.ContainerInfo.docker:type_name -> mesos.v1.ContainerInfo.DockerInfo
	199, // 190: mesos.v1.ContainerInfo.mesos:type_name -> mesos.v1.ContainerInfo.MesosInfo
	100, // 191: mesos.v1.ContainerInfo.network_infos:type_name -> mesos.v1.NetworkInfo
	103, // 192: mesos.v1.ContainerInfo.linux_info:type_name -> mesos.v1.LinuxInfo
	104, // 193: mesos.v1.ContainerInfo.rlimit_info:type_name -> mesos.v1.RLimitInfo
	105, // 194: mesos.v1.ContainerInfo.tty_info:type_name -> mesos.v1.TTYInfo
	39,  // 195: mesos.v1.ContainerStatus.container_id:type_name -> mesos.v1.ContainerID
	100, // 196: mesos.v1.ContainerStatus.network_infos:type_name -> mesos.v1.NetworkInfo
	108, // 197: mesos.v1.ContainerStatus.cgroup_info:type_name -> mesos.v1.CgroupInfo
	202, // 198: mesos.v1.CgroupInfo.net_cls:type_name -> mesos.v1.CgroupInfo.NetCls
	110, // 199: mesos.v1.Labels.labels:type_name -> mesos.v1.Label
	33,  // 200: mesos.v1.Port.visibility:type_name -> mesos.v1.DiscoveryInfo.Visibility
	109, // 201: mesos.v1.Port.labels:type_name -> mesos.v1.Labels
	111, // 202: mesos.v1.Ports.ports:type_name -> mesos.v1.Port
	33,  // 203: mesos.v1.DiscoveryInfo.visibility:type_name -> mesos.v1.DiscoveryInfo.Visibility
	112, // 204: mesos.v1.DiscoveryInfo.ports:type_name -> mesos.v1.Ports
	109, // 205: mesos.v1.DiscoveryInfo.labels:type_name -> mesos.v1.Labels
	34,  // 206: mesos.v1.Role.frameworks:type_name -> mesos.v1.FrameworkID
	64,  // 207: mesos.v1.Role.resources:type_name -> mesos.v1.Resource
	42,  // 208: mesos.v1.FileInfo.mtime:type_name -> mesos.v1.TimeInfo
	209, // 209: mesos.v1.Device.number:type_name -> mesos.v1.Device.Number
	120, // 210: mesos.v1.DeviceAccess.device:type_name -> mesos.v1.Device
	210, // 211: mesos.v1.DeviceAccess.access:type_name -> mesos.v1.DeviceAccess.Access
	121, // 212: mesos.v1.DeviceWhitelist.allowed_devices:type_name -> mesos.v1.DeviceAccess
	43,  // 213: mesos.v1.DrainConfig.max_grace_period:type_name -> mesos.v1.DurationInfo
	3,   // 214: mesos.v1.DrainInfo.state:type_name -> mesos.v1.DrainState
	123, // 215: mesos.v1.DrainInfo.config:type_name -> mesos.v1.DrainConfig
	5,   // 216: mesos.v1.FrameworkInfo.Capability.type:type_name -> mesos.v1.FrameworkInfo.Capability.Type
	75,  // 217: mesos.v1.FrameworkInfo.OfferFiltersEntry.value:type_name -> mesos.v1.OfferFilters
	53,  // 218: mesos.v1.CheckInfo.Command.command:type_name -> mesos.v1.CommandInfo
	26,  // 219: mesos.v1.HealthCheck.HTTPCheckInfo.protocol:type_name -> mesos.v1.NetworkInfo.Protocol
	26,  // 220: mesos.v1.HealthCheck.TCPCheckInfo.protocol:type_name -> mesos.v1.NetworkInfo.Protocol
	134, // 221: mesos.v1.DomainInfo.FaultDomain.region:type_name -> mesos.v1.DomainInfo.FaultDomain.RegionInfo
	135, // 222: mesos.v1.DomainInfo.FaultDomain.zone:type_name -> mesos.v1.DomainInfo.FaultDomain.ZoneInfo
	9,   // 223: mesos.v1.MasterInfo.Capability.type:type_name -> mesos.v1.MasterInfo.Capability.Type
	10,  // 224: mesos.v1.AgentInfo.Capability.type:type_name -> mesos.v1.AgentInfo.Capability.Type
	60,  // 225: mesos.v1.ResourceProviderInfo.Storage.plugin:type_name -> mesos.v1.CSIPluginInfo
	140, // 226: mesos.v1.Value.Ranges.range:type_name -> mesos.v1.Value.Range
	13,  // 227: mesos.v1.Resource.ReservationInfo.type:type_name -> mesos.v1.Resource.ReservationInfo.Type
	109, // 228: mesos.v1.Resource.ReservationInfo.labels:type_name -> mesos.v1.Labels
	149, // 229: mesos.v1.Resource.DiskInfo.persistence:type_name -> mesos.v1.Resource.DiskInfo.Persistence
	99,  // 230: mesos.v1.Resource.DiskInfo.volume:type_name -> mesos.v1.Volume
	150, // 231: mesos.v1.Resource.DiskInfo.source:type_name -> mesos.v1.Resource.DiskInfo.Source
	14,  // 232: mesos.v1.Resource.DiskInfo.Source.type:type_name -> mesos.v1.Resource.DiskInfo.Source.Type
	151, // 233: mesos.v1.Resource.DiskInfo.Source.path:type_name -> mesos.v1.Resource.DiskInfo.Source.Path
	152, // 234: mesos.v1.Resource.DiskInfo.Source.mount:type_name -> mesos.v1.Resource.DiskInfo.Source.Mount
	109, // 235: mesos.v1.Resource.DiskInfo.Source.metadata:type_name -> mesos.v1.Labels
	153, // 236: mesos.v1.ResourceStatistics.RateStatistics.rx_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 237: mesos.v1.ResourceStatistics.RateStatistics.rx_packet_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 238: mesos.v1.ResourceStatistics.RateStatistics.rx_drop_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 239: mesos.v1.ResourceStatistics.RateStatistics.rx_error_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 240: mesos.v1.ResourceStatistics.RateStatistics.tx_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 241: mesos.v1.ResourceStatistics.RateStatistics.tx_packet_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 242: mesos.v1.ResourceStatistics.RateStatistics.tx_drop_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	153, // 243: mesos.v1.ResourceStatistics.RateStatistics.tx_error_rate:type_name -> mesos.v1.ResourceStatistics.RatePercentiles
	54,  // 244: mesos.v1.ResourceUsage.Executor.executor_info:type_name -> mesos.v1.ExecutorInfo
	64,  // 245: mesos.v1.ResourceUsage.Executor.allocated:type_name -> mesos.v1.Resource
	72,  // 246: mesos.v1.ResourceUsage.Executor.statistics:type_name -> mesos.v1.ResourceStatistics
	39,  // 247: mesos.v1.ResourceUsage.Executor.container_id:type_name -> mesos.v1.ContainerID
	156, // 248: mesos.v1.ResourceUsage.Executor.tasks:type_name -> mesos.v1.ResourceUsage.Executor.Task
	37,  // 249: mesos.v1.ResourceUsage.Executor.Task.id:type_name -> mesos.v1.TaskID
	64,  // 250: mesos.v1.ResourceUsage.Executor.Task.resources:type_name -> mesos.v1.Resource
	109, // 251: mesos.v1.ResourceUsage.Executor.Task.labels:type_name -> mesos.v1.Labels
	159, // 252: mesos.v1.OfferFilters.ResourceQuantities.quantities:type_name -> mesos.v1.OfferFilters.ResourceQuantities.QuantitiesEntry
	157, // 253: mesos.v1.OfferFilters.MinAllocatableResources.quantities:type_name -> mesos.v1.OfferFilters.ResourceQuantities
	139, // 254: mesos.v1.OfferFilters.ResourceQuantities.QuantitiesEntry.value:type_name -> mesos.v1.Value.Scalar
	15,  // 255: mesos.v1.Offer.Operation.type:type_name -> mesos.v1.Offer.Operation.Type
	41,  // 256: mesos.v1.Offer.Operation.id:type_name -> mesos.v1.OperationID
	161, // 257: mesos.v1.Offer.Operation.launch:type_name -> mesos.v1.Offer.Operation.Launch
	162, // 258: mesos.v1.Offer.Operation.launch_group:type_name -> mesos.v1.Offer.Operation.LaunchGroup
	163, // 259: mesos.v1.Offer.Operation.reserve:type_name -> mesos.v1.Offer.Operation.Reserve
	164, // 260: mesos.v1.Offer.Operation.unreserve:type_name -> mesos.v1.Offer.Operation.Unreserve
	165, // 261: mesos.v1.Offer.Operation.create:type_name -> mesos.v1.Offer.Operation.Create
	166, // 262: mesos.v1.Offer.Operation.destroy:type_name -> mesos.v1.Offer.Operation.Destroy
	167, // 263: mesos.v1.Offer.Operation.grow_volume:type_name -> mesos.v1.Offer.Operation.GrowVolume
	168, // 264: mesos.v1.Offer.Operation.shrink_volume:type_name -> mesos.v1.Offer.Operation.ShrinkVolume
	169, // 265: mesos.v1.Offer.Operation.create_disk:type_name -> mesos.v1.Offer.Operation.CreateDisk
	170, // 266: mesos.v1.Offer.Operation.destroy_disk:type_name -> mesos.v1.Offer.Operation.DestroyDisk
	79,  // 267: mesos.v1.Offer.Operation.Launch.task_infos:type_name -> mesos.v1.TaskInfo
	54,  // 268: mesos.v1.Offer.Operation.LaunchGroup.executor:type_name -> mesos.v1.ExecutorInfo
	80,  // 269: mesos.v1.Offer.Operation.LaunchGroup.task_group:type_name -> mesos.v1.TaskGroupInfo
	64,  // 270: mesos.v1.Offer.Operation.Reserve.source:type_name -> mesos.v1.Resource
	64,  // 271: mesos.v1.Offer.Operation.Reserve.resources:type_name -> mesos.v1.Resource
	64,  // 272: mesos.v1.Offer.Operation.Unreserve.resources:type_name -> mesos.v1.Resource
	64,  // 273: mesos.v1.Offer.Operation.Create.volumes:type_name -> mesos.v1.Resource
	64,  // 274: mesos.v1.Offer.Operation.Destroy.volumes:type_name -> mesos.v1.Resource
	64,  // 275: mesos.v1.Offer.Operation.GrowVolume.volume:type_name -> mesos.v1.Resource
	64,  // 276: mesos.v1.Offer.Operation.GrowVolume.addition:type_name -> mesos.v1.Resource
	64,  // 277: mesos.v1.Offer.Operation.ShrinkVolume.volume:type_name -> mesos.v1.Resource
	139, // 278: mesos.v1.Offer.Operation.ShrinkVolume.subtract:type_name -> mesos.v1.Value.Scalar
	64,  // 279: mesos.v1.Offer.Operation.CreateDisk.source:type_name -> mesos.v1.Resource
	14,  // 280: mesos.v1.Offer.Operation.CreateDisk.target_type:type_name -> mesos.v1.Resource.DiskInfo.Source.Type
	64,  // 281: mesos.v1.Offer.Operation.DestroyDisk.source:type_name -> mesos.v1.Resource
	139, // 282: mesos.v1.TaskInfo.LimitsEntry.value:type_name -> mesos.v1.Value.Scalar
	139, // 283: mesos.v1.Task.LimitsEntry.value:type_name -> mesos.v1.Value.Scalar
	18,  // 284: mesos.v1.Environment.Variable.type:type_name -> mesos.v1.Environment.Variable.Type
	94,  // 285: mesos.v1.Environment.Variable.secret:type_name -> mesos.v1.Secret
	109, // 286: mesos.v1.Image.Appc.labels:type_name -> mesos.v1.Labels
	92,  // 287: mesos.v1.Image.Docker.credential:type_name -> mesos.v1.Credential
	94,  // 288: mesos.v1.Image.Docker.config:type_name -> mesos.v1.Secret
	23,  // 289: mesos.v1.Volume.Source.type:type_name -> mesos.v1.Volume.Source.Type
	182, // 290: mesos.v1.Volume.Source.docker_volume:type_name -> mesos.v1.Volume.Source.DockerVolume
	183, // 291: mesos.v1.Volume.Source.host_path:type_name -> mesos.v1.Volume.Source.HostPath
	184, // 292: mesos.v1.Volume.Source.sandbox_path:type_name -> mesos.v1.Volume.Source.SandboxPath
	94,  // 293: mesos.v1.Volume.Source.secret:type_name -> mesos.v1.Secret
	185, // 294: mesos.v1.Volume.Source.csi_volume:type_name -> mesos.v1.Volume.Source.CSIVolume
	91,  // 295: mesos.v1.Volume.Source.DockerVolume.driver_options:type_name -> mesos.v1.Parameters
	98,  // 296: mesos.v1.Volume.Source.HostPath.mount_propagation:type_name -> mesos.v1.MountPropagation
	24,  // 297: mesos.v1.Volume.Source.SandboxPath.type:type_name -> mesos.v1.Volume.Source.SandboxPath.Type
	187, // 298: mesos.v1.Volume.Source.CSIVolume.static_provisioning:type_name -> mesos.v1.Volume.Source.CSIVolume.StaticProvisioning
	188, // 299: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.block:type_name -> mesos.v1.Volume.Source.CSIVolume.VolumeCapability.BlockVolume
	189, // 300: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.mount:type_name -> mesos.v1.Volume.Source.CSIVolume.VolumeCapability.MountVolume
	190, // 301: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.access_mode:type_name -> mesos.v1.Volume.Source.CSIVolume.VolumeCapability.AccessMode
	186, // 302: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.volume_capability:type_name -> mesos.v1.Volume.Source.CSIVolume.VolumeCapability
	191, // 303: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.node_stage_secrets:type_name -> mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.NodeStageSecretsEntry
	192, // 304: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.node_publish_secrets:type_name -> mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.NodePublishSecretsEntry
	193, // 305: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.volume_context:type_name -> mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.VolumeContextEntry
	25,  // 306: mesos.v1.Volume.Source.CSIVolume.VolumeCapability.AccessMode.mode:type_name -> mesos.v1.Volume.Source.CSIVolume.VolumeCapability.AccessMode.Mode
	94,  // 307: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.NodeStageSecretsEntry.value:type_name -> mesos.v1.Secret
	94,  // 308: mesos.v1.Volume.Source.CSIVolume.StaticProvisioning.NodePublishSecretsEntry.value:type_name -> mesos.v1.Secret
	26,  // 309: mesos.v1.NetworkInfo.IPAddress.protocol:type_name -> mesos.v1.NetworkInfo.Protocol
	29,  // 310: mesos.v1.RLimitInfo.RLimit.type:type_name -> mesos.v1.RLimitInfo.RLimit.Type
	31,  // 311: mesos.v1.ContainerInfo.DockerInfo.network:type_name -> mesos.v1.ContainerInfo.DockerInfo.Network
	200, // 312: mesos.v1.ContainerInfo.DockerInfo.port_mappings:type_name -> mesos.v1.ContainerInfo.DockerInfo.PortMapping
	90,  // 313: mesos.v1.ContainerInfo.DockerInfo.parameters:type_name -> mesos.v1.Parameter
	97,  // 314: mesos.v1.ContainerInfo.MesosInfo.image:type_name -> mesos.v1.Image
	32,  // 315: mesos.v1.CgroupInfo.Blkio.Value.op:type_name -> mesos.v1.CgroupInfo.Blkio.Operation
	207, // 316: mesos.v1.CgroupInfo.Blkio.Statistics.cfq:type_name -> mesos.v1.CgroupInfo.Blkio.CFQ.Statistics
	207, // 317: mesos.v1.CgroupInfo.Blkio.Statistics.cfq_recursive:type_name -> mesos.v1.CgroupInfo.Blkio.CFQ.Statistics
	208, // 318: mesos.v1.CgroupInfo.Blkio.Statistics.throttling:type_name -> mesos.v1.CgroupInfo.Blkio.Throttling.Statistics
	209, // 319: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.device:type_name -> mesos.v1.Device.Number
	203, // 320: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.io_serviced:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	203, // 321: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.io_service_bytes:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	203, // 322: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.io_service_time:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	203, // 323: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.io_wait_time:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	203, // 324: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.io_merged:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	203, // 325: mesos.v1.CgroupInfo.Blkio.CFQ.Statistics.io_queued:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	209, // 326: mesos.v1.CgroupInfo.Blkio.Throttling.Statistics.device:type_name -> mesos.v1.Device.Number
	203, // 327: mesos.v1.CgroupInfo.Blkio.Throttling.Statistics.io_serviced:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	203, // 328: mesos.v1.CgroupInfo.Blkio.Throttling.Statistics.io_service_bytes:type_name -> mesos.v1.CgroupInfo.Blkio.Value
	329, // [329:329] is the sub-list for method output_type
	329, // [329:329] is the sub-list for method input_type
	329, // [329:329] is the sub-list for extension type_name
	329, // [329:329] is the sub-list for extension extendee
	0,   // [0:329] is the sub-list for field type_name
}

func init() { file_mesos_proto_init() }
func file_mesos_proto_init() {
	if File_mesos_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mesos_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceProviderID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*URL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unavailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KillPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSIPluginContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSIPluginEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSIPluginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceProviderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficControlStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcmpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UdpStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNMPStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InverseOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskResourceLimitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountPropagation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeccompInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinuxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RLimitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTYInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Labels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Label); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceWhitelist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrainInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameworkInfo_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInfo_Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInfo_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInfo_Tcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck_HTTPCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheck_TCPCheckInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandInfo_URI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo_FaultDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo_FaultDomain_RegionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DomainInfo_FaultDomain_ZoneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterInfo_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInfo_Capability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceProviderInfo_Storage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Scalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Ranges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_AllocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_ReservationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_RevocableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_SharedInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_DiskInfo_Persistence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_DiskInfo_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_DiskInfo_Source_Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource_DiskInfo_Source_Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatistics_RatePercentiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceStatistics_RateStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsage_Executor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceUsage_Executor_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferFilters_ResourceQuantities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferFilters_MinAllocatableResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_Launch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_LaunchGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_Reserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_Unreserve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_Destroy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_GrowVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_ShrinkVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_CreateDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer_Operation_DestroyDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatusInfo_Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatusInfo_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckStatusInfo_Tcp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Environment_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret_Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image_Appc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image_Docker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_DockerVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_HostPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_SandboxPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_CSIVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_CSIVolume_VolumeCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_CSIVolume_StaticProvisioning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_CSIVolume_VolumeCapability_BlockVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_CSIVolume_VolumeCapability_MountVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume_Source_CSIVolume_VolumeCapability_AccessMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo_IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInfo_PortMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RLimitInfo_RLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TTYInfo_WindowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_DockerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_MesosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerInfo_DockerInfo_PortMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_NetCls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio_CFQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio_Throttling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio_CFQ_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CgroupInfo_Blkio_Throttling_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device_Number); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mesos_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAccess_Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mesos_proto_msgTypes[152].OneofWrappers = []interface{}{
		(*Volume_Source_CSIVolume_VolumeCapability_Block)(nil),
		(*Volume_Source_CSIVolume_VolumeCapability_Mount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mesos_proto_rawDesc,
			NumEnums:      34,
			NumMessages:   177,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mesos_proto_goTypes,
		DependencyIndexes: file_mesos_proto_depIdxs,
		EnumInfos:         file_mesos_proto_enumTypes,
		MessageInfos:      file_mesos_proto_msgTypes,
	}.Build()
	File_mesos_proto = out.File
	file_mesos_proto_rawDesc = nil
	file_mesos_proto_goTypes = nil
	file_mesos_proto_depIdxs = nil
}
